<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Swift记事本</title>
  <icon>https://www.gravatar.com/avatar/7a0ce6fa4e17adea652dcf71161e676f</icon>
  <subtitle>徐杨的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.fatbobman.com/"/>
  <updated>2020-10-29T07:17:06.233Z</updated>
  <id>http://www.fatbobman.com/</id>
  
  <author>
    <name>徐杨</name>
    <email>xuyang@me.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在SwiftUI下对iPad进行适配</title>
    <link href="http://www.fatbobman.com/article/SwiftUIinIpad/"/>
    <id>http://www.fatbobman.com/article/SwiftUIinIpad/</id>
    <published>2020-10-29T07:13:23.000Z</published>
    <updated>2020-10-29T07:17:06.233Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SwiftUI创建初衷之一便是可以高效、可靠的适配多个苹果的硬件平台。在健康笔记2.0开发初始，适配iPad便是我本次的设计目标之一。本文并非教程，只是我在进行本次开发中，对于适配iPad的一些教训和心得。</p></blockquote><h2 id="我是谁">我是谁</h2><p>app中的代码必须能高效、清晰的了解当前设备的状况，时刻搞清楚我是谁，我在哪，在干啥等等。因此在项目开始之初我便做了不少的准备并创建了一系列的代码。</p><p>比如，当前的运行设备：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="comment">//MARK:当前设备类型 iphone ipad mac</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Devicetype</span></span>&#123;</span><br><span class="line">        <span class="keyword">case</span> iphone,ipad,mac</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> deviceType:<span class="type">Devicetype</span>&#123;</span><br><span class="line">        #<span class="keyword">if</span> os(macOS)</span><br><span class="line">        <span class="keyword">return</span> .mac</span><br><span class="line">        #<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>  <span class="type">UIDevice</span>.current.userInterfaceIdiom == .pad &#123;</span><br><span class="line">            <span class="keyword">return</span> .ipad</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> .iphone</span><br><span class="line">        &#125;</span><br><span class="line">        #endif</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如果想要具体了解当前运行设备的型号，Github上有人提供了代码可以返回更精准的信息。</p><p>为了能够在View中方便的利用这些状态信息应对不同的情况，还需要继续做些准备。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ViewBuilder</span> <span class="function"><span class="keyword">func</span> <span class="title">ifIs</span>&lt;T&gt;<span class="params">(<span class="number">_</span> condition: Bool, transform: <span class="params">(<span class="keyword">Self</span>)</span></span></span> -&gt; <span class="type">T</span>) -&gt; some <span class="type">View</span> <span class="keyword">where</span> <span class="type">T</span>: <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> condition &#123;</span><br><span class="line">            transform(<span class="keyword">self</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @<span class="type">ViewBuilder</span> <span class="function"><span class="keyword">func</span> <span class="title">ifElse</span>&lt;T:View,V:View&gt;<span class="params">( <span class="number">_</span> condition:Bool,isTransform:<span class="params">(<span class="keyword">Self</span>)</span></span></span> -&gt; <span class="type">T</span>,elseTransform:(<span class="type">Self</span>) -&gt; <span class="type">V</span>) -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> condition &#123;</span><br><span class="line">            isTransform(<span class="keyword">self</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            elseTransform(<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两段是我使用非常频繁的代码，在SwiftUI下，利用类似的代码可以非常容易的利用同一段代码应对各种不同的状况。</p><p>例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span>&#123;</span><br><span class="line">     <span class="type">Text</span>(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line">.ifIs(<span class="type">Deivce</span>.deviceType == .iphone)&#123;</span><br><span class="line">  $<span class="number">0</span>.frame(width:<span class="number">150</span>)</span><br><span class="line">&#125;</span><br><span class="line">.ifIs(<span class="type">Device</span>.deviceType == .ipad)&#123;</span><br><span class="line">  $<span class="number">0</span>.frame(width:<span class="number">300</span>)</span><br><span class="line">&#125;</span><br><span class="line">.ifIs(<span class="type">Device</span>.deviceType == .mac)&#123;</span><br><span class="line">  $<span class="number">0</span>.frmae(minWidth:<span class="number">200</span>,maxWidth:<span class="number">600</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有解决了我是谁的问题，后面的工作才能更好的展开</p><h2 id="躺着还是站着">躺着还是站着</h2><p>因为健康笔记以列表被主要表现形式的app，最初所以我希望在iphone上始终保持Portrait，在ipad上保持Landscape的形式。不过最终还是决定让其在ipad上同时支持Portrait和Landscape。</p><p><img src="ipadiPhone.png" alt="ipadiphone"></p><p>为了更灵活的处理，我没有选择在info.plist中对其进行设定，而是通过在delegate中，针对不同的情况作出响应。</p><p><img src="xcode.png" alt="xcode"></p><p>因为无需支持多窗口，所以关闭了multiple windows。另外需要激活Requires full screen才能让delegate作出响应</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>:<span class="title">NSObject</span>,<span class="title">UIApplicationDelegate</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?)</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Device</span>.deviceType == .ipad</span><br><span class="line">            ? <span class="type">UIInterfaceOrientationMask</span>.all</span><br><span class="line">            : <span class="type">UIInterfaceOrientationMask</span>.portrait</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SwiftUI下如何设置Delegate请查看<a href="http://www.fatbobman.com/article/swiftui2-app1/">SwiftUI2.0 —— App、Scene及新的代码结构</a></p><p>如此便可以方便的控制自己想要的app呈现形态了。</p><h2 id="难以控制的navigationview">难以控制的NavigationView</h2><p>SwiftUI的NavigationView本身为了适配做了不少的工作，但效果并不好。</p><p>目前它支持两种style： StackNavigationView、DoubleColumnNavigationViewStyle，三种表现形式：单列、双列、以及三列（sidebar）。虽然看似覆盖了多数的应用，但由于没有提供更多的控制选项，因此用起来并不顺手。</p><p>比如，DoubleColumnNavigationViewStyle，在ipad上的竖屏和横屏时的呈现是不同的。左上角的隐藏按钮不可更改，不可取消。在包含sidebar的三列模式下，逻辑又有不同，不过按钮同样不提供任何替换、取消的能力。</p><p>NavigationLink只能在当前列中响应，另外并不提供控制列宽的能力。</p><p><em>如果想调整双列NavigationView的列宽，可以使用Introspect，参见<a href="http://www.fatbobman.com/article/3rdpackage/">介绍几个我在开发健康笔记2用到的Swift或SwiftUI第三方库</a></em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span>&#123;</span><br><span class="line">  <span class="type">Text</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">.introspectNavigationController&#123; navigation <span class="keyword">in</span></span><br><span class="line">    navigation.splitViewController?.maximumPrimaryColumnWidth = <span class="number">360</span></span><br><span class="line">    navigation.splitViewController?.preferredPrimaryColumnWidth = <span class="number">500.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能够让ipad在竖屏或横屏状态下都固定呈现双列的模式，并且左侧列不可折叠同时也不能出现我想要的折叠按钮，我使用了一个不得已的手段。伪造了一个双列显示的NavigationView。</p><p>针对不同的设备进入不同的rootView</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HealthNotesApp</span>:<span class="title">APP</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body: some <span class="type">Scene</span>&#123;</span><br><span class="line">     rootView()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">rootView</span><span class="params">()</span></span>-&gt; some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="type">Device</span>.deviceType &#123;</span><br><span class="line">        <span class="keyword">case</span> .ipad:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">AnyView</span>(<span class="type">ContentView_iPad</span>())</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">AnyView</span>(<span class="type">ContentView_iPhone</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ContentView_iPad中，使用类似代码伪造一个双列形式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HStack</span>(spacing:<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="type">ItemRootView</span>(item: $item)</span><br><span class="line">           .frame(width:height)</span><br><span class="line">       <span class="type">Divider</span>()</span><br><span class="line">       <span class="type">ItemDataRootView</span>()</span><br><span class="line">            .navigationContent()</span><br><span class="line">        &#125;</span><br><span class="line">.edgesIgnoringSafeArea(.all)</span><br></pre></td></tr></table></figure><p>如此一来便拥有了上面图片中iPad的显示效果。状态基本上同DoubleColumnNavigationViewStyle的形式是完全一致的。分别都可以设置Toolbar，并且分割线也可以贯穿屏幕。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">navigationContent</span><span class="params">()</span></span> -&gt; some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="keyword">self</span></span><br><span class="line">        &#125;</span><br><span class="line">        .navigationViewStyle(<span class="type">StackNavigationViewStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于在Ipad下右侧列的视图同时被用在iphone下，在iPhone下它是由NavigationLink激活的，所以仍在NavigationView中，但在iPad下，需要明确的将在放置在NavigationView中。通过 .navigationContent，结合上面的isIf，便可以灵活的控制形态了。</p><p>另外需要针对iPhone和ipad的二级View激活进行分别处理,比如</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="type">Device</span>.deviceType  == .iphone &#123;</span><br><span class="line">                    <span class="type">NavigationLink</span>(<span class="string">""</span>, destination: <span class="type">ItemDataRootView</span>(), isActive: $gotoDataList).frame(width:<span class="number">0</span>,height:<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在link的button中</span></span><br><span class="line"><span class="type">Button</span>(<span class="string">"Item1"</span>)&#123;</span><br><span class="line">   store.item = item</span><br><span class="line">   <span class="keyword">if</span> <span class="type">Devie</span>.deviceType == .iphone &#123;</span><br><span class="line">       gotoDataList.toggle()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在ItemDataRootView中直接响应store.item即可</span></span><br></pre></td></tr></table></figure><h2 id="bug还是特别设计">Bug还是特别设计？</h2><p>某些SwiftUI的默认控件在iPad和iPhone下的运行效果和预期有较大差别,</p><p>比如ActionSheet:</p><p>当前AlertSheet在运行iOS14的ipad上的显示位置是几乎不可控的。箭头的位置，内容的显示，和预期都有巨大的差别。我不知道以后都会是这样还是目前的Bug。</p><p>个人不推荐当前在iPad上使用ActionSheet。最终只能在iPad下使用Alert替代了ActionSheet。如果一定要使用ActionSheet，popover或许是更好的选择。</p><p>ContextMenu目前在iPad上有响应上的问题，同样的指令在iPhone上没有问题，在iPad上会出现无法获取值的状况。同样不清楚是Bug还是其他原因。</p><p>比如</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">"click"</span>)</span><br><span class="line">.contextMenu&#123;</span><br><span class="line">  <span class="type">Button</span>(<span class="string">"del"</span>)&#123;</span><br><span class="line">     delItem = item</span><br><span class="line">     <span class="type">ShowActionSheet</span>.toggle()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="type">ActionSheet</span>(isPresented:showActionSheet)&#123;</span><br><span class="line">    delSheet(item:delItem)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码在iphone上执行没有任何问题，不过在ipad上，delsheet很有可能会无法获取item。为了避免这个情况，目前只能做些特殊处理</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="number">0.5</span>)&#123;</span><br><span class="line">                  showActionSheet.wrappedValue = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似上述的问题还有一些，只有当代码在ipad上跑起来多做测试才会发现其中的问题。</p><h2 id="布局优化">布局优化</h2><p>由于健康笔记2.0在iPad上显示的左右两列，所以本来在iphone下运行没有问题View,在iPad下就会出现左右不对齐，不对称等问题。所以只要多调试，采用isIf多做处理，问题基本上都会比较容易获得解决。</p><p>仅举一例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line">.listStyle(<span class="type">InsetGroupedListStyle</span>())</span><br></pre></td></tr></table></figure><p>当它在iphone上作为独占屏幕的View时，显示很完美，但当它显示在IPad的右侧列时，Group上方的留空和左侧列的就不对齐，做点处理就ok了。</p><h2 id="结尾">结尾</h2><p>总之使用SwiftUI适配iPhone和iPad总体来说还是比较容易的。能否充分利用好各自设备的特点主要还是要在交互逻辑和UI设计上多下功夫，代码上的难度不大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SwiftUI创建初衷之一便是可以高效、可靠的适配多个苹果的硬件平台。在健康笔记2.0开发初始，适配iPad便是我本次的设计目标之一。本文并非教程，只是我在进行本次开发中，对于适配iPad的一些教训和心得。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>聊一下在SwiftUI中使用CoreData</title>
    <link href="http://www.fatbobman.com/article/CoreDataInSwiftUI/"/>
    <id>http://www.fatbobman.com/article/CoreDataInSwiftUI/</id>
    <published>2020-10-28T03:39:34.000Z</published>
    <updated>2020-10-28T03:41:45.844Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文并非一个教你如何在SwiftUI下使用CoreData的教程。主要探讨的是在我近一年的SwiftUI开发中使用CoreData的教训、经验、心得。</p></blockquote><h2 id="swiftui-lifecycle-中如何声明持久化存储和上下文">SwiftUI lifecycle 中如何声明持久化存储和上下文</h2><p>在XCode12中，苹果新增了SwiftUI lifecycle，让App完全的SwiftUI化。不过这就需要我们使用新的方法来声明持久化存储和上下文。</p><p>好像是从beta6开始，XCode 12提供了基于SwiftUI lifecycle的CoreData模板</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoreDataTestApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="comment">//持久化声明</span></span><br><span class="line">    <span class="keyword">let</span> persistenceController = <span class="type">PersistenceController</span>.shared</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .environment(\.managedObjectContext, persistenceController.container.viewContext)  </span><br><span class="line">          <span class="comment">//上下文注入</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在它的Presitence中，添加了用于preview的持久化定义</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersistenceController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">PersistenceController</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> preview: <span class="type">PersistenceController</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="type">PersistenceController</span>(inMemory: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">let</span> viewContext = result.container.viewContext</span><br><span class="line">        <span class="comment">//根据你的实际需要，创建用于preview的数据</span></span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> newItem = <span class="type">Item</span>(context: viewContext)</span><br><span class="line">            newItem.timestamp = <span class="type">Date</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> viewContext.save()</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> nsError = error <span class="keyword">as</span> <span class="type">NSError</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"Unresolved error <span class="subst">\(nsError)</span>, <span class="subst">\(nsError.userInfo)</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> container: <span class="type">NSPersistentCloudKitContainer</span></span><br><span class="line">    <span class="comment">//如果是用于preview便将数据保存在内存而非sqlite中</span></span><br><span class="line">    <span class="keyword">init</span>(inMemory: <span class="type">Bool</span> = <span class="literal">false</span>) &#123;</span><br><span class="line">        container = <span class="type">NSPersistentCloudKitContainer</span>(name: <span class="string">"Shared"</span>)</span><br><span class="line">        <span class="keyword">if</span> inMemory &#123;</span><br><span class="line">            container.persistentStoreDescriptions.first!.url = <span class="type">URL</span>(fileURLWithPath: <span class="string">"/dev/null"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        container.loadPersistentStores(completionHandler: &#123; (storeDescription, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = error <span class="keyword">as</span> <span class="type">NSError</span>? &#123;</span><br><span class="line">                <span class="built_in">fatalError</span>(<span class="string">"Unresolved error <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然对于用于preview的持久化设置并不完美，不过苹果也意识到了在SwiftUI1.0中的一个很大问题，无法preview使用了@FetchRequest的视图。</p><p>由于在官方CoreData模板出现前，我已经开始了我的项目构建，因此，我使用了下面的方式来声明</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HealthNotesApp</span>:<span class="title">App</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> coreDataStack = <span class="type">CoreDataStack</span>(modelName: <span class="string">"Model"</span>) <span class="comment">//Model.xcdatemodeld</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> context = <span class="type">DataNoteApp</span>.coreDataStack.managedContext</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">var</span> storeRoot = <span class="type">Store</span>() </span><br><span class="line">   @<span class="type">UIApplicationDelegateAdaptor</span>(<span class="type">AppDelegate</span>.<span class="keyword">self</span>) <span class="keyword">var</span> delegate</span><br><span class="line">  <span class="type">WindowGroup</span> &#123;</span><br><span class="line">        rootView()</span><br><span class="line">            .environmentObject(store)</span><br><span class="line">    .environment(\.managedObjectContext, <span class="type">DataNoteApp</span>.context)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在UIKit App Delegate中，我们可以使用如下代码在App任意位置获取上下文</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> context = (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span>).persistentContainer.viewContext</span><br></pre></td></tr></table></figure><p>但由于我们已经没有办法在SwiftUI lifecycle中如此使用，通过上面的声明我们可以利用下面的方法在全局获取想要的上下文或其他想要获得的对象</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> context = <span class="type">HealthNotesApp</span>.context</span><br></pre></td></tr></table></figure><p>比如在 delegate中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>:<span class="title">NSObject</span>,<span class="title">UIApplicationDelegate</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> send = <span class="type">HealthNotesApp</span>.storeRoot.send</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">       </span><br><span class="line">        logDebug(<span class="string">"app startup on ios"</span>)</span><br><span class="line">       </span><br><span class="line">        send(.loadNote)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidFinishLaunching</span><span class="params">(<span class="number">_</span> application: UIApplication)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        logDebug(<span class="string">"app quit on ios"</span>)</span><br><span class="line">        send(.counter(.save))</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者直接操作数据库，都是可以的</span></span><br></pre></td></tr></table></figure><h2 id="如何动态设置-fetchrequest">如何动态设置 @FetchRequest</h2><p>在SwiftUI中，如果无需复杂的数据操作，使用CoreData是非常方便的。在完成xcdatamodeld的设置后，我们就可以在View中轻松的操作数据了。</p><p>我们通常使用如下语句来获取某个entity的数据</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">FetchRequest</span>(sortDescriptors: [<span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">Student</span>.studentId, ascending: <span class="literal">true</span>)],</span><br><span class="line">              predicate:<span class="type">NSPredicate</span>(format: <span class="string">"age &gt; 10"</span>),</span><br><span class="line">              animation: .<span class="keyword">default</span>) </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> students: <span class="type">FetchedResults</span>&lt;<span class="type">Student</span>&gt;</span><br></pre></td></tr></table></figure><p>不过如此使用的话，查询条件将无法改变，如果想根据需要调整查询条件，可以使用下面的方法。</p><p>健康笔记2中的部分代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rootView</span>:<span class="title">View</span></span>&#123;</span><br><span class="line">@<span class="type">State</span> <span class="keyword">var</span> predicate:<span class="type">NSPredicate</span>? = <span class="literal">nil</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> <span class="built_in">sort</span> = <span class="type">NSSortDescriptor</span>(key: <span class="string">"date"</span>, ascending: <span class="literal">false</span>)</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">var</span> searchStore = <span class="type">SearchStore</span>()</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> store:<span class="type">Store</span></span><br><span class="line">   <span class="keyword">var</span> body:some <span class="type">View</span>&#123;</span><br><span class="line">      <span class="type">VStack</span> &#123;</span><br><span class="line">       <span class="type">SearchBar</span>(text: $searchStore.searchText) <span class="comment">//搜索框</span></span><br><span class="line">       <span class="type">MemoList</span>(predicate: predicate, <span class="built_in">sort</span>: <span class="built_in">sort</span>,searching:searchStore.showSearch)</span><br><span class="line">    &#125;</span><br><span class="line">      .onChange(of: searchStore.text)&#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">          getMemos()</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">//读取指定范围的memo</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getMemos</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> predicators:[<span class="type">NSPredicate</span>] = []</span><br><span class="line">        <span class="keyword">if</span> !searchStore.searchText.isEmpty &amp;&amp; searchStore.showSearch &#123;</span><br><span class="line">            <span class="comment">//memo内容或者item名称包含关键字</span></span><br><span class="line">            predicators.append(<span class="type">NSPredicate</span>(format: <span class="string">"itemData.item.name contains[cd] %@ OR content contains[cd] %@"</span>, searchStore.searchText,searchStore.searchText))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> star &#123;</span><br><span class="line">            predicators.append(<span class="type">NSPredicate</span>(format: <span class="string">"star = true"</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> store.state.memo&#123;</span><br><span class="line">        <span class="keyword">case</span> .all:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .memo:</span><br><span class="line">            <span class="keyword">if</span> !searchStore.searchText.isEmpty &amp;&amp; noteOption == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                predicators.append(<span class="type">NSPredicate</span>(format: <span class="string">"itemData.item.note = nil"</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> .note(<span class="keyword">let</span> note):</span><br><span class="line">            <span class="keyword">if</span> !searchStore.searchText.isEmpty &amp;&amp; noteOption == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                predicators.append(<span class="type">NSPredicate</span>(format: <span class="string">"itemData.item.note = %@"</span>, note))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        withAnimation(.easeInOut)&#123;</span><br><span class="line">            predicate =  <span class="type">NSCompoundPredicate</span>(type: <span class="type">NSCompoundPredicate</span>.<span class="type">LogicalType</span>.and, subpredicates: predicators)</span><br><span class="line">            <span class="built_in">sort</span> =  <span class="type">NSSortDescriptor</span>(key: <span class="string">"date"</span>, ascending: ascending)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码会根据搜索关键字以及一些其他的范围条件，动态的创建predicate，从而获得所需的数据。</p><p>对于类似查询这样的操作，最好配合上Combine来限制数据获取的频次</p><p>例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchStore</span>:<span class="title">ObservableObject</span></span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> searchText = <span class="string">""</span></span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> text = <span class="string">""</span></span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> showSearch = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> cancellables:[<span class="type">AnyCancellable</span>] = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">registerPublisher</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $searchText</span><br><span class="line">            .removeDuplicates()</span><br><span class="line">            .debounce(<span class="keyword">for</span>: <span class="number">0.4</span>, scheduler: <span class="type">DispatchQueue</span>.main)</span><br><span class="line">            .assign(to: &amp;$text)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removePublisher</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cancellables.removeAll()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>上述所有代码均缺失了很大部分，仅做思路上的说明</em></p><h2 id="增加转换层方便代码开发">增加转换层方便代码开发</h2><p>在开发健康笔记 1.0的时候我经常被类似下面的代码所烦恼</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">FetchRequest</span>(sortDescriptors: [<span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">Student</span>.name, ascending: <span class="literal">true</span>)],</span><br><span class="line">              animation: .<span class="keyword">default</span>) </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> students: <span class="type">FetchedResults</span>&lt;<span class="type">Student</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">ForEach</span>(students)&#123; student <span class="keyword">in</span></span><br><span class="line">  <span class="type">Text</span>(student.name ?? <span class="string">""</span>)</span><br><span class="line">  <span class="type">Text</span>(<span class="type">String</span>(student.date ?? <span class="type">Date</span>()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在CoreData中，设置Attribute，很多时候并不能完全如愿。</p><p>好几个类型是可选的，比如String，UUID等，如果在已发布的app，将新增的attribute其改为不可选，并设置默认值，将极大的增加迁移的难度。另外，如果使用了NSPersistentCloudKitContainer,由于Cloudkit的atrribute和CoreData并不相同，XCode会强制你将很多Attribute改成你不希望的样式。</p><p>为了提高开发效率，并为未来的修改留出灵活、充分的更改空间，在健康笔记2.0的开发中，我为每个NSManagedObject都增加了一个便于在View和其他数据操作中使用的中间层。</p><p>例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span>(<span class="type">Student</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">NSManagedObject</span>,<span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">    @<span class="type">NSmanaged</span> <span class="keyword">public</span> <span class="keyword">var</span> birthdate: <span class="type">Date</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">StudentViewModel</span>: <span class="title">Identifiable</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name:<span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> birthdate:<span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> viewModel:<span class="type">StudentViewModel</span>(</span><br><span class="line">        name:name ?? <span class="string">""</span></span><br><span class="line">        birthdate:(birthdate ?? <span class="type">Date</span>()).<span class="built_in">toString</span>() <span class="comment">//举例</span></span><br><span class="line">   )</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，在View中调用将非常方便，同时即使更改entity的设置，整个程序的代码修改量也将显著降低。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(students)&#123; student <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">let</span> student = student.viewModel</span><br><span class="line">  <span class="type">Text</span>(student.name)</span><br><span class="line">  <span class="type">Text</span>(student.birthdate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，对于数据的其他操作，我也都通过这个viewModel来完成。</p><p>比如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//MARK:通过ViewModel生成Note数据,所有的prepare动作都需要显示调用 _coreDataSave()</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">_prepareNote</span><span class="params">(<span class="number">_</span> viewModel:NoteViewModel)</span></span> -&gt; <span class="type">Note</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> note = <span class="type">Note</span>(context: context )</span><br><span class="line">        note.id = viewModel.id </span><br><span class="line">        note.index = <span class="type">Int32</span>(viewModel.index)  </span><br><span class="line">        note.createDate = viewModel.createDate  </span><br><span class="line">        note.name = viewModel.name </span><br><span class="line">        note.source = <span class="type">Int32</span>(viewModel.source)  </span><br><span class="line">        note.descriptionContent = viewModel.descriptionContent </span><br><span class="line">        note.color = viewModel.color.rawValue </span><br><span class="line">        <span class="keyword">return</span> note</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK:更新Note数据,仍需显示调用save</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">_updateNote</span><span class="params">(<span class="number">_</span> note:Note,<span class="number">_</span> viewModel:NoteViewModel)</span></span> -&gt; <span class="type">Note</span> &#123;</span><br><span class="line">        note.name = viewModel.name</span><br><span class="line">        note.source = <span class="type">Int32</span>(viewModel.source)</span><br><span class="line">        note.descriptionContent = viewModel.descriptionContent</span><br><span class="line">        note.color = viewModel.color.rawValue</span><br><span class="line">        <span class="keyword">return</span> note</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newNote</span><span class="params">(noteViewModel:NoteViewModel)</span></span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">AppAction</span>,<span class="type">Never</span>&gt; &#123;</span><br><span class="line">       <span class="keyword">let</span> <span class="number">_</span> = _prepareNote(noteViewModel)</span><br><span class="line">       <span class="keyword">if</span>  !_coreDataSave() &#123;</span><br><span class="line">            logDebug(<span class="string">"新建Note出现错误"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="type">Just</span>(<span class="type">AppAction</span>.<span class="keyword">none</span>).eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">editNote</span><span class="params">(note:Note,newNoteViewModel:NoteViewModel)</span></span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">AppAction</span>,<span class="type">Never</span>&gt;&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="number">_</span> = _updateNote(note, newNoteViewModel)</span><br><span class="line">        <span class="keyword">if</span> !_coreDataSave() &#123;</span><br><span class="line">            logDebug(<span class="string">"更新Note出现错误"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Just</span>(<span class="type">AppAction</span>.<span class="keyword">none</span>).eraseToAnyPublisher()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在View中调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(<span class="string">"New"</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> noteViewModel = <span class="type">NoteViewModel</span>(createDate: <span class="type">Date</span>(), descriptionContent: myState.noteDescription, id: <span class="type">UUID</span>(), index: -<span class="number">1</span>, name: myState.noteName, source: <span class="number">0</span>, color: .<span class="keyword">none</span>)</span><br><span class="line">     store.send(.newNote(noteViewModel: noteViewModel))</span><br><span class="line">     presentationMode.wrappedValue.dismiss()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从而将可选值或者类型转换控制在最小范围</p><h2 id="使用nspersistentcloudkitcontainer-需要注意的问题">使用NSPersistentCloudKitContainer 需要注意的问题</h2><p>从iOS13开始，苹果提供了NSPersistentCloudKitContainer，让app可以以最简单的方式享有了数据库云同步功能。</p><p>不过在使用中，我们需要注意几个问题。</p><ul><li><p>Attribute<br>在上一节提高过，由于Cloudkit的数据设定和CoreData并不完全兼容，因此如果你在项目初始阶段是使用NSPersistentContainer进行开发的，当将代码改成NSPersistentCloudKitContainer后，XCode可能会提示你某些Attribute不兼容的情况。如果你采用了中间层处理数据，修改起来会很方便，否则你需要对已完成的代码做出不少的修改和调整。我通常为了开发调试的效率，只有到最后的时候才会使用NSPersistentCloudKitContainer，因此这个问题会比较突出。</p></li><li><p>合并策略<br>奇怪的是，在XCode的CoreData（点选使用CloudKit）默认模板中，并没有设定合并策略。如果没有设置的话，当app的数据进行云同步时，时长会出现合并错误，并且@FetchRequest也并不会在有数据发生变动时对View进行刷新。因此我们需要自己明确数据的合并策略。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> persistentContainer: <span class="type">NSPersistentCloudKitContainer</span> = &#123;</span><br><span class="line">    <span class="keyword">let</span> container = <span class="type">NSPersistentCloudKitContainer</span>(name: modelName)</span><br><span class="line">    container.loadPersistentStores(completionHandler: &#123; (storeDescription, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> error = error <span class="keyword">as</span> <span class="type">NSError</span>? &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"Unresolved error <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//需要显式表明下面的合并策略,否则会出现合并错误!</span></span><br><span class="line">    container.viewContext.automaticallyMergesChangesFromParent = <span class="literal">true</span></span><br><span class="line">    container.viewContext.mergePolicy = <span class="type">NSMergeByPropertyObjectTrumpMergePolicy</span></span><br><span class="line">    <span class="keyword">return</span> container</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li><li><p>调试信息<br>当打开云同步后，在调试信息中将出现大量的数据同步调试信息，严重影响了对于其他调试信息的观察。虽然可以通过启动命令屏蔽掉数据同步信息，但有时候我还是需要对其进行观察的。目前我使用了一个临时的解决方案。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> !targetEnvironment(macCatalyst) &amp;&amp; canImport(<span class="type">OSLog</span>)</span><br><span class="line"><span class="keyword">import</span> OSLog</span><br><span class="line"><span class="keyword">let</span> logger = <span class="type">Logger</span>.<span class="keyword">init</span>(subsystem: <span class="string">"com.fatbobman.DataNote"</span>, category: <span class="string">"main"</span>) <span class="comment">//调试用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logDebug</span><span class="params">(<span class="number">_</span> text:String,enable:Bool = <span class="literal">true</span>)</span></span>&#123;</span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">    <span class="keyword">if</span> enable &#123;</span><br><span class="line">        logger.debug(<span class="string">"<span class="subst">\(text)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    #endif</span><br><span class="line">&#125;</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logDebug</span><span class="params">(<span class="number">_</span> text:String,enable:Bool = <span class="literal">true</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(text,<span class="string">"$$$$"</span>)</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>对于需要显示调试信息的地方</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logDebug(<span class="string">"数据格式错误"</span>)</span><br></pre></td></tr></table></figure><p>然后通过在Debug窗口中将Filter设置为$$$$来屏蔽掉暂时不想看到的其他信息</p></li></ul><h2 id="不要用sql的思维限制了coredata的能力">不要用SQL的思维限制了CoreData的能力</h2><p>CoreData虽然主要是采用Sqlite来作为数据存储方案，不过对于它的数据对象操作不要完全套用Sql中的惯用思维。</p><p><strong>一些例子</strong></p><p>排序：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sql式的</span></span><br><span class="line"><span class="type">NSSortDescriptor</span>(key: <span class="string">"name"</span>, ascending: <span class="literal">true</span>)</span><br><span class="line"><span class="comment">//更CoreData化，不会出现拼写错误</span></span><br><span class="line"><span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">Student</span>.name, ascending: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>在断言中不适用子查询而直接比较对象：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">"itemData.item.name = %@"</span>,name)</span><br></pre></td></tr></table></figure><p>Count:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">_getCount</span><span class="params">(entity:String,predicate:NSPredicate?)</span></span> -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> fetchRequest = <span class="type">NSFetchRequest</span>&lt;<span class="type">NSNumber</span>&gt;(entityName: entity)  </span><br><span class="line">        fetchRequest.predicate = predicate</span><br><span class="line">        fetchRequest.resultType = .countResultType</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> results  = <span class="keyword">try</span> context.fetch(fetchRequest)</span><br><span class="line">            <span class="keyword">let</span> <span class="built_in">count</span> = results.first!.intValue</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">count</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> &#123;</span><br><span class="line">            #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">            logDebug(<span class="string">"<span class="subst">\(error.localizedDescription)</span>"</span>)</span><br><span class="line">            #endif</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>或者更加简单的count</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">FetchRequest</span>(sortDescriptors: [<span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">Student</span>.name, ascending: <span class="literal">true</span>)],</span><br><span class="line">              animation: .<span class="keyword">default</span>) </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> students: <span class="type">FetchedResults</span>&lt;<span class="type">Student</span>&gt;</span><br><span class="line"></span><br><span class="line">sutudents.<span class="built_in">count</span></span><br></pre></td></tr></table></figure><p>对于数据量不大的情况，我们也可以不采用上面的动态predicate方式，在View中直接对获取后的数据进行操作，比如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">FetchRequest</span>(sortDescriptors: [<span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">Student</span>.name, ascending: <span class="literal">true</span>)],</span><br><span class="line">              animation: .<span class="keyword">default</span>) </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> studentDatas: <span class="type">FetchedResults</span>&lt;<span class="type">Student</span>&gt;</span><br><span class="line">@<span class="type">State</span> <span class="keyword">var</span> students:[<span class="type">Student</span>] = []</span><br><span class="line"><span class="keyword">var</span> body:some <span class="type">View</span>&#123;</span><br><span class="line">  <span class="type">List</span>&#123;</span><br><span class="line">        <span class="type">ForEach</span>(students)&#123; student <span class="keyword">in</span></span><br><span class="line">           <span class="type">Text</span>(student.viewModel.name)</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .onReceive(studentDatas.publisher)&#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            students = studentDatas.<span class="built_in">filter</span>&#123; student <span class="keyword">in</span></span><br><span class="line">                student.viewModel.age &gt; <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总之数据皆对象</strong></p><h2 id="遗憾和不足">遗憾和不足</h2><p>苹果在努力提高CoreData在SwiftUI下的表现，不过目前还是有一些遗憾和不足的。</p><ul><li>@FetchRequest的控制选项太少<br>当前我们无法设置FetchRequest的limitNumber以及returnsObjectsAsFaults，它会直接将所有的数据读入到上下文中，当数据量较大时，这样的效率是很低下的。所以如果需要处理较大数据集的时候，最好不要依赖@FetchRequest。</li><li>animation有些神经刀<br>在List中显示@FetchRquest获取的数据集，即使你明确设置了animation（FetchRequest，以及List）,并且也显式的使用了withAnimation对所需操作强制动画调用，但动画并不能总如你的预期般实现。完全相同的代码，放置在不同的地方，有时会出现不同的结果。<br>当通过UITableViewDiffableDataSource数据来调用自己包装的UITableView后，动画就不会再不可控了。希望苹果能早点解决这个Bug.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文并非一个教你如何在SwiftUI下使用CoreData的教程。主要探讨的是在我近一年的SwiftUI开发中使用CoreData的教训、经验、心得。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;swiftui-lifecycle-中如何声
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="CoreData" scheme="http://www.fatbobman.com/tags/CoreData/"/>
    
  </entry>
  
  <entry>
    <title>介绍几个我在开发健康笔记2用到的Swift或SwiftUI第三方库</title>
    <link href="http://www.fatbobman.com/article/3rdpackage/"/>
    <id>http://www.fatbobman.com/article/3rdpackage/</id>
    <published>2020-10-27T01:38:01.000Z</published>
    <updated>2020-10-27T01:38:46.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="swiftuix"><a href="https://github.com/SwiftUIX/SwiftUIX" target="_blank" rel="noopener">SwiftUIX</a></h2><blockquote><p>SwiftUIX试图弥补仍处于新生阶段的SwiftUI框架的空白，提供了广泛的组件，扩展和实用程序套件来补充标准库。 迄今为止，该项目是缺少的UIKit / AppKit功能的最完整的移植，力求使其以大多数类似于Apple的方式交付。<br>这个项目的目标是补充SwiftUI标准库，提供数百种扩展和视图，使开发人员可以轻松地通过SwiftUI的革命来构建应用程序。</p></blockquote><p>提供了非常多的苹果本应提供但没有提供的功能扩展。项目的发起者非常年轻，但mac的开发经验十分丰富。到目前为止一直保持的较高的更新频率和维护状态。这个库同时支持UIKit和Appkit，对于需要做苹果生态全平台的用户十分友好。由于目前SwiftUI的List和LazyVStack的问题还很多，他自己在开发中也深受其苦，前天在交流中，他已经决定重做CocoaList功能，尤其提高对Fetchrequest的支持。</p><p>对于进行SwiftUI开发的朋友，它是十分值得推荐的。</p><p>目前的问题是文档太少。不过对我来说也未尝不是一个好事。在研究它的用法过程中，给了我更多的机会阅读并学习它的代码，对SwiftUI，UIkit等有了更多的认识和了解。</p><h2 id="charts"><a href="https://github.com/danielgindi/Charts" target="_blank" rel="noopener">Charts</a></h2><blockquote><p>denielgindi对著名的安卓图表库 MPAndroidChart的Swift移植。是目前不多的纯Swift解决方案。它的优势也是同时支持UIKit和Appkit，同时提供了不错的Demo社区活跃度。</p></blockquote><p>不过他的开发者好像不打算在3.x版本上在增加太多的功能，非常多目前急需并且已有解决方案的功能并没有被当前版本接受。所以整体的视觉呈现还是比较传统的。社区上对于功能的讨论不少，但合并的极少，4.0的版本好像也已经开发了不短的时间了，不过进度好像也不是特别理想。</p><p>从效率上讲，Charts应该是非常合格的了。</p><p><a href="https://www.hangge.com" target="_blank" rel="noopener">航歌</a> 上面有非常详细的中文使用教程，对我的学习帮助很大。</p><p>为了健康笔记开发的需要，我在当前3.6的版本上合并了两个社区上较为成熟的解决方案：</p><ul><li><p>圆角Bar</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataSet.roundedCorners = [.topLeft,.topRight]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>渐变色Bar</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataSet.drawBarGradientEnabled = <span class="literal">true</span></span><br><span class="line">            dataSet.colors = [<span class="type">UIColor</span>(named: <span class="string">"barColor1"</span>)!, <span class="type">UIColor</span>(named: <span class="string">"barColor1"</span>)!, <span class="type">UIColor</span>(named: <span class="string">"barColor2"</span>)!]</span><br><span class="line">            dataSet.gradientPositions = [<span class="number">0</span>, <span class="number">40</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure></li></ul><p>由于当前的Charts本身并不支持对于图表滚动后停止事件的响应，我自己为它增加了停止响应。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//滚动终止时调用</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chartScrollStop</span><span class="params">(<span class="number">_</span> chartView:ChartViewBase)</span></span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"stopped"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改后的代码<a href="https://github.com/fatbobman/Charts" target="_blank" rel="noopener">在此可以获得</a>。</p><h2 id="introspect"><a href="https://github.com/siteline/SwiftUI-Introspect" target="_blank" rel="noopener">Introspect</a></h2><blockquote><p>Introspect允许您获取SwiftUI视图的基础UIKit或AppKit元素。<br>例如，使用Introspect，您可以访问UITableView来修改分隔符，或访问UINavigationController来自定义选项卡栏。</p></blockquote><p>有一个非常推荐的利器。目前官方对于SwiftUI中的控件提供的可控选项很少，如果想做一些深度定制的话，通常就是自己写代码来重新包装UIkit控件。不过introspect提供了一个非常巧妙的办法通过简单的注入方式便可以对SwiftUI控件做更多的调整。</p><p>比如：</p><p>只有当内容超出显示范围才进行滚动</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScrollView</span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">.introspectScrollView&#123; scrollView <span class="keyword">in</span></span><br><span class="line">        crollView.isScrollEnabled = scrollView.contentSize.height &gt; scrollView.frame.height</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><p>显示TextField的clear按钮</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TextField</span>(<span class="string">"note_noteName"</span>,text: $myState.noteName)</span><br><span class="line">          .introspectTextField&#123; text <span class="keyword">in</span></span><br><span class="line">             text.clearButtonMode = .whileEditing</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>对于新的控件它本身还没提供具体支持的也可以方便的注入</p><p>修改SwiftUI2.0中新提供的TextEditor背景色</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TextEditor</span>(text: $text)</span><br><span class="line">                .introspect(selector: <span class="type">TargetViewSelector</span>.sibling)&#123; textView <span class="keyword">in</span></span><br><span class="line">                    textView.backgroundColor = .clear</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>等等。类似的用法在我整个的开发中的使用频率是很高的。</p><h2 id="swiftdate"><a href="https://github.com/malcommac/SwiftDate" target="_blank" rel="noopener">SwiftDate</a></h2><blockquote><p>使用Swift编写的时间日期处理库。同时支持苹果平台以及Linux。</p></blockquote><p>它提供了非常详尽的文档，航哥上也有非常好的中文教程。</p><p>由于健康笔记需要对数据进行不少处理，尤其是需要将相同时间粒度的数据进行合并比较。SwiftDate提供的Region方案提供了完美的解决途径。</p><p>在SwiftDate中，我多数使用它提供的DateInRegion来处理日期。通过</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SwiftDate</span>.defaultRegion = region</span><br></pre></td></tr></table></figure><p>我几乎无需关心日期的本地化问题。而且它也提供了部分的日期时间的本地化显示方案（但并不完美）。</p><p>一些使用举例：</p><p>除非用户在app中设定了特定的时区，否则使用当前设备的默认设置：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> data = <span class="type">UserDefaults</span>.standard.data(forKey: <span class="string">"dateRegion"</span>),</span><br><span class="line">           <span class="keyword">let</span> region = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().decode(<span class="type">Region</span>.<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">            <span class="type">SwiftDate</span>.defaultRegion = region</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">SwiftDate</span>.defaultRegion = <span class="type">Region</span>(calendar: <span class="type">Calendars</span>.gregorian, zone: <span class="type">Zones</span>.current, locale: <span class="type">Locales</span>.current)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>判断某个日期和指定日期的天数差（本地时区）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> startDate = <span class="type">DateInRegion</span>(datas.first!.viewModel.date1).dateTruncated(at: [.hour,.minute,.second])!</span><br><span class="line">duration = date.difference(<span class="keyword">in</span>: .day, from: startDate) ?? <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果你的程序需要对日期进行频繁的处理或者有较多的本地化需求时，SwiftDate是非常好的选择！</p><h2 id="swiftuioverlaycontainer"><a href="https://github.com/fatbobman/SwiftUIOverlayContainer" target="_blank" rel="noopener">SwiftUIOverlayContainer</a></h2><blockquote><p>SwiftUIOverlayContainer本身并不提供任何预置的视图样式，不过通过它，你有充分的自有度来实现自己需要的视图效果。OverlayContainer的主要目的在于帮助你完成动画、交互、样式定制等基础工作，使开发者能够将时间和精力仅需投入在视图本身的代码上。</p></blockquote><p>这是我自己写的一个库，这次通过它实现的屏幕侧边滑动菜单。</p><p>本来它的用途主要不是做这个的，暂时使用它来完成侧向滑动菜单也是权宜之计，表现尚可。</p><h2 id="zipfoundation"><a href="https://github.com/weichsel/ZIPFoundation" target="_blank" rel="noopener">ZIPFoundation</a></h2><blockquote><p>ZIP Foundation是一个用于创建，读取和修改ZIP存档文件的库。<br>它是用Swift编写的，基于Apple的libcompression来实现高性能和高能效。</p></blockquote><p>小巧、高效，使用便捷。健康笔记在数据导入导出时，使用它来完成zip文件的操作。</p><p>比如解压备份数据：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开沙盒读取权限</span></span><br><span class="line">   <span class="number">_</span> = url.startAccessingSecurityScopedResource() </span><br><span class="line"><span class="comment">//解压</span></span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> <span class="type">FileManager</span>.<span class="keyword">default</span>.unzipItem(at: url, to: <span class="type">URL</span>(fileURLWithPath: <span class="type">NSTemporaryDirectory</span>()))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> &#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="markdownview"><a href="https://github.com/keitaoouchi/MarkdownView" target="_blank" rel="noopener">MarkdownView</a></h2><blockquote><p>基于WKwebView实现的Markdown文件Viewer。对md的解析是通过调用js库来完成的。</p></blockquote><p>由于SwiftUI的Text文本排版能力几乎为零，因此我选择使用md格式来保存app所需的一些文字显示，比如隐私政策等。</p><p>MarkdownView的渲染效率一般，但我的显示需求并不大，所以感觉不明显。但它的开发者对js文件进行了加扰处理，所以如果你想对其中它所调用的例如mardown-it进行更多配置的话，就几乎不可能了。</p><p>另外，通过UIViewRepresentable对其进行封装，在SwiftUI下是无法正确获取frame的尺寸的，从而无法正确显示。我对于UIkit所知甚少，只能做了最简单的修改，勉强让其可以在SwiftUI下完成所需要的功能。</p><p>修改后的版本可在<a href="https://github.com/fatbobman/MarkdownView" target="_blank" rel="noopener">这里下载</a></p><p>另外，我在UIViewRepresentable包装中增加了一些简单的修改，使其可以方便的将md中的图片，替换成Bundle中的本地图片。</p><p>调用代码 <a href="https://github.com/fatbobman/ShareCode/blob/main/MarkDownView.swift" target="_blank" rel="noopener">下载</a></p><h2 id="excelexport"><a href="https://github.com/avielg/ExcelExport/blob/master/Sources/ExcelExport/ExcelExport.swift" target="_blank" rel="noopener">ExcelExport</a></h2><blockquote><p>生成XSL文件的Swift代码。</p></blockquote><p>这段代码有一段时间了，不过去年又做了更新，不过我感觉更新后的版本还不如之前的。但它的新版本不支持Date的字段导出，老版本导出的Date字段格式在Excel中也有问题。我合并了两个版本，并且让其在命名上对SwiftUI更加友好。</p><p>修改后的代码 <a href="https://github.com/fatbobman/ShareCode/blob/main/ExcelExport" target="_blank" rel="noopener">下载</a></p><p>必须对日期做如下处理，日期字段才能被Excel顺利识别</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="type">DateInRegion</span>(memo.viewModel.date).toFormat(<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="keyword">let</span> time = <span class="type">DateInRegion</span>(memo.viewModel.date).toFormat(<span class="string">"HH:mm:ss.FFF"</span>)</span><br><span class="line"><span class="keyword">let</span> dateCell = <span class="type">ExcelCell</span>(date + <span class="string">"T"</span> + time,type: .dateTime)</span><br></pre></td></tr></table></figure><p>上述的库都被使用在 <a href="https://apps.apple.com/app/id1534513553" target="_blank" rel="noopener">健康笔记2.0</a> 中。如想查看更多的演示，可以移步</p><p><a href="https://zhuanlan.zhihu.com/p/268680841" target="_blank" rel="noopener">健康笔记2.0 使用SwiftUI2.0开发的iOS app</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;swiftuix&quot;&gt;&lt;a href=&quot;https://github.com/SwiftUIX/SwiftUIX&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SwiftUIX&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;SwiftUIX试图
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="Swift" scheme="http://www.fatbobman.com/tags/Swift/"/>
    
      <category term="健康笔记" scheme="http://www.fatbobman.com/tags/%E5%81%A5%E5%BA%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>健康笔记2.0开发随笔(六)</title>
    <link href="http://www.fatbobman.com/article/healthNote2-6/"/>
    <id>http://www.fatbobman.com/article/healthNote2-6/</id>
    <published>2020-10-26T03:16:20.000Z</published>
    <updated>2020-10-26T03:16:56.659Z</updated>
    
    <content type="html"><![CDATA[<p>收尾工作往往是最枯燥的。</p><p>最近这10几天，主要的工作都是查找bug，改进性能，反复测试数据的稳定性，以及更加枯燥的文档准备工作。</p><p>向app store提交反倒异常顺利，中间只出现了一次反复。苹果要我确认是否会滥用用户的数据，在明确回复不会之后就通过了。想想去年底健康笔记1.0的上线反复折腾了我10多天。</p><p>XCode 12中的StoreKit对于调试应用内的购买实在是太方便了，在开发的最后阶段，我将app分成了基础版和专业版。基础版其实已经能应对生活中绝大多数的需求了。通过StoreKit的模拟环境，我的应用内购买没有使用任何沙盒测试便一次性的开发调试成功，并且上线后也运行正常。极大的提高了效率！</p><p>在本次历时近两个月的开发过程中，基本上没走太多弯路。真正让我消耗精力的反倒是和iOS 14以及SwiftUI 2.0中的Bug斗智斗勇。很多奇怪的问题，在对自己代码反复的检查之后才能基本确认是系统的原因，然后还需要设法用最少的代码重现问题得以最终确认。从WWDC20过后，目前已经给苹果提交了10几条的Feedback。其中超过半数在不断的版本升级后得到了修复。</p><p>下面是我在这次的开发中使用的第三方库，我最近会对这些库进行详细的介绍：</p><ul><li>SwiftUIX</li><li>Charts</li><li>Introspect</li><li>ZIPFoundation</li><li>SwiftUIOverlayContainer</li><li>SwiftDate</li><li>MarkdownView</li></ul><p>iPad的适配工作量也比想象中的大。尽管SwiftUI己经提供了极大的方便，但如果想更好的利用iPad的特性的话，还是有不少工作需要完成的。</p><p>本地化也是这次开发的一个目标，难度不太大，但工作量不小。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;收尾工作往往是最枯燥的。&lt;/p&gt;
&lt;p&gt;最近这10几天，主要的工作都是查找bug，改进性能，反复测试数据的稳定性，以及更加枯燥的文档准备工作。&lt;/p&gt;
&lt;p&gt;向app store提交反倒异常顺利，中间只出现了一次反复。苹果要我确认是否会滥用用户的数据，在明确回复不会之后就通
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="健康笔记" scheme="http://www.fatbobman.com/tags/%E5%81%A5%E5%BA%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>健康笔记2.0 来了!</title>
    <link href="http://www.fatbobman.com/article/healthnote2-release/"/>
    <id>http://www.fatbobman.com/article/healthnote2-release/</id>
    <published>2020-10-26T02:36:13.000Z</published>
    <updated>2020-10-26T02:45:04.879Z</updated>
    
    <content type="html"><![CDATA[<p><img src="demo.jpg" alt="pic"></p><p>经过了大半年的积累和准备,持续了2个月的开发,健康笔记2.0在昨天上线了.</p><p>本次开发,我重写了健康笔记的全部代码,最后的结果个人还是比较满意的.</p><p>苹果在2020年无论从iOS,Swift,SwiftUI还是Xcode几个方面改进还是显著的,对我的帮助很大.</p><p>无论从功能、性能、UI表现上,2.0版都比1.0版有了较大提高.</p><p>在这里可以下载</p><p><a href="https://apps.apple.com/app/id1534513553" target="_blank" rel="noopener"><img src="http://www.fatbobman.com/healthnotes/index/appStoreIcon.svg" alt="icon"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;demo.jpg&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;p&gt;经过了大半年的积累和准备,持续了2个月的开发,健康笔记2.0在昨天上线了.&lt;/p&gt;
&lt;p&gt;本次开发,我重写了健康笔记的全部代码,最后的结果个人还是比较满意的.&lt;/p&gt;
&lt;p&gt;苹果在2020年无论从i
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="健康笔记" scheme="http://www.fatbobman.com/tags/%E5%81%A5%E5%BA%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>健康笔记开发随笔（五）</title>
    <link href="http://www.fatbobman.com/article/healthNote-5/"/>
    <id>http://www.fatbobman.com/article/healthNote-5/</id>
    <published>2020-10-07T07:57:51.000Z</published>
    <updated>2020-10-07T22:56:18.147Z</updated>
    
    <content type="html"><![CDATA[<p>一晃国庆中秋长假即将结束，距离上次的随笔也有了一段时间。在最近的日子里，我一方面继续着开发的进程，同时还要付出相当的精力同iOS14中的各种Bug和异常斗智斗勇。</p><p>本篇随笔主要记录了这段时间碰到的一些问题，以及聊聊iOS14、Xcode12以及SwiftUI2.0的一些优缺点。想到哪、写到哪，可能逻辑会比较混乱。</p><h2 id="bug实在多">Bug实在多</h2><p>2020年苹果想在软件架构层面做出非常多的重要改变。big sur要支持arm，SwiftUI要真正做到一套代码顺利的多平台运行，iOS14也作出了在近几年肉眼可见的最大变化。不过可能是目标太多、太大，而时间又紧，至少到现在为止，bug层出不穷，改不胜改。尤其是随着版本的升级，竟然出现了不少前面完全不曾出现的bug，实在是令人心烦。</p><p>比如在iOS14.2beta2中，sheet的Delegate无法响应，而在之前的所有版本都没有问题。在iOS14.2beta2中，View的刷新时机有和之前有了细微的变化，在一些及特殊的情况下会出现刷新不同步。总之类似的错误一直在增加。</p><p>对于@FetchRequest中的数据进行修改，View不会自动更新，尽管14.2对于List做了修复，但在其他情况下，还是需要人为干预。</p><p>@FetechRequest的数据进行增减时，有时会有动画，有时没有动画。同样的代码，在不同的地方，有时会有动画，有时没有动画，而这些都是在SwiftUI1.0版本都不曾出现的问题。</p><p>在mac下通过catalyst运行app时，总是会出现假死情况（系统cup占用为0，就是app没有响应）。</p><p>Xcode12各种现实异常，这两天出现了一个异常奇怪的现象，当我编辑xcdatamodeld文件时，屏幕上出现了一篇白色区域遮盖了数据编辑区，我只能盲操作。而编辑其他任何文件都没有这种情况。</p><p>Xcode12的代码补全远不如Xcode11，总是补全后需要删除大量无用的补全信息。</p><p>fileImporter竟然不能通过手势取消，如果使用手势，会反复弹出sheet，除非你点击右上角的cancel。</p><p>Menu（SwiftUI新增的控件） 在被键盘遮挡后会出现异常，所以我目前只能把Menu放置在屏幕的上方</p><p>ContextMenu点选后总要闪烁一下，让人很不舒服。</p><p>在SwiftUI2中，对于键盘的自动避让本来是一个相当不错的设计，但总会导致大量的布局受键盘浮动的影响，反倒需要做更多的工作来避免这种情况，结果是好的想法但实现起来适得其反。</p><p>Xcode12的Debug区域会丢失，可以通过快捷键重新唤出。而且莫名其妙的总是默认不显示右侧的Debug Output窗口。</p><p>上面所说的都是最近让我特别心烦的一些bug，其他的实在是太多，就不一一例举了。</p><p>bug过多的结果就是导致我需要花费大量的时间来了判断是我自己的实现错误还是由于系统的bug导致的。如果确定是bug，还需要写不少的feedback给苹果，希望它能尽快修复。对于时间的浪费是十分巨大的。</p><p>为了判断是什么原因导致的，我目前在mac上安装了 两个版本的big sur(最新版、次新版)，三个版本的Xcode(11.7,12.01,12.2beta2),两个运行不同版本的iphone(14.2beta2,14.01),两个模拟器（14.2，14.01）。总之有够花费精力的。</p><p>不过这也是在一个尚未完全成熟的架构下，在一个巨大变化的时间点进行开发所要付出的必要代价。</p><h2 id="不小的进步">不小的进步</h2><p>上面进行了不少的吐槽，下面我们来说说苹果在今年给我们带来的进步和改善。</p><p><strong>Xcode12</strong></p><p>preview已经很成熟了，已经很少会出现崩溃或无法预览的情况。</p><p>在project嵌入playground非常方便，尤其是打开Build Active Scheme之后，可以在playground中直接使用第三方库。对于开发中进行试验测试提供了巨大的便利。</p><p>StoreKit的模拟环境非常有用，极大的提高了开发应用内付费的效率。可以在不提交app并建立资费的情况下便完成和调试所有和收费相关代码。不过我目前发现restore好像没有回馈，不知道是我的使用方法不对还是就是没有提供。</p><p>全屏开发模式支持直接在一次放置模拟器，提高了屏幕使用率，而且有助于注意力的提升。</p><p>SwiftUI liftcycle让跨平台开发更加便利。</p><p><strong>SwiftUI</strong></p><p>onChange是我对于今年SwiftUI改动最满意的地方。在onChange中的代码运行时机和View的update一直，基本可以保证正确的响应时机。</p><p>新的DatePicker在iOS上节省了显示的空间，让form更紧凑。不过选择后出现的闪烁还表示有进一步优化的空间</p><p>众多的新控件。进过我在本次开发中并没有使用太多的新控件，不过更多的选择还是有利于开发者的。</p><p>我目前最多使用的新控件有： toolbar menu lazyStack lazyGrid</p><p>在DSL中支持更复杂的逻辑判断。由于目前支持了if let,switch可以在DSL中用更少的代码实现更清晰的逻辑处理。</p><p>对于复杂的DSL的编译能力也有了提高</p><p><strong>Big Sur</strong></p><p>随着测试版本的不断提高，catalyst对于SwiftUI的支持越来越好。在最初的版本中，基本还是利用appkit的控件来代替uikit的控件，在目前的beta9下，显示效果已经和ipad上相差无几。只是用SwiftUI + catalyst来开发mac app已经越来越有可能。</p><h2 id="测试征集">测试征集</h2><p>健康笔记2.0目前已经到了收尾阶段，除了图表部分之外，大多数的功能都已完成。我正在申请test flight的beta测试。如果你有兴趣进行测试，请将你的邮箱发送给我(<a href="mailto:healthnotes_app@icloud.com" target="_blank" rel="noopener">healthnotes_app@icloud.com</a>)。</p><p>点击直接链接可以直接进行testFlight 加入 <a href="https://testflight.apple.com/join/EL1I7Y1A" target="_blank" rel="noopener">Beta 版“Health Notes 2.0”</a></p><p>如果你是健康笔记1.0的用户,可以首先将1.0版升级到最新的1.6,使用使用备份全部笔记,然后在2.0中导入备份后的笔记.</p><p>健康笔记2.0需要运行在iOS14以上的设备。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一晃国庆中秋长假即将结束，距离上次的随笔也有了一段时间。在最近的日子里，我一方面继续着开发的进程，同时还要付出相当的精力同iOS14中的各种Bug和异常斗智斗勇。&lt;/p&gt;
&lt;p&gt;本篇随笔主要记录了这段时间碰到的一些问题，以及聊聊iOS14、Xcode12以及SwiftUI2
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="健康笔记" scheme="http://www.fatbobman.com/tags/%E5%81%A5%E5%BA%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>健康笔记开发随笔（四）</title>
    <link href="http://www.fatbobman.com/article/helthNotes2-4/"/>
    <id>http://www.fatbobman.com/article/helthNotes2-4/</id>
    <published>2020-09-17T11:37:58.000Z</published>
    <updated>2020-09-17T11:11:19.921Z</updated>
    
    <content type="html"><![CDATA[<p>经过2周的治疗,我父亲终于脱离的生命危险。疫情的原因，医院只允许一个护工在身边照顾，病人长时间无法见到家属而导致了较严重的心理问题。综合考虑，周末已接回家。回家2天后，整个状况有了非常好的转变。在这次的治疗中，我提供给医院的我父亲这几年来的各方面身体指标数据起到了很重要的作用。</p><p>本周没有太多的精力和情绪用来写代码。这两天在原来统一sheet管理和实时Form的基础上，完成了可以控制取消手势的Sheet。这个是SwiftUI中一直以来的一个重要的缺失功能。<br><a href="http://www.fatbobman.com/article/dismissControlSheet/">在SwiftUI中制作可以控制取消手势的Sheet</a></p><p>Xcode 12 beta6 的bug还是不少，这两天我竟然见到了3次四国画面。<br>SwiftUI 2.0的List问题也很多，甚至感觉比1.0更不稳定，而且效率有明显的问题。目前已将所有使用List的地方都暂时替换成了LazyVStack。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过2周的治疗,我父亲终于脱离的生命危险。疫情的原因，医院只允许一个护工在身边照顾，病人长时间无法见到家属而导致了较严重的心理问题。综合考虑，周末已接回家。回家2天后，整个状况有了非常好的转变。在这次的治疗中，我提供给医院的我父亲这几年来的各方面身体指标数据起到了很重要的作
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="健康笔记" scheme="http://www.fatbobman.com/tags/%E5%81%A5%E5%BA%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在SwiftUI中制作可以控制取消手势的Sheet</title>
    <link href="http://www.fatbobman.com/article/dismissControlSheet/"/>
    <id>http://www.fatbobman.com/article/dismissControlSheet/</id>
    <published>2020-09-17T10:38:11.000Z</published>
    <updated>2020-09-17T11:03:59.246Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在前面的两篇文章中，我们探讨了如何制作一个可以判断是否进行了修改的表单，以及如何统一管理app各个层级View的弹出Sheet。今天我们将他们合并在一起，完成整个项目的最终目的——在Sheet中制作一个可以实时响应的表单，并且sheet会感觉表单的情况响应取消手势。</p></blockquote><p><img src="dissmissConfirmSheetPic.gif" alt="Demo"></p><p><a href="http://www.fatbobman.com/article/AllInOneSheet/">在SwiftUI中,根据需求弹出不同的Sheet</a></p><p><a href="http://www.fatbobman.com/article/DynamicForm/">如何在SwiftUI中创建一个实时响应的Form</a></p><h2 id="由来">由来</h2><p>在之前Form的例子中，虽然我们可以根据表单是否进行了修改来对cancel、edit等做出不同的响应，但是我们并没有办法控制用户直接使用手势来取消sheet，为了不让用户绕过程序的判断检查，不得已使用了fullScreenCover来规避手势取消。不过在实际使用中，尽管全屏sheet提供了更多的屏幕可用空间，但还是会给使用者带来了操作逻辑不统一的体验。</p><p>在去年，我使用的解决方案是，屏蔽sheet的拖动手势。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.highPriorityGesture(<span class="type">DragGesture</span>())</span><br></pre></td></tr></table></figure><p>这也是没有办法的办法。</p><p>后来，SwiftUI-lab中，Javier提出了他的解决方案Dismiss Gesture for SwiftUI Modals](<a href="https://swiftui-lab.com/modal-dismiss-gesture/" target="_blank" rel="noopener">https://swiftui-lab.com/modal-dismiss-gesture/</a>)。这个方案基本上实现了我想要的全部功能。不过这个方案看起来有些怪异。</p><ol><li>数据和sheet控制混合在一起</li><li>对于sheet的控制过于繁琐，而且不直观</li></ol><p>前段时间<a href="https://gist.github.com/mobilinked/9b6086b3760bcf1e5432932dad0813c0" target="_blank" rel="noopener">mobilinked</a>编写了一段用于控制sheet的代码，结构精巧，使用简单。</p><p>本文对于sheet的控制采用了mobilinked的基础代码，并针对Form的响应做出了对应的修改。</p><p>在进行下面的代码说明前，如果你还没有阅读前两篇文章的话，请阅读后再继续。</p><p><a href="http://www.fatbobman.com/article/AllInOneSheet/">在SwiftUI中,根据需求弹出不同的Sheet</a></p><p><a href="http://www.fatbobman.com/article/DynamicForm/">如何在SwiftUI中创建一个实时响应的Form</a></p><h2 id="目标">目标</h2><ol><li>表单对输入的内容进行实时检查（是否有错误，是否有空白项）</li><li>表单将根据当前的状态决定是否允许sheet进行手势取消</li><li>当用户进行手势取消时，如果表单已经进行了修改，需要用户二次确认是否取消</li></ol><h2 id="代码简介">代码简介</h2><p>由于本文代码中多数部分同Form示例代码类似，所以仅简述一下新增及修改的部分。</p><p><strong>SheetManager</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AIOSheetManager</span>:<span class="title">ObservableObject</span></span>&#123;</span><br><span class="line">    @<span class="type">Published</span>  <span class="keyword">var</span> action:<span class="type">AllInOneSheetAction</span>?</span><br><span class="line">    <span class="keyword">var</span> unlock:<span class="type">Bool</span> = <span class="literal">false</span> <span class="comment">//false时无法下滑dismiss,由form程序维护</span></span><br><span class="line">    <span class="keyword">var</span> type:<span class="type">AllInOneSheetType</span> = .sheet <span class="comment">//sheet or fullScreenCover</span></span><br><span class="line">    <span class="keyword">var</span> dismissControl:<span class="type">Bool</span> = <span class="literal">true</span> <span class="comment">//是否启动dismiss阻止开关,true启动阻止</span></span><br><span class="line">    </span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> showSheet = <span class="literal">false</span></span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> showFullCoverScreen = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dismissed = <span class="type">PassthroughSubject</span>&lt;<span class="type">Bool</span>,<span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">var</span> dismissAction:(() -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">AllInOneSheetType</span></span>&#123;</span><br><span class="line">        <span class="keyword">case</span> fullScreenCover</span><br><span class="line">        <span class="keyword">case</span> sheet</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sheet控制代码</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MbModalHackView</span>: <span class="title">UIViewControllerRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> manager:<span class="type">AIOSheetManager</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIViewController</span><span class="params">(context: UIViewControllerRepresentableContext&lt;MbModalHackView&gt;)</span></span> -&gt; <span class="type">UIViewController</span> &#123;</span><br><span class="line">        <span class="type">UIViewController</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIViewController</span><span class="params">(<span class="number">_</span> uiViewController: UIViewController, context: UIViewControllerRepresentableContext&lt;MbModalHackView&gt;)</span></span> &#123;</span><br><span class="line">        rootViewController(of: uiViewController).presentationController?.delegate = context.coordinator</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">rootViewController</span><span class="params">(of uiViewController: UIViewController)</span></span> -&gt; <span class="type">UIViewController</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> parent = uiViewController.parent &#123;</span><br><span class="line">            <span class="keyword">return</span> rootViewController(of: parent)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> uiViewController</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCoordinator</span><span class="params">()</span></span> -&gt; <span class="type">Coordinator</span> &#123;</span><br><span class="line">        <span class="type">Coordinator</span>(manager: manager)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span>: <span class="title">NSObject</span>, <span class="title">UIAdaptivePresentationControllerDelegate</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> manager:<span class="type">AIOSheetManager</span></span><br><span class="line">        <span class="keyword">init</span>(manager:<span class="type">AIOSheetManager</span>)&#123;</span><br><span class="line">            <span class="keyword">self</span>.manager = manager</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">presentationControllerShouldDismiss</span><span class="params">(<span class="number">_</span> presentationController: UIPresentationController)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> manager.dismissControl <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br><span class="line">            <span class="keyword">return</span> manager.unlock</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当阻止取消时,发送用户要求取消sheet命令</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">presentationControllerDidAttemptToDismiss</span><span class="params">(<span class="number">_</span> presentationController: UIPresentationController)</span></span>&#123;</span><br><span class="line">            manager.dismissed.send(<span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">allowAutoDismiss</span><span class="params">(<span class="number">_</span> manager:AIOSheetManager)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">            .background(<span class="type">MbModalHackView</span>(manager: manager))</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>包装</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">XSheet</span>:<span class="title">ViewModifier</span></span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> manager:<span class="type">AIOSheetManager</span></span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> store:<span class="type">Store</span></span><br><span class="line">    @<span class="type">Environment</span>(\.managedObjectContext) <span class="keyword">var</span> context</span><br><span class="line">    <span class="keyword">var</span> onDismiss:()-&gt;<span class="type">Void</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            (manager.dismissAction ?? &#123;&#125;)()</span><br><span class="line">            manager.dismissAction = <span class="literal">nil</span></span><br><span class="line">            manager.action = <span class="literal">nil</span></span><br><span class="line">            manager.showSheet = <span class="literal">false</span></span><br><span class="line">            manager.showFullCoverScreen = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">body</span><span class="params">(content: Content)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span>&#123;</span><br><span class="line">            content</span><br><span class="line">            </span><br><span class="line">            <span class="type">Color</span>.clear</span><br><span class="line">                .sheet(isPresented: $manager.showSheet,onDismiss: onDismiss)&#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> action = manager.action</span><br><span class="line">                        &#123;</span><br><span class="line">                            reducer(action)</span><br><span class="line">                            .allowAutoDismiss(manager)</span><br><span class="line">                            .environmentObject(manager)</span><br><span class="line">                        &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Color</span>.clear</span><br><span class="line">                .fullScreenCover(isPresented: $manager.showFullCoverScreen,onDismiss: onDismiss)&#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> action = manager.action</span><br><span class="line">                        &#123;</span><br><span class="line">                            reducer(action)</span><br><span class="line">                                .allowAutoDismiss(manager)</span><br><span class="line">                                .environmentObject(manager)</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .onChange(of: manager.action)&#123; action <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> action != <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                manager.showSheet = <span class="literal">false</span></span><br><span class="line">                manager.showFullCoverScreen = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> manager.type == .sheet &#123;</span><br><span class="line">                manager.showSheet = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> manager.type == .fullScreenCover&#123;</span><br><span class="line">                manager.showFullCoverScreen = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AllInOneSheetAction</span>:<span class="title">Identifiable</span>,<span class="title">Equatable</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> show(student:<span class="type">Student</span>)</span><br><span class="line">    <span class="keyword">case</span> edit(student:<span class="type">Student</span>)</span><br><span class="line">    <span class="keyword">case</span> new</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> id:<span class="type">UUID</span>&#123;<span class="type">UUID</span>()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XSheet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reducer</span><span class="params">(<span class="number">_</span> action:AllInOneSheetAction)</span></span> -&gt; some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> action&#123;</span><br><span class="line">        <span class="keyword">case</span> .show(<span class="keyword">let</span> student):</span><br><span class="line">            <span class="keyword">return</span> <span class="type">StudentManager</span>(action:.show, student:student)</span><br><span class="line">        <span class="keyword">case</span> .new:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">StudentManager</span>(action: .new, student: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">case</span> .edit(<span class="keyword">let</span> student):</span><br><span class="line">            <span class="keyword">return</span> <span class="type">StudentManager</span>(action:.edit,student: student)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">xsheet</span><span class="params">()</span></span> -&gt; some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">            .modifier(<span class="type">XSheet</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用方式</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">.xsheet()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Button</span>(<span class="string">"New"</span>)&#123;</span><br><span class="line">         sheetManager.type = .sheet  <span class="comment">//当前支持两种方式 sheet fullScreenCover</span></span><br><span class="line">         sheetManager.dismissControl = <span class="literal">true</span> <span class="comment">//打开控制</span></span><br><span class="line">         sheetManager.action = .new   <span class="comment">//设置统一sheet的action</span></span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><p><strong>Form代码的修改</strong></p><p>为了让我们的表单代码能够管理sheet，并且可以响应用户的取消手势，对Form代码做了如下的修改：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> changed = <span class="literal">false</span>&#123;</span><br><span class="line">    <span class="keyword">didSet</span>&#123;</span><br><span class="line">        <span class="comment">//控制sheet是否允许dismiss</span></span><br><span class="line">        <span class="keyword">if</span> action == .show &#123;</span><br><span class="line">            sheetManager.unlock = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sheetManager.unlock = !changed</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新增</span><br><span class="line"> .onReceive(sheetManager.dismissed)&#123; value <span class="keyword">in</span></span><br><span class="line">                delConfirm.toggle()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>详细代码请访问我的<a href="https://github.com/fatbobman/DismissConfirmSheet" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在前面的两篇文章中，我们探讨了如何制作一个可以判断是否进行了修改的表单，以及如何统一管理app各个层级View的弹出Sheet。今天我们将他们合并在一起，完成整个项目的最终目的——在Sheet中制作一个可以实时响应的表单，并且sheet会感觉表单的
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>健康笔记2.0开发随笔（三）</title>
    <link href="http://www.fatbobman.com/article/healthNotes2-3/"/>
    <id>http://www.fatbobman.com/article/healthNotes2-3/</id>
    <published>2020-09-05T10:37:51.000Z</published>
    <updated>2020-09-17T11:14:58.232Z</updated>
    
    <content type="html"><![CDATA[<p>由于家属突发疾病，最近每天都要出入医院，因此最近用于开发的时间很有限。</p><p>目前app已经完成了笔记、条目、数据的创建、编辑、显示、删除全部逻辑。如果不考虑图表、数据导入导出、交叉比对等功能，app的基本功能已经完成了。</p><p>在本次开发中，我着重调整了表单的开发方式，目前表单无论从响应，判断等方便都比上一版有了很大的提高。</p><p>本次我将以前分散的输入源（source of truth）统一到了一起，不仅更便于代码管理，同时也方便实现了很多以前无法或实现起来非常困难的功能。</p><p>关于表单的处理，可以参看我的文章</p><p><a href="http://www.fatbobman.com/article/DynamicForm/">如何在SwiftUI中创建一个实时响应的Form</a></p><p>另外，由于我的app对于sheet的使用量也很多，所以也对sheet的响应做出了统一的管理，这方面我记录在另一篇文章中</p><p><a href="http://www.fatbobman.com/article/AllInOneSheet/">在SwiftUI中,根据需求弹出不同的Sheet</a></p><p>时间有限，随便记录一点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于家属突发疾病，最近每天都要出入医院，因此最近用于开发的时间很有限。&lt;/p&gt;
&lt;p&gt;目前app已经完成了笔记、条目、数据的创建、编辑、显示、删除全部逻辑。如果不考虑图表、数据导入导出、交叉比对等功能，app的基本功能已经完成了。&lt;/p&gt;
&lt;p&gt;在本次开发中，我着重调整了表
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="健康笔记" scheme="http://www.fatbobman.com/tags/%E5%81%A5%E5%BA%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>如何在SwiftUI中创建一个实时响应的Form</title>
    <link href="http://www.fatbobman.com/article/DynamicForm/"/>
    <id>http://www.fatbobman.com/article/DynamicForm/</id>
    <published>2020-09-04T10:40:31.000Z</published>
    <updated>2020-09-17T11:09:24.985Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我的app健康笔记主要是对数据的收集、管理，所以对于表单的实时检查、响应的要求比较高。</p></blockquote><h2 id="健康笔记10的时候">健康笔记1.0的时候</h2><p>在开发健康笔记1.0的使用，当时由于iOS13尚不支持onChange，当时主要使用类似的检查方式：</p><p><strong>对于简单情况</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="type">TextField</span>(<span class="string">"name"</span>,text:$name)</span><br><span class="line">     .foregroundColor(name.<span class="built_in">count</span>.isEmpty ? .red : .black)</span><br></pre></td></tr></table></figure><p><strong>稍复杂的情况</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line">@<span class="type">State</span> <span class="keyword">var</span> age = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="type">TextField</span>(<span class="string">"name"</span>,text:$name)</span><br><span class="line">    .foregroundColor(!checkName() ? .red : .black)</span><br><span class="line"><span class="type">TextField</span>(<span class="string">"age"</span>,text:$name)</span><br><span class="line">     .keyboardType(.decimalPad)</span><br><span class="line"> .foregroundColor(!checkAge() ? .red : .black)</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span>(<span class="string">"Save"</span>)&#123;</span><br><span class="line">   <span class="comment">//保存</span></span><br><span class="line">&#125;</span><br><span class="line">.disable(!(checkName()&amp;&amp;checkeAge))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chekcName</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> name.<span class="built_in">count</span> &gt; <span class="number">0</span> &amp;&amp; name.<span class="built_in">count</span> &lt;= <span class="number">10</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkAge</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">   <span class="keyword">guard</span> <span class="keyword">let</span> age = <span class="type">Double</span>(age) <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;</span><br><span class="line">   <span class="keyword">return</span> age &gt; <span class="number">10</span> &amp;&amp; age &lt; <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实之前对于很复杂的表单，我也是采用了Combine的方式来做验证的。</p><p>不过Publisher的和View的刷新周期之间有一个响应的差距，也就是说，第一个输入的判断需要到第二个输入时才会返回结果。如此一来，只能将判断逻辑都写在View中。不过如果需要利用网络验证的部分，仍然是使用Publisher来处理的。它的响应由于使用OnReceive所以不会出现上面的判断时间差。</p><h2 id="健康笔记20的处理方式">健康笔记2.0的处理方式</h2><p>在我目前开发的健康笔记2.0中，由于iOS 14支持了onChange,让开发者在View有了非常方便的处理逻辑判断的时机。</p><p>以下是目前开发中的画面：</p><p><img src="formDemo.gif" alt="Demo"></p><h2 id="用mvvm的方式来编写form">用MVVM的方式来编写Form</h2><p>在使用SwiftUI进行开发中，我们不仅需要使用MVVM的思想来考虑app的架构，对于每一个View都可以把它当做一个mini的app来对待。</p><p>在下面的例子中，我们需要完成如下的功能：</p><ol><li>显示档案、编辑档案、新建档案都使用同一个代码</li><li>对于用户的每一次输入都给出及时和准确的反馈</li><li>只有用户的数据完全满足需求时（各个输入项都满足检查条件同时在编辑状态下，当前修改数据要与原始数据不同），才允许用户保存。</li><li>如果用户已经修改或创建了数据，用户取消时需要二次确认</li><li>在用户显示档案时，可以一键切换到编辑模式</li></ol><p><em>如果你所需要创建的FormView功能简单，请千万不要使用下列的方法。下列代码仅在创建较复杂的表单时才会发挥优势。</em></p><p>完成后的视频如下：</p><p><img src="studentDemo.gif" alt="Demo"></p><p>下载 (当前代码已和 <a href="http://www.fatbobman.com/article/dismissControlSheet/">在SwiftUI中制作可以控制取消手势的Sheet</a> 合并)</p><p><a href="https://github.com/fatbobman/DismissConfirmSheet" target="_blank" rel="noopener">源代码</a></p><p><strong>为输入准备数据源</strong></p><p>不同于创建多个@State数据源来处理数据，我现在将所有需要录入的数据统一放到了一个数据源中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyState</span>:<span class="title">Equatable</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> sex:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> birthday:<span class="type">Date</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>让View响应不同的动作</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">StudentAction</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> show,edit,new</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有了上述的准备，我们便可以创建表单的构造方法了：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StudentManager</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> store:<span class="type">Store</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> action:<span class="type">StudentAction</span></span><br><span class="line">    <span class="keyword">let</span> student:<span class="type">Student</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> defaultState:<span class="type">MyState</span>  <span class="comment">//用于保存初始数据，可以用来比较，或者在我的app中，可以恢复用户之前的值</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> myState:<span class="type">MyState</span> <span class="comment">//数据源</span></span><br><span class="line">    </span><br><span class="line">    @<span class="type">Environment</span>(\.presentationMode) <span class="keyword">var</span> presentationMode</span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span>(action:<span class="type">StudentAction</span>,student:<span class="type">Student</span>?)&#123;</span><br><span class="line">        _action = <span class="type">State</span>(wrappedValue: action)</span><br><span class="line">        <span class="keyword">self</span>.student = student</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> action&#123;</span><br><span class="line">        <span class="keyword">case</span> .new:</span><br><span class="line">            <span class="keyword">self</span>.defaultState = <span class="type">MyState</span>(name: <span class="string">""</span>,sex:<span class="number">0</span>, birthday: <span class="type">Date</span>())</span><br><span class="line">            _myState = <span class="type">State</span>(wrappedValue: <span class="type">MyState</span>(name: <span class="string">""</span>, sex:<span class="number">0</span>, birthday: <span class="type">Date</span>()))</span><br><span class="line">        <span class="keyword">case</span> .edit,.show:</span><br><span class="line">            <span class="keyword">self</span>.defaultState = <span class="type">MyState</span>(name: student?.name ?? <span class="string">""</span>, sex:<span class="type">Int</span>(student?.sex ?? <span class="number">0</span>) , birthday: student?.birthday ?? <span class="type">Date</span>())</span><br><span class="line">            _myState = <span class="type">State</span>(wrappedValue: <span class="type">MyState</span>(name: student?.name ?? <span class="string">""</span>, sex:<span class="type">Int</span>(student?.sex ?? <span class="number">0</span>), birthday: student?.birthday ?? <span class="type">Date</span>()))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>准备表单显示内容</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nameView</span><span class="params">()</span></span> -&gt; some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="type">HStack</span>&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"姓名:"</span>)</span><br><span class="line">            <span class="keyword">if</span> action == .show &#123;</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                <span class="type">Text</span>(defaultState.name)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">"学生姓名"</span>,text:$myState.name)</span><br><span class="line">                    .multilineTextAlignment(.trailing)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>合成显示内容</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Form</span>&#123;</span><br><span class="line">             nameView()</span><br><span class="line">             sexView()</span><br><span class="line">             birthdayView()</span><br><span class="line">             errorView()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><strong>对每个输入项目进行验证</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkName</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> myState.name.isEmpty &#123;</span><br><span class="line">            errors.append(<span class="string">"必须填写姓名"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>处理所有的验证信息</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkAll</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> action == .show &#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br><span class="line">        errors.removeAll()</span><br><span class="line">        <span class="keyword">let</span> r1 = checkName()</span><br><span class="line">        <span class="keyword">let</span> r2 = checkSex()</span><br><span class="line">        <span class="keyword">let</span> r3 = checkBirthday()</span><br><span class="line">        <span class="keyword">let</span> r4 = checkChange()</span><br><span class="line">        <span class="keyword">return</span> r1&amp;&amp;r2&amp;&amp;r3&amp;&amp;r4</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>通过onChange来进行校验</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.onChange(of: myState)&#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">         confirm =  checkAll()</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//由于onChange必须在数据源发生变化时才会激发，所以在View最初显示时便进行一次验证</span></span><br><span class="line">.onAppear&#123;</span><br><span class="line">     confirm =  checkAll()</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>对toolbar的内容进行处理</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ToolbarItem</span>(placement: <span class="type">ToolbarItemPlacement</span>.navigationBarTrailing)&#123;</span><br><span class="line">                    <span class="keyword">if</span> action == .show &#123;</span><br><span class="line">                        <span class="type">Button</span>(<span class="string">"编辑"</span>)&#123;</span><br><span class="line">                            action = .edit</span><br><span class="line">                            confirm = <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">Button</span>(<span class="string">"确定"</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> action == .new &#123;</span><br><span class="line">                        presentationMode.wrappedValue.dismiss()</span><br><span class="line">                        store.newStudent(viewModel: myState)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> action == .edit&#123;</span><br><span class="line">                            presentationMode.wrappedValue.dismiss()</span><br><span class="line">                            store.editStudent(viewModel: myState, student: student!)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .disabled(!confirm)</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>更详尽的内容可以参看<a href="https://github.com/fatbobman/DismissConfirmSheet" target="_blank" rel="noopener">源代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我的app健康笔记主要是对数据的收集、管理，所以对于表单的实时检查、响应的要求比较高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;健康笔记10的时候&quot;&gt;健康笔记1.0的时候&lt;/h2&gt;
&lt;p&gt;在开发健康笔记1.0的使用，当时由于iOS13尚
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>在SwiftUI中,根据需求弹出不同的Sheet</title>
    <link href="http://www.fatbobman.com/article/AllInOneSheet/"/>
    <id>http://www.fatbobman.com/article/AllInOneSheet/</id>
    <published>2020-09-04T10:37:22.000Z</published>
    <updated>2020-09-17T11:09:17.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Sheet是一个我比较喜欢的交互形式，它可以很好的控制用户的操作行为，让用户的交互逻辑单线条化。在iOS14上，SwiftUI增加了fullCover，支持了全屏的Sheet方式，让开发者又了更多的选择。</p></blockquote><h2 id="基本用法">基本用法</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> showView1 = <span class="literal">false</span></span><br><span class="line">@<span class="type">State</span> <span class="keyword">var</span> showView2 = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="type">List</span>&#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">"View1"</span>)&#123;</span><br><span class="line">      showView1.toggle()</span><br><span class="line">    &#125;</span><br><span class="line">  .sheet(isPresented:$showView1)&#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"View1"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="type">Button</span>(<span class="string">"View2"</span>)&#123;</span><br><span class="line">    showView2.toggle()</span><br><span class="line">  &#125;</span><br><span class="line">  .sheet(isPresented:$showView2)&#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"View2"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，我们可以通过点击不同的按钮而弹出相对应的View。</p><p>不过它有两个缺点：</p><ol><li>如果你的代码有多处需要使用不同view作为sheet的情况，你需要声明多个对应的开关值</li><li>如果你的View结构比较复杂，在比较内部的地方，上述代码很可能无法激发sheet的显示（这个问题在ios13上就存在，在ios14上仍有这样的情况。我至今也没有完全总结出规律）</li></ol><h2 id="使用item来对应不同的view">使用Item来对应不同的View</h2><p>好在sheet提供了另外一种激活方式</p><p>.sheet(item: Binding&lt;Identifiable?&gt;, content: (Identifiable) -&gt; View)</p><p>我们可以使用它来完成只响应一个激活变量，而显示所需的不同View</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">View1</span>:<span class="title">View</span></span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.presentationMode) <span class="keyword">var</span> presentationMode</span><br><span class="line">    <span class="keyword">let</span> text:<span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="type">VStack</span>&#123;</span><br><span class="line">            <span class="type">Text</span>(text)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"View1"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">                .toolbar&#123;</span><br><span class="line">                    <span class="type">ToolbarItem</span>(placement: <span class="type">ToolbarItemPlacement</span>.navigationBarLeading)&#123;</span><br><span class="line">                        <span class="type">Button</span>(<span class="string">"cancel"</span>)&#123;</span><br><span class="line">                            presentationMode.wrappedValue.dismiss()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">View2</span>:<span class="title">View</span></span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.presentationMode) <span class="keyword">var</span> presentationMode</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"View2"</span>)</span><br><span class="line">                .toolbar&#123;</span><br><span class="line">                    <span class="type">ToolbarItem</span>(placement: <span class="type">ToolbarItemPlacement</span>.navigationBarLeading)&#123;</span><br><span class="line">                        <span class="type">Button</span>(<span class="string">"cancel"</span>)&#123;</span><br><span class="line">                            presentationMode.wrappedValue.dismiss()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先准备两个需要显示的View</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SheetUsingAnyView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> sheetView:<span class="type">AnyView</span>?</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="type">List</span>&#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"View1"</span>)&#123;</span><br><span class="line">                    sheetView = <span class="type">AnyView</span>(<span class="type">View1</span>(text:<span class="string">"Hello world"</span>))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"View2"</span>)&#123;</span><br><span class="line">                    sheetView = <span class="type">AnyView</span>(<span class="type">View2</span>())</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .listStyle(<span class="type">InsetGroupedListStyle</span>())</span><br><span class="line">            .sheet(item: $sheetView)&#123; view <span class="keyword">in</span></span><br><span class="line">               view</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">"AnyView"</span>)</span><br><span class="line">            .navigationBarTitleDisplayMode(.inline)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AnyView</span>:<span class="title">Identifiable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> id:<span class="type">UUID</span>&#123;<span class="type">UUID</span>()&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码，我们便可以通过给sheetView赋予不同的值来实现弹出对应的View。</p><p>这个解决方案非常的便捷，不过也存在两个问题：</p><ol><li><p>在极个别的情况下，当app进入后台（此时app的sheet处于显示状态），再从后台重新显示时会出现程序崩溃情况。这个问题在ios13 和目前的 ios14（测试到beta5）都可能出现。不过出现的前提是你的代码的显示层级要足够复杂，如果代码比较简单，通常是可以正常运行的。</p><p>对于这个崩溃的情况，错误和调试代码给的信息都很不准确，估计应该和View的初始化冲突有关。</p></li><li><p>指令不清晰。如果赋值给sheetView的View参数很多，你的代码的可读性会比较差</p></li></ol><h2 id="采用reducer的思路解决问题">采用Reducer的思路解决问题</h2><p>其实对于每一个View，我们也都可以按照MVVM的思路来构建它自己的mini状态机（我的另一篇关于Form的文章也是这样的思路）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SheetUsingEnum</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> sheetAction:<span class="type">SheetAction</span>?</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="type">List</span>&#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"view1"</span>)&#123;</span><br><span class="line">                    sheetAction = .view1(text:<span class="string">"Test"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"view2"</span>)&#123;</span><br><span class="line">                    sheetAction = .view2</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .listStyle(<span class="type">InsetGroupedListStyle</span>())</span><br><span class="line">            .sheet(item: $sheetAction)&#123; action <span class="keyword">in</span></span><br><span class="line">                getActionView(action)</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">"Enum"</span>)</span><br><span class="line">            .navigationBarTitleDisplayMode(.inline)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getActionView</span><span class="params">(<span class="number">_</span> action:SheetAction)</span></span> -&gt; some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> action&#123;</span><br><span class="line">        <span class="keyword">case</span> .view1(<span class="keyword">let</span> text):</span><br><span class="line">            <span class="keyword">return</span> <span class="type">AnyView</span>(<span class="type">View1</span>(text: text))</span><br><span class="line">        <span class="keyword">case</span> .view2:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">AnyView</span>(<span class="type">View2</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SheetAction</span>:<span class="title">Identifiable</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> view1(text:<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> view2</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> id:<span class="type">UUID</span>&#123;</span><br><span class="line">        <span class="type">UUID</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较直接使用AnyView，代码量稍微增多了点，不过第一没有了崩溃的可能性，同时代码的易读性也得到了提高。</p><h2 id="解决某些view无法激活sheet的问题">解决某些View无法激活Sheet的问题</h2><p>关于在某些View上无法激活Sheet，我目前的解决方案是bind它的父View的sheetAction，通过父View来激活Sheet。通过枚举的相关值来传递所需的数据。</p><p><strong>更新</strong>: 在iOS14下,使用item来激活sheet,在某些特殊场合可能会导致app(打开sheet的情况下)从后台返回时会发生错误甚至崩溃.所以上述代码中对于sheet的激活,已经作出了更改.更改后的代码已经统一到了<a href="http://www.fatbobman.com/article/dismissControlSheet/">在SwiftUI中制作可以控制取消手势的Sheet</a></p><p><a href="https://github.com/fatbobman/DismissConfirmSheet" target="_blank" rel="noopener">可以在此下载项目完整代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Sheet是一个我比较喜欢的交互形式，它可以很好的控制用户的操作行为，让用户的交互逻辑单线条化。在iOS14上，SwiftUI增加了fullCover，支持了全屏的Sheet方式，让开发者又了更多的选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>聊一下SwiftUI中的List和ForEach</title>
    <link href="http://www.fatbobman.com/article/ListAndForEach/"/>
    <id>http://www.fatbobman.com/article/ListAndForEach/</id>
    <published>2020-08-24T08:48:29.000Z</published>
    <updated>2020-08-24T08:55:55.762Z</updated>
    
    <content type="html"><![CDATA[<p>在SwiftUI中使用List可以非常方便快速的制作各种列表.List其实就是对UITableView进行的封装(更多List的具体用法请参阅<a href="https://zhuanlan.zhihu.com/p/110749923" target="_blank" rel="noopener">List基本用法</a>).</p><p>在List中添加动态内容,我们可以使用两种方式</p><ul><li><p>直接使用List自己提供的动态内容构造方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">0</span>..&lt;<span class="number">100</span>)&#123; i <span class="keyword">in</span></span><br><span class="line">  <span class="type">Text</span>(<span class="string">"id:<span class="subst">\(id)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在List中使用ForEach</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&#123;</span><br><span class="line">  <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">100</span>)&#123; i <span class="keyword">in</span></span><br><span class="line">    <span class="type">Text</span>(<span class="string">"id:<span class="subst">\(id)</span>"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在碰到我最近出现的问题之前,我一直以为上述两种用法除了极个别的区别外,基本没有什么不同.</p><p>当时知道的区别:</p><ul><li><p>使用ForEach可以在同一List中,添加多个动态源,且可添加静态内容</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&#123;</span><br><span class="line">  <span class="type">ForEach</span>(items,id:\.<span class="keyword">self</span>)&#123; item <span class="keyword">in</span></span><br><span class="line">    <span class="type">Text</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">Text</span>(<span class="string">"其他内容"</span>)</span><br><span class="line">  <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">10</span>)&#123; i <span class="keyword">in</span></span><br><span class="line">    <span class="type">Text</span>(<span class="string">"id:<span class="subst">\(i)</span>"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用ForEach对于动态内容可以控制版式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&#123;</span><br><span class="line">  <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">10</span>)&#123; i <span class="keyword">in</span></span><br><span class="line">    <span class="type">Rectangle</span>()</span><br><span class="line">      .listRowInsets(<span class="type">EdgeInsets</span>()) <span class="comment">//可以控制边界insets</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">List</span>(<span class="number">0</span>..&lt;<span class="number">10</span>)&#123; i <span class="keyword">in</span></span><br><span class="line">   <span class="type">Rectangle</span>()</span><br><span class="line">      .listRowInsets(<span class="type">EdgeInsets</span>()) </span><br><span class="line">      <span class="comment">// 不可以控制边界insets.   .listRowInsets(EdgeInsets())在List中只对静态内容有效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>基于以上的区别,我在大多数的时候均采用ForEach在List中装填列表内容,并且都取得了预想的效果.</p><p>但是在最近我在开发一个类似于iOS邮件app的列表时发生了让我无语的状态——列表卡顿到完全无法忍耐.</p><p>通过下面的视频可以看到让我痛苦的app表现</p><p><video src="10ForEach.mov"></video></p><p>只有十条记录时的状态.非常丝滑</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&#123;</span><br><span class="line">   <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">10000</span>)&#123; i <span class="keyword">in</span></span><br><span class="line">       <span class="type">Cell</span>(id: i)</span><br><span class="line">         .listRowInsets(<span class="type">EdgeInsets</span>())</span><br><span class="line">         .swipeCell(cellPosition: .both, leftSlot: slot1, rightSlot: slot1)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><video src="1000ForEach.mov"></video></p><p>10000条记录的样子</p><p>在10条记录时一切都很完美,但当记录设置为10000条时,完全卡成了ppt的状态.尤其是View初始化便占有了大量的时间.</p><p>起初我认为可能是我写的滑动菜单的问题,但在自己检查代码后排出了这个选项.为了更好的了解在List中Cell的生命周期状态,写了下面的测试代码.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cell</span>:<span class="title">View</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> id:<span class="type">Int</span></span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">var</span> t = <span class="type">Test</span>()</span><br><span class="line">    <span class="keyword">init</span>(id:<span class="type">Int</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.id = id</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"init:<span class="subst">\(id)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="type">Rectangle</span>()</span><br><span class="line">            .fill(<span class="type">Color</span>.blue)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"id:<span class="subst">\(id)</span>"</span>)</span><br><span class="line">            )</span><br><span class="line">            .onAppear&#123;</span><br><span class="line">                t.id = id</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span>:<span class="title">ObservableObject</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> id:<span class="type">Int</span> = <span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">didSet</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"get value <span class="subst">\(id)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">init</span>()&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"init object"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">deinit</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"deinit:<span class="subst">\(id)</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:<span class="title">ObservableObject</span></span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> currentID:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后,发现了一个奇怪的现象:<strong>在List中,如果用ForEach处理数据源,所有的数据源的View竟然都要在List创建时进行初始化,这完全违背了tableView的本来意图</strong>.</p><p>将上面的代码的数据源切换到List的方式进行测试</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">0</span>..&lt;<span class="number">10000</span>)&#123; i <span class="keyword">in</span></span><br><span class="line">       <span class="type">Cell</span>(id: i)</span><br><span class="line">         .listRowInsets(<span class="type">EdgeInsets</span>())</span><br><span class="line">         .swipeCell(cellPosition: .both, leftSlot: slot1, rightSlot: slot1)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><video src="10000withoutForEach.mov"></video></p><p>熟悉的丝滑又回来了.</p><p>**ForEach要预先处理所有数据,提前准备View.并且初始化后,并不自动释放这些View(即使不可见)!**具体可以使用上面的测试代码通过Debug来分析.</p><p>不流畅的原因已经找到了,不过由于List处理的数据源并不能设置listRowInsets,尤其在iOS14下,苹果非常奇怪的屏蔽了不少通过UITableView来设置List的属性的途径,所以为了既能保证性能,又能保证显示需求,只好通过自己包装UITableView来同时满足上述两个条件.</p><p>好在我一直使用<a href="https://github.com/SwiftUIX/SwiftUIX" target="_blank" rel="noopener">SwiftUIX</a>这个第三方库,节省了自己写封装代码的时间.将代码做了进一步调整,当前的问题得以解决.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CocoaList</span>(item)&#123; i <span class="keyword">in</span></span><br><span class="line">          <span class="type">Cell</span>(id: i)</span><br><span class="line">          .frame(height:<span class="number">100</span>)</span><br><span class="line">          .listRowInsets(<span class="type">EdgeInsets</span>())</span><br><span class="line">          .swipeCell(cellPosition: .both, leftSlot: slot1, rightSlot: slot1)</span><br><span class="line">      &#125;.edgesIgnoringSafeArea(.all)</span><br></pre></td></tr></table></figure><p><video src="10000MyList.mov"></video></p><p>通过这次碰到的问题,我知道了可以在什么情况下使用ForEach.通过这篇文章记录下来,希望其他人少走这样的弯路.</p><p><strong>后记:</strong></p><p>我已经向苹果反馈了这个问题,希望他们能够进行调整吧(最近苹果对于开发者的feedback回应还是挺及时的,Xcode12发布后,我提交了5个feedback,已经有4个获得了反馈,3个在最新版得到了解决).</p><p><strong>遗憾:</strong></p><p>目前的解决方案使我失去了使用ScrollViewReader的机会.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SwiftUI中使用List可以非常方便快速的制作各种列表.List其实就是对UITableView进行的封装(更多List的具体用法请参阅&lt;a href=&quot;https://zhuanlan.zhihu.com/p/110749923&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>健康笔记2.0开发随笔（二）</title>
    <link href="http://www.fatbobman.com/article/healthNote2-2/"/>
    <id>http://www.fatbobman.com/article/healthNote2-2/</id>
    <published>2020-08-24T08:48:17.000Z</published>
    <updated>2020-08-24T08:58:40.096Z</updated>
    
    <content type="html"><![CDATA[<p>本周的由于其他琐事的原因,每天能够用于开发的时间基本上只能保证2-3个小时,所以进展不大.不过好在我也没有明确的进度指标.</p><p>由于2.0在功能上同1.0的区别并不太大,所以在功能需求设计上不需要花费太多的时间.这半年来我自己也基本总结了一个自己用起来比较顺手的MVVM框架所以在最开始的1周,并不用太费力变完成了一个最简陋ui的原型版.</p><p>尽管叫原型版,但数据流、数据库操作等待基础代码都是要用于正式版中的.</p><p>在上周,苹果发布了Xcode12的beta5,其中提供了在SwiftUI lifecycle下的CoreData模版.所用的思路和我现在差不多.都是使用static来保证上下文的唯一性.另外苹果也提供了一个用于preview的思路,创建了一个in-memory 的Sqllite.这个也和我现在的途径差距不大,我现在是直接通过生成Sample NSManageObject给Preview来实现的.反正都是可以在preview中比较好的支持CoreData数据.</p><p>preview在Xcode12中得到了很大的加强,崩溃的机率明显下降很多.我目前几乎所有的View都可以完美的preview出来.</p><p>本次升级我对于app的UI的还是有点企图心的,最初也希望能够制作成一个比较有风格的app.不过在仔细权衡过后,还是放弃了.放弃的理由也十分简单,对于个人开发者或者小型团队开发者,如果没有好的审美判断力、美工执行力、交互逻辑的设计能力,一个貌似具有个人风格的设计很可能会以惨败告终.</p><p>最终还是决定以iOS的原生UIKit基础上来进行设计.不过即使苹果的原生控件已经比较有美感,不过想要好的色彩搭配、合适的布局、顺畅的交互仍然不是一件容易的事情.</p><p>专业的事情还是要找专业的解决方案.最终,我在gumroad.com上找到了一个自己比较喜欢的控件设计包<a href="https://gumroad.com/l/iostoolkit" target="_blank" rel="noopener"><strong>Figma iOS UI kit</strong></a>,以99美金买了下来.</p><p>这个包的比较适合开发iOS原生的app.由于它同时提供了light和dark两个模式下的对应Demo,所以指导性还是很强的.</p><p>在研究这个模版的设计文件过程中我才发现,一个看似简单的控件其实里面有着非常多的细节.我试图在SwiftUI中在保证性能的情况下,实现更多的细节.</p><p>这是我目前一部分View的设计稿</p><p><img src="pic1.png" alt="截屏2020-08-24 下午3.53.25"></p><p><img src="pic2.png" alt="截屏2020-08-24 下午3.54.24"></p><p>目前已经针对完成的这一小部分开始编写代码了.之所以在没有完全完成设计的情况下便开始写代码,主要的原因是为了检查我在代码上对设计的还原度,同时也看一下当前的设计在实际运行状况下是否合理,以便总结经验完成下一步的全面设计.</p><p><em>figma功能上同Sketch差不多,而且最低门槛还是免费的.不过它对于网络的外网连接状况要求比较高.</em></p><p>在编写代码的时候,还是能够明显感觉到和设计之间的差别的,有些地方要做取舍,有些地方在实机上的显示又不尽如人意.只有不断的磨合才能增长经验.</p><p><img src="pic3.png" alt="截屏2020-08-24 下午4.13.08"></p><p>总体而言使用Figma或Sketch进行的设计在SwiftUI中的还原度还是很高的.开发难度也不大.</p><p>在本周开发过程中,出现了一个让我比较头疼的地方,不过最终还是解决了.</p><p>在2.0中,我打算使用类似iOS邮件程序的侧滑菜单进行交互,不过当数据量增大时,显示变得异常卡顿.最终发现了问题出在List中不正确的使用了ForEach.具体关于这部分的内容,我已经记录在了另一篇文章中<a href="http://www.fatbobman.com/article/ListAndForEach/">聊一下SwiftUI中的List和ForEach</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本周的由于其他琐事的原因,每天能够用于开发的时间基本上只能保证2-3个小时,所以进展不大.不过好在我也没有明确的进度指标.&lt;/p&gt;
&lt;p&gt;由于2.0在功能上同1.0的区别并不太大,所以在功能需求设计上不需要花费太多的时间.这半年来我自己也基本总结了一个自己用起来比较顺手的M
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="健康笔记" scheme="http://www.fatbobman.com/tags/%E5%81%A5%E5%BA%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>健康笔记2.0开发随笔（一）</title>
    <link href="http://www.fatbobman.com/article/healthNote2-1/"/>
    <id>http://www.fatbobman.com/article/healthNote2-1/</id>
    <published>2020-08-17T08:27:55.000Z</published>
    <updated>2020-08-17T08:30:47.283Z</updated>
    
    <content type="html"><![CDATA[<p>健康笔记从2020年1月上线以来，至今已经过了大半年的时间（可以从<a href="https://zhuanlan.zhihu.com/p/103822455" target="_blank" rel="noopener">老人新兵 —— 一款iOS app的开发手记</a>了解健康笔记app的由来）。在这段时间里，我对于Swift、SwiftUI、CoreData等都有了进一步的了解和认识。在开发1.0版本时所面对的问题和疑惑多数都得到了解决。</p><p>最近随着iOS14发布的临近，同时也想将这短时间来学习的知识进行更系统的整理和应用，于是便将健康笔记2.0的开发工作提上了日程，并已经着手进行中。</p><p>健康笔记2.0的规划：</p><ul><li><p>功能</p><p>健康笔记1.0目前的功能已基本能够满足我个人的日常使用，在上线这段时间内，我也根据用户提出的建议增加了部分新功能。因此在2.0上，app核心功能的增加并不是太多，主要集中在两点：</p><ul><li><p>数据类型</p><p>1.0中当前支持两种数据类型，一种是数字型（仅记录一个数字+日期），另一个是选项型（自定义选项内容+日期），在2.0中，新增了其他5中数据类型包括：双数字型、数字选项型、起始时间型等。使用者可以记录生活中更多种类的内容。</p></li><li><p>数据导入导出</p><p>1.0中已经提供了对于数字卡片、条目等内容的数据各自的导出支持（csv,pdf,xslx）,2.0版中将提供同一的导出入口，并将提供导入功能。用户可以有更多段选择保管并使用自己的数据，比如将自己创建的卡片分享给其他用户，或者重新导入自己保存的离线数据等。</p></li></ul><p><em>既然是一次大版本的更新，虽然在功能上的改变并非太多，但在其他地方的变化还是会很大的，更多的变化都会在后文中提到。</em></p></li></ul><ul><li><p>开发环境、框架</p><p>Xcode12 + SwiftUI2.0 ，主要的原因如下：</p><ul><li>从WWDC20以来我一直在跟踪并学习iOS14下的新特性（我的最近的文章大多都有关于此），以及SwiftU2.0中提供的新功能。在规划初始，我打算在2.0中使用不少的新功能来完成自己的构思。由于iOS14对于硬件的支持完全涵盖的之前iOS13的机型，相信对于iOS13的用户来说，更新的阻力不会太大。</li><li>当前的用户数并不多，历史包袱较小。从上线来，目前健康笔记的总下载量才刚刚超过1000，因此让我可以轻装上阵，有较大的调整空间。</li><li>1.0版本中很多的规划、设计不完善。最近几个月，我已经很少向1.0版本中增加新的功能了，主要原因就是最开始的结构设计不合理、代码混乱。如果强行添加更多的功能，只会导致留下更多的隐患，反倒不利于今后的调整。所以在2.0中，决定将之前的数据结构设计进行了较大的改变，将1.0的代码全部推翻重写。</li><li>数据迁移的问题。由于1.0的数据结构设计不佳，我打算在2.0中进行大变化，这样会导致CoreData的数据迁移面临严峻的考验。在1.0版本的数据小升级中，我已经领教到了CoreData的迁移机制所带来的便利性和难以控制的双面问题。尽管可以通过编写自己的CoreData迁移代码来解决结构大变化时所面临的难题，不过为了不留下隐患、给将来的扩充留下更自由的空间，还是决定放弃了使用CoreData的迁移机制。</li><li>我本来就打算在2.0中进一步加强数据的导入导出，所以对于1.0版本的用户，我将提供安全的数据迁移能力，平滑的过度到2.0上。</li></ul><p>结果就是：用户将重新在app store上下载健康笔记2.0app(不是在1.0上更新)，2.0将支持iOS14、macOS 11及以上的系统。之前的健康笔记1.0用户数据都可以安全方便的手动转移到2.0版本上。</p></li></ul><ul><li><p>支持多平台</p><p>2.0将支持iPhone,iPad和macOS。</p><p>SwiftUI本身对于多平台的支持就非常出色，不过为了能够在不同的硬件平台下更好的发挥其各自的特点，我还是决定为支持多平台做更多针对性的调整。</p><ul><li><p>iPhone下仍同1.0一样强制竖屏使用。</p></li><li><p>iPad下强制横屏使用，并采用了和iPhone下完全不同的布局。</p></li><li><p>macOS下不使用Catalyst，而使用原生的macOS target进行编写。虽然加大了工作量，但可以更好的适配桌面操作，尤其是提供同手指操作完全不同键鼠交互逻辑，并采用更适合桌面平台的布局和控件操作。</p></li><li><p>我在最近编写的Swift库中，基本上都提供了跨平台的支持。</p></li><li><p>由于决定了进行完全的跨平台开发（uikit+appkit），因此在选择第三方库的限制将会更多。</p></li></ul></li></ul><ul><li><p>多语种</p><p>健康笔记的本身的文字量并不多，因此单纯从文本内容的角度来看，多语种支持并不复杂。不过由于涉及了不少的数据显示、日期计算等，在真正进行多语种支持的时候还是遇到了不少挑战。</p><p>在目前的开发版本中，已经可以让用户在app中单独设置语言、时区而不完全依赖系统设定。</p><p>目前仍没有想好的多语种支持问题主要存在于Demo数据的加载上。我希望能找到一个工作量较小、数据量较小的解决方案。</p></li><li><p>代码结构</p><p>健康笔记2.0将代码完全推翻重写，其中极为重要的一个原因是我想实现一个自己认可的能适用于SwiftUI的MVVM结构。</p><p>我在开发1.0版本的时候才接触到MVVM，在最初的开发过程中，基本上是按照别人提供的代码逻辑来完成的。在实际的使用中一方面发现了很多自己不理解或用起来不顺手的地方，同时在不断的学习中，也发现了很多传统MVVM不完适应SwiftUI框架的问题。最近几个月，我一直在学习并研究适用于SwfitUI的MVVM结构，2.0的开发中这些学习结果将得到充分的检验机会。</p><p>Xcode12中提供了 SwiftUI lifecycle，从程序入口点，到App Delegate、Scene Delegate响应都有了彻底地改变，如何设计一个更适合Swfit2.0的状态机在不少论坛进行了讨论和分析。我目前在开发中采用的结构对这些都做了有针对性的调整。并且为多平台，多语种都提供不错的响应支持。同时为了便于使用Preview，对于CoreData的声明和注入也做了针对性的调整。</p><p>之后，我会专门写一篇关于这方面的文章和大家一起研究谈探讨。</p></li><li><p>商业计划</p><p>没有。</p><p>由于编写代码仅是我的个人爱好，对于健康笔记这个项目，我完全是为了满足自己的需要而开发的。因此，在健康笔记上我是没有任何商业规划和愿望与想法的。只要我的精力允许，身体状态ok，我就会坚持吧这个app完善下去。</p></li></ul><p>我将在开发过程中，不定时地更新随笔。一方面对自己的思路进行一个梳理，同时也希望能够给其他的个人开发者提供一点参考。</p><p><a href="https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=1492861358" target="_blank" rel="noopener">健康笔记1.0下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;健康笔记从2020年1月上线以来，至今已经过了大半年的时间（可以从&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103822455&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;老人新兵 —— 一款iOS app的开发手记&lt;/
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="健康笔记" scheme="http://www.fatbobman.com/tags/%E5%81%A5%E5%BA%B7%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUIOverlayContainer</title>
    <link href="http://www.fatbobman.com/article/swiftuioverlaycontainer/"/>
    <id>http://www.fatbobman.com/article/swiftuioverlaycontainer/</id>
    <published>2020-08-12T00:37:18.000Z</published>
    <updated>2020-08-12T01:15:23.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SwiftUI目前可以提供sheet,fullScreenCover,alert,actionsheet等弹出视图用于丰富UI交互。不过种类还是有些单调。为了能够更方便的编写各种弹出式窗口的代码，我写了一个简单的SwiftUI库 —— SwiftUIOverlayContainer。</p></blockquote><p>SwiftUIOverlayContainer本身并不提供任何预置的视图样式，不过通过它，你有充分的自有度来实现自己需要的视图效果。OverlayContainer的主要目的在于帮助你完成动画、交互、样式定制等基础工作，使开发者能够将时间和精力仅需投入在视图本身的代码上。</p><p><a href="https://github.com/fatbobman/SwiftUIOverlayContainer" target="_blank" rel="noopener">SwiftUIOverlayContainer</a></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=456731659&bvid=BV1S541187jM&cid=223368255&page=1" width="780" height="480" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>库代码已经修改可以直接在xcode11下使用<p>代码思路受到了<a href="https://link.zhihu.com/?target=https%3A//github.com/AndreaMiotto/PartialSheet" target="_blank" rel="noopener">PartialSheet</a>很大的影响,并使用了其部分代码。</p><h2 id="使用方法">使用方法</h2><ol><li>Add a <strong>OverlayContainerManager</strong> instance as an <em>environment object</em> to your Root View in you <em>SceneDelegate</em>or App</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> manager = <span class="type">OverlayContainerManager</span>()</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .environmentObject(manager)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Add the <strong>OverlayView</strong> to your <em>Root View</em>, and if you want give it a style. In your RootView file at the end of the builder add the following modifier:</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">       .addOverlayContainer(style: &lt;<span class="type">OverlayContainerStyle</span>&gt;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>In anyone of your views add a reference to the <em>environment object</em> and than just call the <code>showOverlayView&lt;T&gt;(_ onDismiss: (() -&gt; Void)? = nil, @ViewBuilder content: @escaping () -&gt; T) where T: View</code> func whenever you want like this:</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">EnvironmentObject</span> <span class="keyword">var</span> manager: <span class="type">OverlayContainerManager</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span>(action: &#123;</span><br><span class="line">    <span class="keyword">self</span>.manager.showOverlayView(&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"dismissed"</span>)</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">         <span class="type">VStack</span>&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"This is Overlay View"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, label: &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"Show overlyView"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>样式说明</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> style2 = <span class="type">OverlayContainerStyle</span>(</span><br><span class="line">                                   alignment: .leading,  <span class="comment">//容器对齐位置</span></span><br><span class="line">                                   coverColor: <span class="type">Color</span>.gray.opacity(<span class="number">0.3</span>), <span class="comment">//覆盖色</span></span><br><span class="line">                                   shadow:.<span class="keyword">init</span> (color: <span class="type">Color</span>.black.opacity(<span class="number">0.3</span>), radius: <span class="number">20</span>, x: <span class="number">2</span>, y: <span class="number">0</span>), <span class="comment">//阴影样式</span></span><br><span class="line">                                   blur: <span class="literal">nil</span>,  <span class="comment">//模糊样式</span></span><br><span class="line">                                   animation: .easeInOut ,  <span class="comment">//动画曲线</span></span><br><span class="line">                                   transition:.move(edge:.leading),  <span class="comment">//进出动画效果</span></span><br><span class="line">                                   animatable: <span class="literal">true</span>,  <span class="comment">//是否显示动画</span></span><br><span class="line">                                   autoHide: <span class="literal">nil</span>,  <span class="comment">//是否自动隐藏,可设置秒数</span></span><br><span class="line">                                   enableDrag: <span class="literal">true</span>,  <span class="comment">//是否允许滑动取消,目前只支持 .leading,.trailing,.bottom,.top</span></span><br><span class="line">                                   clickDismiss: <span class="literal">true</span>) <span class="comment">//是否支持显示后,点击屏幕其他位置取消</span></span><br></pre></td></tr></table></figure><p>更多具体应用,请参看 代码DEMO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SwiftUI目前可以提供sheet,fullScreenCover,alert,actionsheet等弹出视图用于丰富UI交互。不过种类还是有些单调。为了能够更方便的编写各种弹出式窗口的代码，我写了一个简单的SwiftUI库 —— SwiftU
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="iOS" scheme="http://www.fatbobman.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SwipeCell</title>
    <link href="http://www.fatbobman.com/article/swiftuiCell/"/>
    <id>http://www.fatbobman.com/article/swiftuiCell/</id>
    <published>2020-08-12T00:37:06.000Z</published>
    <updated>2020-08-12T01:10:34.320Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>随着SwiftUI2.0的不断完善，我觉得是时候将我的app做一个较大的升级了。之前一直想在app中实现类似iOS 邮件程序那样优雅的侧滑菜单效果，在网上也找了一下，实现的较好的是适用于UIKit的，基本上没有能够很好的适配SwiftUI的项目库。最终自己在Xcode12实现了一个。</p></blockquote><p>SwipeCell 是一个用Swift 5.3开发的 SwiftUI库.目标是为了实现类似iOS Mail程序实现的左右滑动菜单功能. SwipeCell 需要 XCode 12 ,iOS 14</p><p><a href="https://github.com/fatbobman/SwipeCell" target="_blank" rel="noopener">SwipeCell GitHub</a></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=841700385&bvid=BV1h54y1i7Pv&cid=223366663&page=1" width="780" height="480" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h2 id="配置button">配置Button</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> button1 = <span class="type">SwipeCellButton</span>(buttonStyle: .titleAndImage,</span><br><span class="line">                title: <span class="string">"Mark"</span>, </span><br><span class="line">                systemImage: <span class="string">"bookmark"</span>,</span><br><span class="line">                titleColor: .white, </span><br><span class="line">                imageColor: .white, </span><br><span class="line">                view: <span class="literal">nil</span>,   </span><br><span class="line">                backgroundColor: .green,</span><br><span class="line">                action: &#123;bookmark.toggle()&#125;,</span><br><span class="line">                feedback:<span class="literal">true</span></span><br><span class="line">                )</span><br><span class="line"><span class="comment">//你可以将按钮设置成任意View从而实现更复杂的设计以及动态效果</span></span><br><span class="line"><span class="keyword">let</span> button3 = <span class="type">SwipeCellButton</span>(buttonStyle: .view, title:<span class="string">""</span>,systemImage: <span class="string">""</span>, view: &#123;</span><br><span class="line">    <span class="type">AnyView</span>(</span><br><span class="line">        <span class="type">Group</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> unread &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">"envelope.badge"</span>)</span><br><span class="line">                    .foregroundColor(.white)</span><br><span class="line">                    .font(.title)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">"envelope.open"</span>)</span><br><span class="line">                    .foregroundColor(.white)</span><br><span class="line">                    .font(.title)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;, backgroundColor: .orange, action: &#123;unread.toggle()&#125;, feedback: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h2 id="配置slot">配置Slot</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> slot1 = <span class="type">SwipeCellSlot</span>(slots: [button2,button1])</span><br><span class="line"><span class="keyword">let</span> slot2 = <span class="type">SwipeCellSlot</span>(slots: [button4], slotStyle: .destructive, buttonWidth: <span class="number">60</span>) </span><br><span class="line"><span class="keyword">let</span> slot3 = <span class="type">SwipeCellSlot</span>(slots: [button2,button1],slotStyle: .destructiveDelay)</span><br></pre></td></tr></table></figure><h2 id="装配">装配</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cellView()</span><br><span class="line">    .swipeCell(cellPosition: .<span class="keyword">left</span>, leftSlot: slot4, rightSlot: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p><em>更多的配置选项</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cellView()</span><br><span class="line">    .swipeCell(cellPosition: .both, </span><br><span class="line">                leftSlot: slot1, </span><br><span class="line">                rightSlot: slot1 ,</span><br><span class="line">                swipeCellStyle: <span class="type">SwipeCellStyle</span>(</span><br><span class="line">                            alignment: .leading,</span><br><span class="line">                            dismissWidth: <span class="number">20</span>,</span><br><span class="line">                            appearWidth: <span class="number">20</span>,</span><br><span class="line">                            destructiveWidth: <span class="number">240</span>, </span><br><span class="line">                            vibrationForButton: .error, </span><br><span class="line">                            vibrationForDestructive: .heavy, </span><br><span class="line">                            autoResetTime: <span class="number">3</span>)</span><br><span class="line">                            )</span><br></pre></td></tr></table></figure><h2 id="滚动列表自动消除">滚动列表自动消除</h2><p><em>For List</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&#123;</span><br></pre></td></tr></table></figure><p>}<br>.dismissSwipeCell()<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*For single cell in ScrollView*</span><br><span class="line"></span><br><span class="line">​```swift</span><br><span class="line">ScrollView&#123;</span><br><span class="line">    VStack&#123;</span><br><span class="line">        Text(&quot;Mail Title&quot;)</span><br><span class="line">            .dismissSwipeCellForScrollView() </span><br><span class="line">        Text(&quot;Mail Content&quot;)</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(maxWidth:.infinity,maxHeight: .infinity)</span><br><span class="line">&#125;</span><br><span class="line">.swipeCell(cellPosition: .both, leftSlot: leftSlot, rightSlot: rightSlot,clip: false)</span><br></pre></td></tr></table></figure><p><em>For LazyVStack in ScrollView</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScrollView</span>&#123;</span><br><span class="line">    <span class="type">LazyVStack</span>&#123;</span><br><span class="line">    <span class="type">ForEach</span>(lists,id:\.<span class="keyword">self</span>)&#123; item <span class="keyword">in</span></span><br><span class="line">       <span class="type">Text</span>(<span class="string">"Swipe in scrollView:<span class="subst">\(item)</span>"</span>)</span><br><span class="line">        .frame(height:<span class="number">80</span>)</span><br><span class="line">        .swipeCell(cellPosition: .both, leftSlot:slot, rightSlot: slot)</span><br><span class="line">        .dismissSwipeCellForScrollViewForLazyVStack()</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dismissSwipeCell 在editmode下支持选择</li><li>dismissSwipeCellForScrollView 用于ScrollView,通常用于只有一个Cell的场景,比如说Mail中的邮件内容显示.参看Demo中的演示</li><li>dismissSwipeCellForScrollViewForLazyVStack 用于ScrollView中使用LazyVStack场景.个别时候会打断滑动菜单出现动画.个人觉得如无特别需要还是使用List代替LazyVStack比较好.</li></ul><p>由于SwiftUI没有很好的方案能够获取滚动状态,所以采用了 <a href="https://link.zhihu.com/?target=https%3A//github.com/siteline/SwiftUI-Introspect.git" target="_blank" rel="noopener">Introspect</a>实现的上述功能.</p><p>destructiveDelay 形式的 button，需要在action中添加 dismissDestructiveDelayButton()已保证在alter执行后，Cell复位</p><h2 id="当前问题">当前问题</h2><ul><li>动画细节仍然不足</li><li>EditMode模式下仍有不足</li></ul><h2 id="欢迎多提宝贵意见">欢迎多提宝贵意见</h2><p>SwipeCell is available under the <a href="https://link.zhihu.com/?target=https%3A//github.com/fatbobman/SwipeCell/blob/main/LICENSE.md" target="_blank" rel="noopener">MIT license</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;随着SwiftUI2.0的不断完善，我觉得是时候将我的app做一个较大的升级了。之前一直想在app中实现类似iOS 邮件程序那样优雅的侧滑菜单效果，在网上也找了一下，实现的较好的是适用于UIKit的，基本上没有能够很好的适配SwiftUI的项目库。
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="iOS" scheme="http://www.fatbobman.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI 2.0 新特性、新功能学习笔记汇总</title>
    <link href="http://www.fatbobman.com/article/swift2-new/"/>
    <id>http://www.fatbobman.com/article/swift2-new/</id>
    <published>2020-07-17T02:44:35.000Z</published>
    <updated>2020-07-17T02:49:29.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文汇总了我关于WWDC20发布的SwiftUI的一些新功能、新特性的学习心得。由于部分文章包含视频，所以就没有搬运到本博客，所有连接均指向知乎。 <strong>内容持续更新中。</strong></p></blockquote><p><strong>@StateObject</strong>  <a href="https://zhuanlan.zhihu.com/p/151286558" target="_blank" rel="noopener">SwiftUI 2.0 —— @StateObject 研究</a></p><p><strong>@FocusedBinding @FocusedValue</strong> <a href="https://zhuanlan.zhihu.com/p/159623431" target="_blank" rel="noopener">@FocusedBinding 浅谈</a></p><p><strong>app  scene</strong> <strong>@UIApplicationDelegateAdaptor scenePhase</strong> <a href="https://zhuanlan.zhihu.com/p/152624613" target="_blank" rel="noopener">SwiftUI2.0 —— App、Scene及新的代码结构（一）</a></p><p>@<strong>AppStorage</strong> @<strong>SceneStorage</strong> <a href="https://zhuanlan.zhihu.com/p/153991758" target="_blank" rel="noopener">SwiftUI2.0 —— App、Scene、新的代码结构（二）</a></p><p><strong>Commands</strong> <a href="https://zhuanlan.zhihu.com/p/152127847" target="_blank" rel="noopener">SwiftUI2.0 —— Commands（macOS菜单）</a></p><p><strong>Map</strong> <a href="https://zhuanlan.zhihu.com/p/158111570" target="_blank" rel="noopener">HowTo—— Swift2.0在视图中显示地图</a></p><p><strong>Label</strong> <a href="https://zhuanlan.zhihu.com/p/158152485" target="_blank" rel="noopener">HowTo —— SwiftUI2.0如何使用Label</a></p><p><strong>LazyVStack LazyHStack</strong> <a href="https://zhuanlan.zhihu.com/p/158181423" target="_blank" rel="noopener">HowTo —— SwiftU2.0 LazyVStack,LazyHStack</a></p><p><strong>Grid</strong> <a href="https://zhuanlan.zhihu.com/p/158199337" target="_blank" rel="noopener">HowTO —— SwiftUI2.0 原生的Grid</a></p><p><strong>ScrollVeiwReader</strong> <a href="https://zhuanlan.zhihu.com/p/158209237" target="_blank" rel="noopener">HowTo —— SwiftUI2.0使用ScrollViewReader定位滚动位置</a></p><p><strong>ToolBar</strong> <a href="https://zhuanlan.zhihu.com/p/158421637" target="_blank" rel="noopener">HowTo —— SwiftUI2.0 使用ToolBar替代navigationbarItems</a></p><p><strong>Link openURL</strong> <a href="https://zhuanlan.zhihu.com/p/158545725" target="_blank" rel="noopener">HowTo —— SwiftUI2.0 使用Link或openURL打开URL scheme</a></p><p><strong>importFiles exportFiles</strong> <a href="https://zhuanlan.zhihu.com/p/158655797" target="_blank" rel="noopener">HowTo —— SwiftUI2.0 文件导入导出</a></p><p><strong>onOpenURL</strong> <a href="https://zhuanlan.zhihu.com/p/158714562" target="_blank" rel="noopener">HowTo —— 使用onOpenURL处理Universal Links</a></p><p>ProgressView <a href="https://zhuanlan.zhihu.com/p/158745123" target="_blank" rel="noopener">HowTo —— SwiftUI2.0 使用ProgressView显示进度条</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文汇总了我关于WWDC20发布的SwiftUI的一些新功能、新特性的学习心得。由于部分文章包含视频，所以就没有搬运到本博客，所有连接均指向知乎。 &lt;strong&gt;内容持续更新中。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;st
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="iOS" scheme="http://www.fatbobman.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI2.0新特性</title>
    <link href="http://www.fatbobman.com/article/swiftui2-app2/"/>
    <id>http://www.fatbobman.com/article/swiftui2-app2/</id>
    <published>2020-07-08T00:55:52.000Z</published>
    <updated>2020-07-08T01:26:37.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swiftui20-app-scene-新的代码结构二">SwiftUI2.0 —— App、Scene、新的代码结构（二）</h1><blockquote><p>在<a href="http://www.fatbobman.com/article/swiftui2-app1/">上篇文章</a>中我们简单了解了App、Scene，以及几个内置Scene的应用。在本文中，我们着重探讨在SwiftUI2.0新的代码结构下如果更高效的组织Data Flow。</p></blockquote><h2 id="新特性">新特性</h2><p>**@AppStorage **</p><p>AppStorage是苹果官方提供的用于操作UserDefault的属性包装器。这个功能在Swift提供了propertyWrapper特性后，已经有众多的开发者编写了类似的代码。功能上没有任何特别之处，不过名称对应了新的App协议，让人更容易了解其可适用的周期。</p><ul><li>数据可持久化，app退出后数据仍保留</li><li>仅包装了UserDefault，数据可以UserDefault正常读取</li><li>可保存的数据类型同UserDefault，不适合保存复杂类型数据</li><li>在app的任意View层级都可适用，不过在app层使用并不起作用（不报错）</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AppStorageTest</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不报错，不过不起作用</span></span><br><span class="line">    <span class="comment">//@AppStorage("count") var count = 0</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">RootView</span>()</span><br><span class="line">            <span class="type">CountView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RootView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">AppStorage</span>(<span class="string">"count"</span>) <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span>&#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"+1"</span>)&#123;</span><br><span class="line">                <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CountView</span>:<span class="title">View</span></span>&#123;</span><br><span class="line">    @<span class="type">AppStorage</span>(<span class="string">"count"</span>) <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Count:<span class="subst">\(<span class="built_in">count</span>)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@SceneStorage</strong></p><p>使用方法同@AppStorage十分类似，不过其作用域仅限于当前Scene。</p><ul><li>数据作用域仅限于Scene中</li><li>生命周期同Scene一致，当前在PadOS下，如果强制退出一个两分屏显示的app,系统在下次打开app时有时会保留上次的Scene信息。不过，如果如果单独退出一个Scene，数据则失效</li><li>支持的类型基本等同于@AppStorage，适合保存轻量数据</li><li>比较适合保存基于Scene的特质信息，比如TabView的选择，独立布局等数据</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NewAllApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span>&#123;</span><br><span class="line">            <span class="type">ContentView1</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>:<span class="title">View</span></span>&#123;</span><br><span class="line">    @<span class="type">SceneStorage</span>(<span class="string">"tabSeleted"</span>) <span class="keyword">var</span> selection = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> body:some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="type">TabView</span>(selection:$selection)&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"1"</span>).tabItem &#123; <span class="type">Text</span>(<span class="string">"1"</span>) &#125;.tag(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"2"</span>).tabItem &#123; <span class="type">Text</span>(<span class="string">"2"</span>) &#125;.tag(<span class="number">2</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"3"</span>).tabItem &#123; <span class="type">Text</span>(<span class="string">"3"</span>) &#125;.tag(<span class="number">3</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./sceneStorage.png" alt="sceneStorage"></p><blockquote><p><strong><em>上述代码在PadOS下运行正常，不过在macOS下程序会报错。估计应该是bug</em></strong></p></blockquote><h2 id="data-flow">Data Flow</h2><p><strong>手段</strong></p><p>苹果在SwiftUI2.0中添加了@AppStorage @SceneStorage @StateObject 等新的属性包装器，我根据自己的理解对目前SwiftUI提供的部分属性包装器做了如下总结：</p><p><img src="./propertyWrapperSheet.png" alt="propertyWrapperSheet"></p><p>经过此次升级后，SwiftUI已经大大的完善了各个层级数据的生命周期管理，对不同的类型、不同的场合、不同的用途都提供了解决方案，为编写符合SwiftUI的Data Flow提供了便利，我们可以根据自己的需要选择适合的Source of truth手段。</p><p>想了解其中的更多细节，可以参看我的其他文章：</p><p><a href="http://www.fatbobman.com/article/state/">@State 研究</a></p><p><a href="http://www.fatbobman.com/article/stateobject/">@StateObject研究</a></p><p><a href="http://www.fatbobman.com/article/observableObject/">ObservableObject研究——想说爱你不容易</a></p><p><strong>变化</strong></p><p>在SwiftUI1.0中，我们通常会在AppDelegate中创建需要生命周期与app一致的数据（比如CoreData的Container），在SceneDelegate中创建Store之类的数据源，并通过.environmentObject注入。不过随着SwiftUI2.0在程序入口方面的变化，以及采取的全新Delegate响应方式，我们可以通过更简洁、清晰的代码完成上述工作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NewAllApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">var</span> store = <span class="type">Store</span>()</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span>&#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .environmentObject(store)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:<span class="title">ObservableObject</span></span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子中，将</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">StateObject</span> <span class="keyword">var</span> store = <span class="type">Store</span>()</span><br></pre></td></tr></table></figure><p>换成</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> store = <span class="type">Store</span>()</span><br></pre></td></tr></table></figure><p>目前来说是一样的。</p><p><em>虽然目前SceneBuilder、CommandBuilder对Dynamic update和逻辑判断尚不支持，我相信应该在不久的将来，或许我们就可以使用类似下面的代码来完成很多有趣的工作了,<strong>当前代码无法执行</strong></em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NewAllApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">var</span> store = <span class="type">Store</span>()</span><br><span class="line">    @<span class="type">SceneBuilder</span> <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="comment">//@SceneBuilder目前不支持判断，不过将来应该会加上</span></span><br><span class="line">        <span class="keyword">if</span> store.scene == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span>&#123;</span><br><span class="line">            <span class="type">ContentView1</span>()</span><br><span class="line">                .environmentObject(store)</span><br><span class="line">        &#125;</span><br><span class="line">        .onChange(of: store.number)&#123; value <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">        .commands&#123;</span><br><span class="line">            <span class="type">CommandMenu</span>(<span class="string">"DynamicButton"</span>)&#123;</span><br><span class="line">                <span class="comment">//目前无法动态切换内容，怀疑是bug，已反馈</span></span><br><span class="line">                <span class="keyword">switch</span> store.number&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="type">Button</span>(<span class="string">"0"</span>)&#123;&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="type">Button</span>(<span class="string">"1"</span>)&#123;&#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="type">Button</span>(<span class="string">"other"</span>)&#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="type">DocumentGroup</span>(newDocment:<span class="type">TextFile</span>())&#123; file <span class="keyword">in</span></span><br><span class="line">              <span class="type">TextEditorView</span>(document:file.$document)</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Settings</span>&#123;</span><br><span class="line">            <span class="type">VStack</span>&#123;</span><br><span class="line">               <span class="comment">//可正常变换</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"<span class="subst">\(store.number)</span>"</span>)</span><br><span class="line">                    .padding(.all, <span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView1</span>:<span class="title">View</span></span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> store:<span class="type">Store</span></span><br><span class="line">    <span class="keyword">var</span> body:some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="type">VStack</span>&#123;</span><br><span class="line">        <span class="type">Picker</span>(<span class="string">"select"</span>,selection:$store.number)&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"0"</span>).tag(<span class="number">0</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"1"</span>).tag(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"2"</span>).tag(<span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .pickerStyle(<span class="type">SegmentedPickerStyle</span>())</span><br><span class="line">        .padding()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:<span class="title">ObservableObject</span></span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> number = <span class="number">0</span></span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> scene = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>跨平台代码</strong></p><p>在<a href="http://www.fatbobman.com/article/swiftui2-app1/">上篇文章</a>我们介绍了新的@UIApplicationDelegateAdaptor的使用方法，我们也可以直接创建一个支持Delegate的store。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:<span class="title">NSObject</span>,<span class="title">ObservableObject</span></span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> os(iOS)</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Store</span>:<span class="title">UIApplicationDelegate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"launch"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AllInOneApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    #<span class="keyword">if</span> os(iOS)</span><br><span class="line">    @<span class="type">UIApplicationDelegateAdaptor</span>(<span class="type">Store</span>.<span class="keyword">self</span>) <span class="keyword">var</span> store</span><br><span class="line">    #<span class="keyword">else</span></span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">var</span> store = <span class="type">Store</span>()</span><br><span class="line">    #endif</span><br><span class="line">    </span><br><span class="line">    @<span class="type">Environment</span>(\.scenePhase) <span class="keyword">var</span> phase</span><br><span class="line"></span><br><span class="line">    @<span class="type">SceneBuilder</span> <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">            <span class="type">WindowGroup</span> &#123;</span><br><span class="line">                <span class="type">RootView</span>()</span><br><span class="line">                    .environmentObject(store)</span><br><span class="line">            &#125;</span><br><span class="line">            .onChange(of: phase)&#123;phase <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">switch</span> phase&#123;</span><br><span class="line">                <span class="keyword">case</span> .active:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"active"</span>)</span><br><span class="line">                <span class="keyword">case</span> .inactive:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"inactive"</span>)</span><br><span class="line">                <span class="keyword">case</span> .background:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"background"</span>)</span><br><span class="line">                @unknown <span class="keyword">default</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"for future"</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">        #<span class="keyword">if</span> os(macOS)</span><br><span class="line">        <span class="type">Settings</span>&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"偏好设置"</span>).padding(.all, <span class="number">50</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        #endif</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>在<a href="http://www.fatbobman.com/article/observableObject/">ObservableObject研究——想说爱你不容易</a>中，我们探讨过SwiftUI更倾向于我们不要创建一个沉重的Singel source of truth,而是将每个功能模块作为独立的状态机（一起组合成一个大的状态app），使用能够对生命周期和作用域更精确可控的手段创建区域性的source of truth。</p><p>从SwiftUI第一个版本升级的内容来看，目前SwiftUI仍是这样的思路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;swiftui20-app-scene-新的代码结构二&quot;&gt;SwiftUI2.0 —— App、Scene、新的代码结构（二）&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;http://www.fatbobman.com/article/swift
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="iOS" scheme="http://www.fatbobman.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI2.0新特性</title>
    <link href="http://www.fatbobman.com/article/swiftui2-app1/"/>
    <id>http://www.fatbobman.com/article/swiftui2-app1/</id>
    <published>2020-07-08T00:55:43.000Z</published>
    <updated>2020-07-08T01:05:14.815Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文简单介绍了SwiftUI2.0中全新提供的App协议、Scene协议，浅谈了在全新的代码结构下如何组织Data Flow，并提供了SwiftUI2.0中预置的Scene的一些使用示例。</p><p>当前运行环境为 Xcode Version 12.0 beta (12A6159), macOS Big Sur 11.0 Beta版(20A4299v)。</p></blockquote><p>WWDC20中，苹果为开发者带来了基于SwiftUI的全新项目模板。使用该模板，将使项目代码变得异常简洁、清晰。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NewAllApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Hello world"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码可以在屏幕上完成Hello world的显示，且能够运行于iOS和macOS平台下。</p><h2 id="基本概念">基本概念</h2><p><strong>App</strong></p><p>SwiftUI2.0提供的全新协议。通过声明一个符合App协议的结构来创建一个程序，并通过计算属性body来实现程序的内容。</p><ul><li><p>通过@main(swift5.3 新特性)设定程序的入口，每个项目只能有一个进入点</p></li><li><p>管理整个app的生命周期</p></li><li><p>在这个作用域下声明的常量、变量其生命周期与整个app是完全一致的。</p></li></ul><p><strong>Scene</strong></p><p>场景是视图（View）层次结构的容器。通过在App实例的body中组合一个或多个符合Scene协议的实例来呈现具体程序。</p><ul><li>生命周期由系统管理</li><li>系统会根据运行平台的不同而调整场景的展示行为（比如相同的代码在iOS和macOS下的呈现不同，或者某些场景仅能运行于特定的平台）</li><li>SwiftUI2.0提供了几个预置的场景，用户也可以自己编写符合Scene协议的场景。上述代码中便是使用的一个预置场景WindowGroup</li></ul><p>通过App和Scene的加入，绝不是仅仅减少代码量这么简单。通过这个明确的层级设定，我们可以更好的掌握在不同作用域下各个部分的生命周期、更精准数据传递、以及更便利的多平台代码共享。本文后面会用具体代码来逐个阐述。</p><p><em>App和Scene都是通过各自的functionBuilder来解析的，也就是说，新的模板从程序的入口开始便是使用DSL来描述的。</em></p><h2 id="程序系统事件响应">程序系统事件响应</h2><p>由于去除了AppDelegate.swift和SceneDelegate.swift，SwiftUI2.0提供了新的方法来让程序响应系统事件。</p><p><strong>针对AppDelegate.swift</strong></p><p>在iOS系统下，通过使用@UIApplicationDelegateAdaptor可以方便的实现之前AppDelegate.swfit中提供的功能：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NewAllApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">  @<span class="type">UIApplicationDelegateAdaptor</span>(<span class="type">AppDelegate</span>.<span class="keyword">self</span>) <span class="keyword">var</span> appDelegate</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Hello world"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>:<span class="title">NSObject</span>,<span class="title">UIApplicationDelegate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"launch"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>由于目前还是测试版，虽然很多的事件已经定义，但现在并没有响应。估计很快会增加修改过来</em></p><p><strong>针对SceneDelegate.swift</strong></p><p>通过新增添的EnvironmentKey <strong>scenePhase</strong> 和新的**.onChange** 方法，SwiftUI提供了一个更加有趣的场景事件解决方案：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NewAllApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.scenePhase) <span class="keyword">var</span> phase</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">           <span class="type">ContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .onChange(of: phase)&#123;phase <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">switch</span> phase&#123;</span><br><span class="line">                <span class="keyword">case</span> .active:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"active"</span>)</span><br><span class="line">                <span class="keyword">case</span> .inactive:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"inactive"</span>)</span><br><span class="line">                <span class="keyword">case</span> .background:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"background"</span>)</span><br><span class="line">                @unknown <span class="keyword">default</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"for future"</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>同样是由于测试版的原因，该响应目前并没有完成。不过这段代码目前来看是iOS和macOS都通用的</em></p><h2 id="预置场景">预置场景</h2><ul><li><p><strong>WKNotificationScene</strong><br>仅适用于watchOS7.0，用于响应指定类别的远程或本地通知。目前还没有研究。</p></li><li><p><strong>WindowGroup</strong></p><p>最常用的场景，可以呈现一组结构相同的窗口。使用该场景，我们无需在代码上做修改，只需要在项目中设定是否支持多窗口，系统将会按照运行平台的特性自动管理。</p><p>在iOS中，只能呈现一个运行窗口。</p><p>在PadOS中（如打开多窗口支持），最多可以打开两个运行窗口，可以分屏显示，也可以全屏独立显示。</p><p>在macOS中，可以打开多个窗口，并通过程序菜单中的窗口菜单来进行多窗口管理。</p><p>最开始的代码在三个平台下的状态：</p><p><img src="./windowGroup.png" alt="windowGroup"><br>如果在一个WindowGroup里加入多个View,呈现状态有点类似VStack。</p><p>在一个Scene中加入多个WindowGroup，只有最前面的可以被显示。</p></li></ul><ul><li><p><strong>DocumentGroup</strong></p><p>创建一个可处理指定文件类型的窗口。在iOS和PadOS下都首先会呈现文件管理器，点击文件，进入对应的View来处理。macOS下，通过菜单中的文件操作来选择或创建文件。</p><p>通过创建一个符合FileDocument的结构来定义支持哪种格式，以及打开和保存的工作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//纯文本格式文件。write的方法用于描述如何写入文件，如果不需写入可为空。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TextFile</span>: <span class="title">FileDocument</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> readableContentTypes = [<span class="type">UTType</span>.plainText]</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">""</span></span><br><span class="line">    <span class="keyword">init</span>(initialText: <span class="type">String</span> = <span class="string">""</span>) &#123;</span><br><span class="line">        text = initialText</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(fileWrapper: <span class="type">FileWrapper</span>, contentType: <span class="type">UTType</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> data = fileWrapper.regularFileContents &#123;</span><br><span class="line">            text = <span class="type">String</span>(decoding: data, <span class="keyword">as</span>: <span class="type">UTF8</span>.<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(to fileWrapper: <span class="keyword">inout</span> FileWrapper, contentType: UTType)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="type">Data</span>(text.utf8)</span><br><span class="line">        <span class="keyword">let</span> file = <span class="type">FileWrapper</span>(regularFileWithContents: data)</span><br><span class="line">        fileWrapper = file</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//图片文件，由于需要转换成UIImage，该代码只支持iOS或PadOS</span></span><br><span class="line">#<span class="keyword">if</span> os(iOS)</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ImageFile</span>: <span class="title">FileDocument</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> readableContentTypes = [<span class="type">UTType</span>.image]</span><br><span class="line">    <span class="keyword">var</span> image = <span class="type">UIImage</span>()</span><br><span class="line">    <span class="keyword">init</span>(initialImage: <span class="type">UIImage</span> = <span class="type">UIImage</span>()) &#123;</span><br><span class="line">        image = initialImage</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">init</span>(fileWrapper: <span class="type">FileWrapper</span>, contentType: <span class="type">UTType</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> data = fileWrapper.regularFileContents &#123;</span><br><span class="line">            image =   <span class="type">UIImage</span>(data: data) ?? <span class="type">UIImage</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(to fileWrapper: <span class="keyword">inout</span> FileWrapper, contentType: UTType)</span></span> <span class="keyword">throws</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line">#<span class="keyword">if</span> os(iOS)</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line">#endif</span><br><span class="line"><span class="keyword">import</span> UniformTypeIdentifiers</span><br><span class="line"></span><br><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NewAllApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">   @<span class="type">SceneBuilder</span> <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="comment">//可读写</span></span><br><span class="line">        <span class="type">DocumentGroup</span>(newDocument: <span class="type">TextFile</span>()) &#123; file <span class="keyword">in</span></span><br><span class="line">                <span class="type">TextEditorView</span>(document: file.$document)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #<span class="keyword">if</span> os(iOS)</span><br><span class="line">        <span class="comment">//只读</span></span><br><span class="line">        <span class="type">DocumentGroup</span>(viewing: <span class="type">ImageFile</span>.<span class="keyword">self</span>) &#123; file <span class="keyword">in</span></span><br><span class="line">                <span class="type">ImageViewerView</span>(file: file.$document)</span><br><span class="line">          &#125;</span><br><span class="line">        #endif</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TextEditorView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> document: <span class="type">TextFile</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>&#123;</span><br><span class="line">        <span class="type">TextEditor</span>(text: $document.text)</span><br><span class="line">            .padding()</span><br><span class="line">        &#125;</span><br><span class="line">        .background(<span class="type">Color</span>.gray)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> os(iOS)</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ImageViewerView</span>:<span class="title">View</span></span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> document:<span class="type">ImageFile</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span>&#123;</span><br><span class="line">        <span class="type">Image</span>(uiImage: document.image)</span><br><span class="line">            .resizable(resizingMode: .stretch)</span><br><span class="line">            .aspectRatio(contentMode: .fit)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></li></ul><p><img src="./documentGroup.png" alt="DocumentGroup"><br>可以将多个DocumentGroup放入Scene中，程序将会一并支持每个DocumentGroup所定义的文件类型。上述代码使程序可以创建、编辑纯文本文件，并且可以浏览图片文件。</p><p>在macOS上，需要在macOS.entitlements中设置com.apple.security.files.user-selected.read-write为真才能完成写入。</p><p>当在Scene中加入多个场景时，需要使用@SceneBuilder或用Group将多个场景涵盖起来。</p><p>macOS下当同时加入WindowGroup和DocumentGroup时，两个功能都可以正常运行。iOS或PadOS下，只有顺序在最前面的被显示。</p><p><em>由于测试版的原因，目前仍有大量的功能无法实现或有问题。比如仍无法在iOS上通过fileDocument提供的filename来设置文件名，或者无法在创建新文件时选择格式等</em></p><ul><li><p><strong>Settings</strong></p><p>只用于macOS,用于编写程序的偏好设置窗口。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> os(macOS)</span><br><span class="line">    <span class="type">Settings</span>&#123;</span><br><span class="line">      <span class="type">Text</span>(<span class="string">"偏好设置"</span>).padding(.all, <span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><img src="./settings.png" alt="Settings"></p></li></ul><h2 id="其他">其他</h2><ul><li><strong>onChange</strong><br>监视指定的值，在值改变时执行指定的action。在scenePhase的用法介绍中有使用的范例</li><li><strong>onCommands</strong><br>在macOS下设置程序的菜单。具体的使用方法请查看<a href="http://www.fatbobman.com/article/commands/">SwiftUI2.0 —— Commands（macOS菜单）</a></li><li><strong>defaultAppStorage</strong><br>如果不想使用系统缺省UserDefault.standard，可以自行设置存储位置，使用的几率不高。</li></ul><h2 id="小结">小结</h2><p>至此，本文简单介绍了SwiftUI2.0新增的App和Scene，下篇文章我们将探讨在新的层次结构下如何组织我们代码的Data Flow。</p><p><em>当前的@AppBuilder和@SceneBuilder的功能都十分的基础，不包含任何的逻辑判断功能，因此目前我还没有办法实现根据条件来选择性的展示所需的Scene。相信苹果应该会在未来增加这样的能力</em></p><p><em>本文的代码为了能够在多平台使用，所以增加了不少编译判断，如果你只是在iOS,或macOS下开发SwiftUI，则可根据各自平台简化代码。另外Xcode12中的代码补全对于Target的设定很敏感，如果你发现无法对某些平台的特定语句进行补全，请查看是否将Scheme设置到对应的平台。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文简单介绍了SwiftUI2.0中全新提供的App协议、Scene协议，浅谈了在全新的代码结构下如何组织Data Flow，并提供了SwiftUI2.0中预置的Scene的一些使用示例。&lt;/p&gt;
&lt;p&gt;当前运行环境为 Xcode Version 
      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="iOS" scheme="http://www.fatbobman.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI2.0 —— Commands（macOS菜单）</title>
    <link href="http://www.fatbobman.com/article/commands/"/>
    <id>http://www.fatbobman.com/article/commands/</id>
    <published>2020-06-27T00:47:54.000Z</published>
    <updated>2020-07-08T00:53:56.108Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了SwiftUI 2.0中，如何为macOS平台添加菜单。</p><p>当前运行环境为 Xcode Version 12.0 beta (12A6159), macOS Big Sur 11.0 Beta版(20A4299v)。</p></blockquote><p>苹果在SwiftUI2.0中增加了Multiplatform项目模板，使得同一套代码，仅需少量的适配便可以同时满足iOS以及macOS的需要。对于macOS上运行的app,拥有自定义的菜单是一个十分重要的平台特征。对于没有macOS开发经验的我来说，学习如何设计开发菜单变得十分有趣且必要。</p><h2 id="基础">基础</h2><p>在SwiftUI下为app添加菜单十分方便，下面的代码便可以为app添加一个最基础的菜单。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CommandExampleApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">           <span class="type">ContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .commands&#123;</span><br><span class="line">           <span class="type">Menu</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Menu</span>:<span class="title">Commands</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Commands</span>&#123;</span><br><span class="line">        <span class="type">CommandMenu</span>(<span class="string">"My Menu"</span>)&#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"menu1"</span>)&#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"menu1"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过创建一个符合Commands协议的结构来描述你要在app中添加的自定义菜单项</p><p><img src="./test1.png" alt="test1"></p><h2 id="几个概念">几个概念</h2><ul><li><p><strong>@CommandBuilder</strong></p><p>SwiftUI2.0中，苹果为我来带来了很多新的function builder。Menu中的body，其实就是一个@CommandsBuilder。我们可以通过使用内置的语句通过DSL的方式，方便的定义自己所需的菜单。DSL的好处是简单明了，不过功能也有所限定，目前@CommandsBuilder支持的方法比较少，并不支持逻辑判断。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCommand</span>:<span class="title">Commands</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果需要多个菜单列，需在body前显式注明@CommandsBuilder，或者使用Group，这一方法，同样使用与其他functionBuilder的描述。</span></span><br><span class="line">    @<span class="type">CommandsBuilder</span> <span class="keyword">var</span> body: some <span class="type">Commands</span>&#123;</span><br><span class="line">        <span class="comment">//每个CommandMenu都是一个菜单列</span></span><br><span class="line">        <span class="type">CommandMenu</span>(<span class="string">"Menu1"</span>)&#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Test1"</span>)&#123;</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">"test2"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="type">Button</span>(<span class="string">"Test2"</span>)&#123;</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">"test2"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">CommandMenu</span>(<span class="string">"Menu2"</span>)&#123;</span><br><span class="line">            <span class="type">Button</span>(action: test1&#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"😃Button"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"test command"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>CommandMenu</strong></p><p>CommandMenu是一个菜单列，在同一个CommandMenu中，你可以定义多个Button。CommandMenu中的Content是符合View协议的，也就是说，View中不少手段、控件都可以被用来描述菜单的具体呈现。我们可以像编写View一样来编写菜单（比如设置字体、颜色、循环、判断等等）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CommandMenu</span>(<span class="string">"Menu"</span>)&#123;</span><br><span class="line">  <span class="type">Button</span>(<span class="string">"test1"</span>)&#123;&#125;</span><br><span class="line">  <span class="type">Divider</span>()</span><br><span class="line">  <span class="type">Button</span>(action:&#123;&#125;)&#123;<span class="type">Text</span>(<span class="string">"test2"</span>).foregroundColor(.red)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>Button</strong></p><p>菜单中单个选项的实现方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">Button</span>(action: &#123;&#125;)&#123;</span><br><span class="line">   <span class="type">HStack</span>&#123;</span><br><span class="line">       <span class="type">Text</span>(<span class="string">"🎱"</span>).foregroundColor(.blue)</span><br><span class="line">       <span class="type">Divider</span>().padding(.leading,<span class="number">10</span>)</span><br><span class="line">       <span class="type">Text</span>(<span class="string">"Button"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>MenuButton</strong></p><p>子菜单的实现方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CommandMenu</span>(<span class="string">"Test"</span>)&#123;</span><br><span class="line">           <span class="type">Button</span>(action:&#123;test1()&#125;)&#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"test1"</span>).foregroundColor(.black)</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">            #<span class="keyword">if</span> os(macOS)</span><br><span class="line">            <span class="type">MenuButton</span>(<span class="string">"Switch Selection"</span>)&#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"one"</span>)&#123;</span><br><span class="line">                    store.changeState(.one)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"two"</span>)&#123;</span><br><span class="line">                    store.changeState(.two)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"three"</span>)&#123;</span><br><span class="line">                    store.changeState(.three)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            #endif</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>.commands</strong></p><p>Scene的方法，为场景添加菜单。commands中允许添加多个符合Commands协议的菜单定义。所有定义的菜单都会一并显示。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WindowGroup</span> &#123;</span><br><span class="line">    <span class="type">RootView</span>()</span><br><span class="line">        .environmentObject(store)</span><br><span class="line">&#125;</span><br><span class="line">.commands&#123;</span><br><span class="line">    <span class="type">OtherMenu</span>()</span><br><span class="line">    <span class="type">Menu</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>keyboardShortcut</strong></p><p>为菜单上的选项添加快捷键。通过modifiers设置需要配合的按键，.help为选项添加悬停帮助</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(action:&#123;test1()&#125;)</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="type">Text</span>(<span class="string">"test1"</span>).foregroundColor(.black)</span><br><span class="line">        &#125;</span><br><span class="line">         .keyboardShortcut(<span class="string">"1"</span>, modifiers: [.command,.shift])</span><br><span class="line">         .help(<span class="string">"help test1"</span>)</span><br><span class="line">                </span><br><span class="line"><span class="type">Button</span>(<span class="string">"test2"</span>, action: test2)</span><br><span class="line">         .keyboardShortcut(<span class="string">"2"</span>, modifiers: .command)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>CommandGroup</strong></p><p>在系统提供的默认菜单选项上添加自定义功能。通过replacing,before,after来决定是替换原选项还是设置在指定选项位置之后或之前。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在系统预置的帮助菜单栏下，添加一个自己的选项</span></span><br><span class="line"><span class="type">CommandGroup</span>(replacing: <span class="type">CommandGroupPlacement</span>.appInfo, addition: &#123;<span class="type">Button</span>(<span class="string">"replace"</span>)&#123;&#125;&#125;)</span><br><span class="line"><span class="type">CommandGroup</span>(before: <span class="type">CommandGroupPlacement</span>.help, addition: &#123;<span class="type">Button</span>(<span class="string">"before"</span>)&#123;&#125;&#125;)</span><br><span class="line"><span class="type">CommandGroup</span>(after: <span class="type">CommandGroupPlacement</span>.newItem, addition: &#123;<span class="type">Button</span>(<span class="string">"after"</span>)&#123;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="例子">例子</h2><p>这里简单的例程展示了如何在menu如何通过调用store来影响app的行为。并做了简单的多平台适配。在macOS平台下，通过选择子菜单中不同的选项来影响显示文本。在iOS下通过picker来实现。</p><p><a href="https://github.com/fatbobman/CommandExample" target="_blank" rel="noopener">可在此处下载完成代码</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CommandExampleApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">var</span> store = <span class="type">Store</span>()</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">RootView</span>()</span><br><span class="line">                .environmentObject(store)</span><br><span class="line">        &#125;</span><br><span class="line">        .commands&#123;</span><br><span class="line">          #<span class="keyword">if</span> os(macOS) </span><br><span class="line">            <span class="type">MyCommand</span>(store: store)</span><br><span class="line">            <span class="type">OtherMenu</span>()</span><br><span class="line">          #endif</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> os(macOS)</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCommand</span>:<span class="title">Commands</span></span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> store:<span class="type">Store</span></span><br><span class="line">    @<span class="type">CommandsBuilder</span> <span class="keyword">var</span> body: some <span class="type">Commands</span>&#123;</span><br><span class="line">        <span class="type">CommandMenu</span>(<span class="string">"Test"</span>)&#123;</span><br><span class="line">            <span class="type">Section</span>&#123;</span><br><span class="line">                <span class="type">Button</span>(action:&#123;test1()&#125;)&#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"test1"</span>).foregroundColor(.black)</span><br><span class="line">                &#125;</span><br><span class="line">                .keyboardShortcut(<span class="string">"1"</span>, modifiers: [.command,.shift])</span><br><span class="line">                .help(<span class="string">"help test1"</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Button</span>(<span class="string">"test2"</span>, action: test2)</span><br><span class="line">                    .keyboardShortcut(<span class="string">"2"</span>, modifiers: .command)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">switch</span> store.selection&#123;</span><br><span class="line">            <span class="keyword">case</span> .one:</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"one"</span>)</span><br><span class="line">            <span class="keyword">case</span> .two:</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"two"</span>)</span><br><span class="line">            <span class="keyword">case</span> .three:</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"three"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Divider</span>().padding(.horizontal, <span class="number">10</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">"other"</span>)&#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"other command"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">3</span>)&#123; i <span class="keyword">in</span></span><br><span class="line">                <span class="type">Button</span>(<span class="string">"button<span class="subst">\(i)</span>"</span>)&#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"button<span class="subst">\(i)</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">MenuButton</span>(<span class="string">"Switch Selection"</span>)&#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"one"</span>)&#123;</span><br><span class="line">                    store.changeState(.one)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"two"</span>)&#123;</span><br><span class="line">                    store.changeState(.two)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"three"</span>)&#123;</span><br><span class="line">                    store.changeState(.three)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">CommandMenu</span>(<span class="string">"Menu2"</span>)&#123;</span><br><span class="line">            <span class="type">Button</span>(action: &#123;&#125;)&#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"😃Button"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//向现有的菜单项中增加功能</span></span><br><span class="line">        <span class="type">CommandGroup</span>(after: <span class="type">CommandGroupPlacement</span>.help, addition: &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"new help button"</span>)&#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"new help"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"test1 command"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"test2 command"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OtherMenu</span>:<span class="title">Commands</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Commands</span>&#123;</span><br><span class="line">        <span class="type">CommandMenu</span>(<span class="string">"otherMenu"</span>)&#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"abc"</span>)&#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"abc"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:<span class="title">ObservableObject</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Selection</span></span>&#123;</span><br><span class="line">        <span class="keyword">case</span> one,two,three</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> selection:<span class="type">Selection</span> = .one</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">changeState</span><span class="params">(<span class="number">_</span> selection:Selection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.selection = selection</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充打开新窗口">补充（打开新窗口）</h2><p>我尝试在菜单按钮中打开新的View，不过并没有找到原生的SwiftUI式的方法。我更希望@SceneBuilder能够支持逻辑判断，这样可以任意在WindowGroup组织我想显示的View了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开新的View</span></span><br><span class="line"><span class="type">Button</span>(<span class="string">"other window"</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other command"</span>)</span><br><span class="line">    <span class="keyword">let</span> contentView =</span><br><span class="line">        <span class="type">VStack</span>&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"New Window"</span>).padding(.all, <span class="number">10</span>)</span><br><span class="line">        &#125;.frame(minWidth: <span class="number">200</span>, minHeight: <span class="number">200</span>, alignment: .center)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">NSWindow</span>!</span><br><span class="line">    <span class="comment">// Create the window and set the content view.</span></span><br><span class="line">    window = <span class="type">NSWindow</span>(</span><br><span class="line">        contentRect: <span class="type">NSRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">480</span>, height: <span class="number">300</span>),</span><br><span class="line">        styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],</span><br><span class="line">        backing: .buffered, <span class="keyword">defer</span>: <span class="literal">false</span>)</span><br><span class="line">    window.isReleasedWhenClosed = <span class="literal">false</span></span><br><span class="line">    window.center()</span><br><span class="line">    window.setFrameAutosaveName(<span class="string">"Main Window"</span>)</span><br><span class="line">    window.contentView = <span class="type">NSHostingView</span>(rootView: contentView)</span><br><span class="line">    window.makeKeyAndOrderFront(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开系统文件选择面板</span></span><br><span class="line"><span class="type">Button</span>(<span class="string">"open panel"</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> panel = <span class="type">NSOpenPanel</span>()</span><br><span class="line">          panel.nameFieldLabel = <span class="string">"open test:"</span></span><br><span class="line">          panel.begin &#123; response <span class="keyword">in</span></span><br><span class="line">              <span class="keyword">if</span> response == <span class="type">NSApplication</span>.<span class="type">ModalResponse</span>.<span class="type">OK</span>, <span class="keyword">let</span> fileUrl = panel.url &#123;</span><br><span class="line">                  <span class="built_in">print</span>(fileUrl)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="当前的问题">当前的问题</h2><p>由于目前还处在早期的测试阶段，菜单的实现和功能上还有些不足之处，以下是我现在比较在意的：</p><ul><li>Button文本的缺省颜色和系统的菜单选项颜色不同。需要手工设置</li><li>ShortCut的颜色和系统菜单的颜色不同</li><li>Divider的颜色和系统菜单不同</li><li>MenuButton在多平台开发时，必须添加编译注释。而其他比如创建Commands，.commands等都不需要</li><li>@CommandBuilder和@SceneBuilder目前都不支持判断。因此无法通过程序动态的添加或减少一个菜单列。不过从.command中可以添加多个Commands结构来看，后续应该是有这样的打算的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍了SwiftUI 2.0中，如何为macOS平台添加菜单。&lt;/p&gt;
&lt;p&gt;当前运行环境为 Xcode Version 12.0 beta (12A6159), macOS Big Sur 11.0 Beta版(20A4299v)。&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="SwiftUI" scheme="http://www.fatbobman.com/tags/SwiftUI/"/>
    
      <category term="iOS" scheme="http://www.fatbobman.com/tags/iOS/"/>
    
  </entry>
  
</feed>
