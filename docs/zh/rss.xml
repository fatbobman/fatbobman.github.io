<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss/styles.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>肘子的 Swift 记事本 ｜ Fatbobman&apos;s Blog</title><description>中文首页｜肘子的 Swift 记事本｜Fatbobman&apos;s Blog，分享与 Swift、SwiftUI、Core Data、Swift Data 有关的内容，也会涉及开发工具、AI 等其他内容。全部文章均为原创，转载需联系本人</description><link>https://fatbobman.com/</link><language>zh</language><follow_challenge><feedId>55086689794490368</feedId><userId>60878761419746304</userId></follow_challenge><item><title>SwiftData 使用前必须了解的关键问题</title><link>https://fatbobman.com/zh/posts/key-considerations-before-using-swiftdata/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/key-considerations-before-using-swiftdata/</guid><description>本文旨在为对 SwiftData 感兴趣的开发者提供一份指南，帮助你了解 SwiftData 的优势与局限，并根据项目需求做出明智的技术选择。无论你是考虑在新项目中引入 SwiftData，还是计划从其他持久化方案迁移，以下内容都将为你的决策提供有价值的参考。</description><pubDate>Wed, 12 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;本文旨在为对 SwiftData 感兴趣的开发者提供一份指南，帮助你了解 SwiftData 的优势与局限，并根据项目需求做出明智的技术选择。无论你是考虑在新项目中引入 SwiftData，还是计划从其他持久化方案迁移，以下内容都将为你的决策提供有价值的参考。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/key-considerations-before-using-swiftdata/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><author>Fatbobman</author></item><item><title>期待与失望的循环：苹果的 AI 困境与韧性 - 肘子的 Swift 周报 #74</title><link>https://fatbobman.com/zh/weekly/issue-074/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-074/</guid><description>几天前苹果宣布将 “More Personalized Siri” 功能推迟到明年，再结合始终不见踪影的 Swift Assist，很显然，苹果没有达成其在 WWDC 2024 上构建的 AI 愿景。至少在大模型的应用场景上，苹果没有展现出一贯的快速跟随能力。</description><pubDate>Mon, 10 Mar 2025 02:00:00 GMT</pubDate><content:encoded>&lt;p&gt;几天前苹果宣布将 “More Personalized Siri” 功能推迟到明年，再结合始终不见踪影的 Swift Assist，很显然，苹果没有达成其在 WWDC 2024 上构建的 AI 愿景。至少在大模型的应用场景上，苹果没有展现出一贯的快速跟随能力。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-074/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>让 @State 实现懒加载</title><link>https://fatbobman.com/zh/posts/lazy-initialization-state-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/lazy-initialization-state-in-swiftui/</guid><description>Observation 框架为 Swift 带来了原生的属性级观察能力，有效避免了 SwiftUI 中因无关属性变化而引发的多余视图更新，从而提升了应用性能。但由于 @State 并未提供类似 @StateObject 的懒加载构造方式，在某些场景下会因实例过早构建而引起性能损失甚至逻辑问题。本文将探讨如何为 Observable 实例定制一个支持懒加载的 @State 解决方案。</description><pubDate>Wed, 05 Mar 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;Observation 框架为 Swift 带来了原生的属性级观察能力，有效避免了 SwiftUI 中因无关属性变化而引发的多余视图更新，从而提升了应用性能。但由于 @State 并未提供类似 @StateObject 的懒加载构造方式，在某些场景下会因实例过早构建而引起性能损失甚至逻辑问题。本文将探讨如何为 Observable 实例定制一个支持懒加载的 @State 解决方案。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/lazy-initialization-state-in-swiftui/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>在嘉年华中感受苹果开发者的热情 - 肘子的 Swift 周报 #73</title><link>https://fatbobman.com/zh/weekly/issue-073/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-073/</guid><description>为期两天的 Let&apos;s Vision 2025 在欢乐的氛围中圆满落幕，这是我作为讲师第二次参与此项盛会。与去年相比，今年的活动不仅全面覆盖了苹果开发生态，还融入了当下最炙手可热的 AI 领域内容。</description><pubDate>Tue, 04 Mar 2025 01:00:00 GMT</pubDate><content:encoded>&lt;p&gt;为期两天的 Let&apos;s Vision 2025 在欢乐的氛围中圆满落幕，这是我作为讲师第二次参与此项盛会。与去年相比，今年的活动不仅全面覆盖了苹果开发生态，还融入了当下最炙手可热的 AI 领域内容。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-073/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Animatable 协议：让 SwiftUI 动画不再“失控”</title><link>https://fatbobman.com/zh/posts/animatable-protocol-taming-unruly-swiftui-animation/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/animatable-protocol-taming-unruly-swiftui-animation/</guid><description>在 SwiftUI 开发中，你是否遇到过看似正确的动画代码却无法按预期工作的情况？或者在某些 iOS 版本上完美运行的动画，却在其他版本上表现异常？这些令人困扰的动画问题往往可以通过一个强大而低调的工具来解决 —— Animatable 协议。</description><pubDate>Wed, 26 Feb 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;在 SwiftUI 开发中，你是否遇到过看似正确的动画代码却无法按预期工作的情况？或者在某些 iOS 版本上完美运行的动画，却在其他版本上表现异常？这些令人困扰的动画问题往往可以通过一个强大而低调的工具来解决 —— Animatable 协议。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/animatable-protocol-taming-unruly-swiftui-animation/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>不止于 X：Swift 社区拥抱 Mastodon 和 Bluesky - 肘子的 Swift 周报 #72</title><link>https://fatbobman.com/zh/weekly/issue-072/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-072/</guid><description>在 2 月 21 日，Swift 社区正式在 Bluesky 上开设了官方账户，同时在其早在 2022 年就创建的 Mastodon 账户上首次发布了信息。表面上看这似乎只是一个普通的社交媒体动态，但实际上这个决定在 Swift 社区中已经经过了一段时间的讨论和酝酿，最近的一系列事件更是加速了这一进程。</description><pubDate>Mon, 24 Feb 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在 2 月 21 日，Swift 社区正式在 Bluesky 上开设了官方账户，同时在其早在 2022 年就创建的 Mastodon 账户上首次发布了信息。表面上看这似乎只是一个普通的社交媒体动态，但实际上这个决定在 Swift 社区中已经经过了一段时间的讨论和酝酿，最近的一系列事件更是加速了这一进程。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-072/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>从 Host 到 Serverless: 博客架构升级实践</title><link>https://fatbobman.com/zh/posts/from-host-to-serverless/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/from-host-to-serverless/</guid><description>在过去的一个半月里，我对博客进行了一系列的调整，涉及发布机制、代码架构和版式设计等多个方面。这些调整不仅提升了博客的性能和用户体验，也让内容维护和更新变得更加高效。本文将简单记录一下本次调整的主要内容。</description><pubDate>Wed, 19 Feb 2025 14:20:00 GMT</pubDate><content:encoded>&lt;p&gt;在过去的一个半月里，我对博客进行了一系列的调整，涉及发布机制、代码架构和版式设计等多个方面。这些调整不仅提升了博客的性能和用户体验，也让内容维护和更新变得更加高效。本文将简单记录一下本次调整的主要内容。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/from-host-to-serverless/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>web</category><author>Fatbobman</author></item><item><title>用 Swift 来构建安卓应用 - 肘子的 Swift 周报 #71</title><link>https://fatbobman.com/zh/weekly/issue-071/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-071/</guid><description>近日，Swift 社区成立了 Swift on Android Community Workgroup，旨在推动 Swift 在 Android 生态中的应用。这一举措与 Arc 浏览器推动 Swift 在 Windows 平台发展的路径类似，专注于跨平台开发的 Skip 团队也有成员加入了该工作组。虽然目前还处于起步阶段，但这无疑标志着 Swift 社区正在为打破平台界限迈出重要一步。</description><pubDate>Tue, 18 Feb 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;近日，Swift 社区成立了 Swift on Android Community Workgroup，旨在推动 Swift 在 Android 生态中的应用。这一举措与 Arc 浏览器推动 Swift 在 Windows 平台发展的路径类似，专注于跨平台开发的 Skip 团队也有成员加入了该工作组。虽然目前还处于起步阶段，但这无疑标志着 Swift 社区正在为打破平台界限迈出重要一步。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-071/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>精确掌控 SwiftUI 滚动：自定义 Paging 实现</title><link>https://fatbobman.com/zh/posts/mastering-swiftui-scrolling-implementing-custom-paging/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/mastering-swiftui-scrolling-implementing-custom-paging/</guid><description>从 iOS 17 开始，SwiftUI 引入了 scrollTargetBehavior，让开发者能够更精准地控制滚动行为。无论是实现视图停靠对齐，还是自定义翻页效果，scrollTargetBehavior 都提供了强大的支持。更重要的是，开发者可以通过自定义 ScrollTargetBehavior 来满足特定的需求。本文将从一个实际案例出发，逐步解析如何使用 scrollTargetBehavior，并最终实现一个自定义的滚动控制逻辑。</description><pubDate>Wed, 12 Feb 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;从 iOS 17 开始，SwiftUI 引入了 scrollTargetBehavior，让开发者能够更精准地控制滚动行为。无论是实现视图停靠对齐，还是自定义翻页效果，scrollTargetBehavior 都提供了强大的支持。更重要的是，开发者可以通过自定义 ScrollTargetBehavior 来满足特定的需求。本文将从一个实际案例出发，逐步解析如何使用 scrollTargetBehavior，并最终实现一个自定义的滚动控制逻辑。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/mastering-swiftui-scrolling-implementing-custom-paging/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>反馈与交流 - 肘子的 Swift 周报 #70</title><link>https://fatbobman.com/zh/weekly/issue-070/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-070/</guid><description>近日，我收到苹果发来的一封邮件，告知我去年四月反馈的一个问题现已修复。令人欣喜的是，此次修复不仅适用于最新系统，还向下兼容至 iOS 17.5、macOS 14.5、tvOS 17.5、watchOS 10.5 以及 visionOS 1.3。</description><pubDate>Mon, 10 Feb 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;近日，我收到苹果发来的一封邮件，告知我去年四月反馈的一个问题现已修复。令人欣喜的是，此次修复不仅适用于最新系统，还向下兼容至 iOS 17.5、macOS 14.5、tvOS 17.5、watchOS 10.5 以及 visionOS 1.3。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-070/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>为何 Swift 6 中某些视图修饰器无法使用 @State 属性</title><link>https://fatbobman.com/zh/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/</guid><description>在 Xcode 16 中，为了改善 SwiftUI 在 Swift 6 模式下的表现，苹果对 SwiftUI 框架的 API 进行了多项调整，以满足更严格的并发检查要求。其中最显著的变化是将 View 协议全面标注为 @MainActor。这些优化虽然总体上改善了开发者在 Swift 6 模式下的编程体验，但也在某些特定场景中引发了一些看似反常的编译错误。本文将详细探讨为什么某些视图修饰器中无法直接使用 @State 属性值，并提供相应的解决方案。</description><pubDate>Tue, 24 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;在 Xcode 16 中，为了改善 SwiftUI 在 Swift 6 模式下的表现，苹果对 SwiftUI 框架的 API 进行了多项调整，以满足更严格的并发检查要求。其中最显著的变化是将 View 协议全面标注为 @MainActor。这些优化虽然总体上改善了开发者在 Swift 6 模式下的编程体验，但也在某些特定场景中引发了一些看似反常的编译错误。本文将详细探讨为什么某些视图修饰器中无法直接使用 @State 属性值，并提供相应的解决方案。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>SwiftUI onAppear 异常调用的陷阱与应对策略</title><link>https://fatbobman.com/zh/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/</guid><description>onAppear 是 SwiftUI 中极其关键的生命周期方法，用于在视图呈现时注入关键逻辑。由于视图实例可能会频繁地被创建和重建，开发者通常会选择在这些方法中准备数据、执行初始化操作。理论上，这些生命周期方法的调用时机应当是可预测和一致的。然而，在某些特定场景下，onAppear 可能会出现非预期的、不必要的调用，这不仅可能导致性能开销，更可能引发应用状态的不可控变化。本文将揭示这一容易被忽视的 SwiftUI 行为陷阱，并提供临时的应对策略。</description><pubDate>Wed, 18 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;onAppear 是 SwiftUI 中极其关键的生命周期方法，用于在视图呈现时注入关键逻辑。由于视图实例可能会频繁地被创建和重建，开发者通常会选择在这些方法中准备数据、执行初始化操作。理论上，这些生命周期方法的调用时机应当是可预测和一致的。然而，在某些特定场景下，onAppear 可能会出现非预期的、不必要的调用，这不仅可能导致性能开销，更可能引发应用状态的不可控变化。本文将揭示这一容易被忽视的 SwiftUI 行为陷阱，并提供临时的应对策略。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Core Data 的模型继承</title><link>https://fatbobman.com/zh/posts/model-inheritance-in-core-data/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/model-inheritance-in-core-data/</guid><description>Core Data 的一个卓越特点是让开发者能够以更加接近面向对象编程的方式声明数据模型，同时无需关心底层的存储实现细节。在这个框架中，模型继承是一个尤为重要的机制。本文将深入探讨模型继承的核心概念，包括父实体（Parent Entity）、子实体（Sub Entity）和抽象实体（Abstract Entity）；我们将分析它们的优缺点，并探讨在不直接使用这些功能时如何实现类似的效果。</description><pubDate>Wed, 11 Dec 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Core Data 的一个卓越特点是让开发者能够以更加接近面向对象编程的方式声明数据模型，同时无需关心底层的存储实现细节。在这个框架中，模型继承是一个尤为重要的机制。本文将深入探讨模型继承的核心概念，包括父实体（Parent Entity）、子实体（Sub Entity）和抽象实体（Abstract Entity）；我们将分析它们的优缺点，并探讨在不直接使用这些功能时如何实现类似的效果。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/model-inheritance-in-core-data/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><category>core data</category><author>Fatbobman</author></item><item><title>Typefully：轻松告别繁琐的社交媒体发布</title><link>https://fatbobman.com/zh/posts/typefully-say-goodbye-to-the-hassles-of-social-media-posting/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/typefully-say-goodbye-to-the-hassles-of-social-media-posting/</guid><description>随着社交媒体渠道的日益丰富，一个网络用户不知不觉间已拥有多个不同的社交账号。对于内容创作者和企业账号管理者而言，在各个社交平台上发布内容所需的准备工作正变得愈发繁琐。在过去的一个月里，我开始尝试使用 Typefully 来统一管理和发布多个社交平台的内容，本文中我将分享我的使用心得。</description><pubDate>Wed, 04 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;随着社交媒体渠道的日益丰富，一个网络用户不知不觉间已拥有多个不同的社交账号。对于内容创作者和企业账号管理者而言，在各个社交平台上发布内容所需的准备工作正变得愈发繁琐。在过去的一个月里，我开始尝试使用 Typefully 来统一管理和发布多个社交平台的内容，本文中我将分享我的使用心得。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/typefully-say-goodbye-to-the-hassles-of-social-media-posting/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>tools</category><category>life</category><author>Fatbobman</author></item><item><title>有意为之还是技术缺陷？SwiftUI 多层导航中的 onChange 异常</title><link>https://fatbobman.com/zh/posts/the-anomaly-of-onchange-in-swiftui-multi-layer-navigation/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/the-anomaly-of-onchange-in-swiftui-multi-layer-navigation/</guid><description>SwiftUI 提供的 onChange 修饰器，使开发者能够在视图中监听特定值的变化，并在值发生改变时执行相应的操作。直觉上，只要某个视图位于当前可见的视图树分支中（ 活动中 ），在观察的值发生变化时，对应的闭包就应该被触发。但在某些特定的导航场景下，onChange 修饰器似乎会“选择性失聪”，明明观察的值发生了变化，却诡异地保持沉默。这究竟是苹果精心设计的特性，还是一个隐藏已久的代码缺陷？本文将揭示这一现象并对开发者给予必要的提醒。</description><pubDate>Wed, 27 Nov 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;SwiftUI 提供的 onChange 修饰器，使开发者能够在视图中监听特定值的变化，并在值发生改变时执行相应的操作。直觉上，只要某个视图位于当前可见的视图树分支中（ 活动中 ），在观察的值发生变化时，对应的闭包就应该被触发。但在某些特定的导航场景下，onChange 修饰器似乎会“选择性失聪”，明明观察的值发生了变化，却诡异地保持沉默。这究竟是苹果精心设计的特性，还是一个隐藏已久的代码缺陷？本文将揭示这一现象并对开发者给予必要的提醒。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/the-anomaly-of-onchange-in-swiftui-multi-layer-navigation/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item></channel></rss>