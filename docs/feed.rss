<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss/styles.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>肘子的 Swift 记事本 ｜ Fatbobman&apos;s Blog</title><description>中文首页｜肘子的 Swift 记事本｜Fatbobman&apos;s Blog，分享与 Swift、SwiftUI、Core Data、Swift Data 有关的内容，也会涉及开发工具、AI 等其他内容。全部文章均为原创，转载需联系本人</description><link>https://fatbobman.com/</link><language>zh</language><follow_challenge><feedId>61995827536643088</feedId><userId>60878761419746304</userId></follow_challenge><item><title>从开放平台到受控生态：谷歌宣布 Android 开发者验证政策 - 肘子的 Swift 周报 #101</title><link>https://fatbobman.com/zh/weekly/issue-101/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-101/</guid><description>谷歌宣布从 2026 年 9 月起，将 Play 商店的开发者验证要求扩展到所有 Android 应用安装方式，这从根本上改变了该平台的开放分发模式。这项政策要求所有在 Google Play 之外分发应用的开发者必须向谷歌注册、提供政府身份证明并支付费用。该政策将首先在巴西、印度尼西亚、新加坡和泰国实施，2027 年扩展至全球。这代表着 Android 自诞生以来对其开放生态系统原则的最重大背离。</description><pubDate>Mon, 08 Sep 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;谷歌宣布从 2026 年 9 月起，将 Play 商店的开发者验证要求扩展到所有 Android 应用安装方式，这从根本上改变了该平台的开放分发模式。这项政策要求所有在 Google Play 之外分发应用的开发者必须向谷歌注册、提供政府身份证明并支付费用。该政策将首先在巴西、印度尼西亚、新加坡和泰国实施，2027 年扩展至全球。这代表着 Android 自诞生以来对其开放生态系统原则的最重大背离。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-101/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>用 MainActor.assumeIsolated 解决旧 API 与 Swift 6 适配问题</title><link>https://fatbobman.com/zh/posts/mainactor-assumeisolated/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/mainactor-assumeisolated/</guid><description>尽管 Swift 提供严格并发检查已有一段时间，但许多苹果官方 API 仍未对此进行充分适配，这种情况可能还会持续相当长的时间。随着 Swift 6 的逐步普及，这个问题变得愈发突出：开发者一方面希望享受 Swift 编译器带来的并发安全保障，另一方面又对如何让代码满足编译要求感到困惑。本文将通过一个 NSTextAttachmentViewProvider 的实现案例，介绍 MainActor.assumeIsolated 在特定场景下的妙用。</description><pubDate>Wed, 03 Sep 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;尽管 Swift 提供严格并发检查已有一段时间，但许多苹果官方 API 仍未对此进行充分适配，这种情况可能还会持续相当长的时间。随着 Swift 6 的逐步普及，这个问题变得愈发突出：开发者一方面希望享受 Swift 编译器带来的并发安全保障，另一方面又对如何让代码满足编译要求感到困惑。本文将通过一个 NSTextAttachmentViewProvider 的实现案例，介绍 MainActor.assumeIsolated 在特定场景下的妙用。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/mainactor-assumeisolated/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>写给这段旅程，也写给未来的自己 - 肘子的 Swift 周报 #100</title><link>https://fatbobman.com/zh/weekly/issue-100/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-100/</guid><description>一转眼，周报已经来到了第 100 期。回想 2023 年 10 月第一期时，我并没有把握自己能坚持这么久。但过去两年，通过持续创作，我收获了许多。</description><pubDate>Mon, 01 Sep 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;一转眼，周报已经来到了第 100 期。回想 2023 年 10 月第一期时，我并没有把握自己能坚持这么久。但过去两年，通过持续创作，我收获了许多。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-100/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>未来将至：人形机器人运动会 - 肘子的 Swift 周报 #99</title><link>https://fatbobman.com/zh/weekly/issue-099/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-099/</guid><description>不久前在北京举办的世界人形机器人运动会上，出现了许多令人忍俊不禁的场景：机器人对着空气挥拳、跑步时左摇右摆、踢球时相互碰撞后集体倒地。尽管这些画面看起来颇为滑稽，但回顾过去几年人形机器人的发展历程就会发现，即便当前的产品仍存在诸多不足，其进步却是惊人的。按照这样的发展速度，也许在十年甚至更短的时间内，人形机器人就将走进我们的日常生活，满足各种实际需求。</description><pubDate>Mon, 25 Aug 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;不久前在北京举办的世界人形机器人运动会上，出现了许多令人忍俊不禁的场景：机器人对着空气挥拳、跑步时左摇右摆、踢球时相互碰撞后集体倒地。尽管这些画面看起来颇为滑稽，但回顾过去几年人形机器人的发展历程就会发现，即便当前的产品仍存在诸多不足，其进步却是惊人的。按照这样的发展速度，也许在十年甚至更短的时间内，人形机器人就将走进我们的日常生活，满足各种实际需求。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-099/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>我差点失去了巴顿（我的狗狗） - 肘子的 Swift 周报 #98</title><link>https://fatbobman.com/zh/weekly/issue-098/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-098/</guid><description>巴顿已经 13 岁了。尽管大多数时候他都表现出远超同龄狗狗的活力和状态，但随着年龄增长，各种健康问题也随之而来。不久前，巴顿被检查出肺动脉高压，医生给出了针对性的治疗方案。就在我为治疗似乎初见成效而欣慰时，上周一下午，巴顿突然无法站立，大量流口水，表现出明显的心脏不适。</description><pubDate>Mon, 18 Aug 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;巴顿已经 13 岁了。尽管大多数时候他都表现出远超同龄狗狗的活力和状态，但随着年龄增长，各种健康问题也随之而来。不久前，巴顿被检查出肺动脉高压，医生给出了针对性的治疗方案。就在我为治疗似乎初见成效而欣慰时，上周一下午，巴顿突然无法站立，大量流口水，表现出明显的心脏不适。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-098/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>苹果首次在中国永久关闭了一家 Apple Store - 肘子的 Swift 周报 #97</title><link>https://fatbobman.com/zh/weekly/issue-097/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-097/</guid><description>上周六，苹果正式永久性关闭了位于中国大连的一家 Apple Store 零售店，这是苹果首次在中国关闭直营店。该店于 2015 年开业，距今正好十年。消息传出后，网络上出现了不少相关报道，其中一些将此事解读为苹果在中国经营状况的某种信号。由于该店正好位于我所在的城市，我对这个事件有一些实地了解，想分享一些不同的观察角度。</description><pubDate>Mon, 11 Aug 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;上周六，苹果正式永久性关闭了位于中国大连的一家 Apple Store 零售店，这是苹果首次在中国关闭直营店。该店于 2015 年开业，距今正好十年。消息传出后，网络上出现了不少相关报道，其中一些将此事解读为苹果在中国经营状况的某种信号。由于该店正好位于我所在的城市，我对这个事件有一些实地了解，想分享一些不同的观察角度。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-097/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Swift 6: Sendable、@unchecked Sendable、@Sendable、sending and nonsending</title><link>https://fatbobman.com/zh/posts/sendable-sending-nonsending/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/sendable-sending-nonsending/</guid><description>Swift 的并发模型引入了众多关键字，其中一些在命名和用途上颇为相似，容易让开发者感到困惑。本文将对 Swift 并发中与跨隔离域传递相关的几个关键字：Sendable、@unchecked Sendable、@Sendable、sending 和 nonsending 进行梳理，帮助大家理解它们各自的作用和使用场景。</description><pubDate>Wed, 06 Aug 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Swift 的并发模型引入了众多关键字，其中一些在命名和用途上颇为相似，容易让开发者感到困惑。本文将对 Swift 并发中与跨隔离域传递相关的几个关键字：Sendable、@unchecked Sendable、@Sendable、sending 和 nonsending 进行梳理，帮助大家理解它们各自的作用和使用场景。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/sendable-sending-nonsending/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>Default Actor Isolation：好初衷带来的新问题</title><link>https://fatbobman.com/zh/posts/default-actor-isolation/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/default-actor-isolation/</guid><description>尽管 Swift 严格并发检查的初衷是好的，但对于很多单线程场景来说，却明显增加了开发者的负担。开发者不得不在代码中添加一些并不必要的 Sendable、@MainActor 等声明，只为了满足编译器的要求。Swift 6.2 新增的 Default Actor Isolation 功能将极大地改善这种状况，减少不必要的样板代码。本文将对 Default Actor Isolation 功能进行介绍，并指出在使用该功能后需要注意的一些情况。</description><pubDate>Wed, 30 Jul 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;尽管 Swift 严格并发检查的初衷是好的，但对于很多单线程场景来说，却明显增加了开发者的负担。开发者不得不在代码中添加一些并不必要的 Sendable、@MainActor 等声明，只为了满足编译器的要求。Swift 6.2 新增的 Default Actor Isolation 功能将极大地改善这种状况，减少不必要的样板代码。本文将对 Default Actor Isolation 功能进行介绍，并指出在使用该功能后需要注意的一些情况。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/default-actor-isolation/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>Core Data 迁移事故复盘：那些被忽视的隐藏陷阱</title><link>https://fatbobman.com/zh/posts/core-data-migration-incident-analysis/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/core-data-migration-incident-analysis/</guid><description>相比一些开源框架，Core Data 和 SwiftData 虽然有苹果的官方背书，但它们的“黑盒”特性在出现异常时常令开发者束手无策，难以及时定位问题并找到有效解决方案。本文记录了一次因 Core Data 数据模型迁移导致的应用启动超时事件，分享解决方案，并深入剖析背后的成因。</description><pubDate>Wed, 23 Jul 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;相比一些开源框架，Core Data 和 SwiftData 虽然有苹果的官方背书，但它们的“黑盒”特性在出现异常时常令开发者束手无策，难以及时定位问题并找到有效解决方案。本文记录了一次因 Core Data 数据模型迁移导致的应用启动超时事件，分享解决方案，并深入剖析背后的成因。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/core-data-migration-incident-analysis/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>core data</category><author>Fatbobman</author></item><item><title>Icon Composer 见招拆招</title><link>https://fatbobman.com/zh/posts/icon-composer-tackling-challenges/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/icon-composer-tackling-challenges/</guid><description>新的 Liquid Glass 风格发布之后，苹果随即提供了用于制作符合 Liquid Glass 标准图标的 Icon Composer。从苹果的介绍来看，Icon Composer 使用非常简单明了，基本上分层把图片放进去即可，但实际使用上还是有一些细节需要小心。Megabits 以他的应用图标为例，简要的介绍一下使用过程中遇到的问题。</description><pubDate>Wed, 16 Jul 2025 14:30:00 GMT</pubDate><content:encoded>&lt;p&gt;新的 Liquid Glass 风格发布之后，苹果随即提供了用于制作符合 Liquid Glass 标准图标的 Icon Composer。从苹果的介绍来看，Icon Composer 使用非常简单明了，基本上分层把图片放进去即可，但实际使用上还是有一些细节需要小心。Megabits 以他的应用图标为例，简要的介绍一下使用过程中遇到的问题。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/icon-composer-tackling-challenges/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>在 SwiftUI 中，如何判断 Text 是否被截断？</title><link>https://fatbobman.com/zh/posts/how-to-detect-text-truncation-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/how-to-detect-text-truncation-in-swiftui/</guid><description>Text 在 SwiftUI 中大量被使用，与 UIKit/AppKit 中对应的组件相比，Text 无需配置，开箱即用，但这也意味着开发者丧失了更多对其的控制能力。在本文中，我们将通过一个实际案例来展示，如何用 SwiftUI 的方式来完成一些看似&quot;不可能&quot;的任务：在一堆给定的视图中，找出第一个文本未被截断的，并以此作为需求尺寸。</description><pubDate>Wed, 09 Jul 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;Text 在 SwiftUI 中大量被使用，与 UIKit/AppKit 中对应的组件相比，Text 无需配置，开箱即用，但这也意味着开发者丧失了更多对其的控制能力。在本文中，我们将通过一个实际案例来展示，如何用 SwiftUI 的方式来完成一些看似&quot;不可能&quot;的任务：在一堆给定的视图中，找出第一个文本未被截断的，并以此作为需求尺寸。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/how-to-detect-text-truncation-in-swiftui/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>与 AI 共舞：我的 Claude Code 一月谈</title><link>https://fatbobman.com/zh/posts/dancing-with-ai-my-month-with-claude-code/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/dancing-with-ai-my-month-with-claude-code/</guid><description>转眼间，我使用 Claude Code 已经整整一个月了。这段时间里，它迅速成为了开发者们的新宠，关于 Claude Code 的讨论充斥着我的社交媒体时间线。恰好有网友在 Discord 上让我聊聊 Claude Code，借此机会，我想梳理一下这段时间的使用感受，以及过去两年中 AI 为我的开发工作带来的便利与思考。</description><pubDate>Wed, 02 Jul 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;转眼间，我使用 Claude Code 已经整整一个月了。这段时间里，它迅速成为了开发者们的新宠，关于 Claude Code 的讨论充斥着我的社交媒体时间线。恰好有网友在 Discord 上让我聊聊 Claude Code，借此机会，我想梳理一下这段时间的使用感受，以及过去两年中 AI 为我的开发工作带来的便利与思考。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/dancing-with-ai-my-month-with-claude-code/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>ai</category><category>dev tools</category><author>Fatbobman</author></item><item><title>NotificationCenter.Message：Swift 6.2 并发安全通知的全新体验</title><link>https://fatbobman.com/zh/posts/notificationcentermessage-a-new-concurrency-safe-notification-experience-in-swift-62/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/notificationcentermessage-a-new-concurrency-safe-notification-experience-in-swift-62/</guid><description>NotificationCenter 作为 iOS 开发中的经典组件，为开发者提供了灵活的广播——订阅机制。然而，随着 Swift 并发模型的不断演进，传统基于字符串标识和 userInfo 字典的通知方式暴露出了诸多问题。为了彻底解决这些痛点，Swift 6.2 在 Foundation 中引入了全新的并发安全通知协议。它充分利用 Swift 的类型系统和并发隔离特性，让消息的发布与订阅在编译期就能得到验证，从根本上杜绝了“线程冲突”和“数据类型错误”等常见问题。</description><pubDate>Wed, 25 Jun 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;NotificationCenter 作为 iOS 开发中的经典组件，为开发者提供了灵活的广播——订阅机制。然而，随着 Swift 并发模型的不断演进，传统基于字符串标识和 userInfo 字典的通知方式暴露出了诸多问题。为了彻底解决这些痛点，Swift 6.2 在 Foundation 中引入了全新的并发安全通知协议。它充分利用 Swift 的类型系统和并发隔离特性，让消息的发布与订阅在编译期就能得到验证，从根本上杜绝了“线程冲突”和“数据类型错误”等常见问题。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/notificationcentermessage-a-new-concurrency-safe-notification-experience-in-swift-62/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>探索 SwiftUI ZStack 中的 layoutPriority 奥秘</title><link>https://fatbobman.com/zh/posts/exploring-the-secrets-of-layoutpriority-in-zstack/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/exploring-the-secrets-of-layoutpriority-in-zstack/</guid><description>在 SwiftUI 的布局体系中，layoutPriority() 这一修饰器看似并不起眼，却在关键时刻能左右视图的尺寸分配。大多数开发者都了解它在 VStack 和 HStack 中为子视图争取更多空间的“魔法”能力——优先级越高，越能从拥挤的布局中脱颖而出。但你是否注意过，layoutPriority 在 ZStack 中也能大显身手？但它的运作机制与 VStack/HStack 完全不同。本篇文章将带你深入剖析这一鲜为人知的特性，演示如何在 ZStack 中应用布局优先级。</description><pubDate>Wed, 18 Jun 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;在 SwiftUI 的布局体系中，layoutPriority() 这一修饰器看似并不起眼，却在关键时刻能左右视图的尺寸分配。大多数开发者都了解它在 VStack 和 HStack 中为子视图争取更多空间的“魔法”能力——优先级越高，越能从拥挤的布局中脱颖而出。但你是否注意过，layoutPriority 在 ZStack 中也能大显身手？但它的运作机制与 VStack/HStack 完全不同。本篇文章将带你深入剖析这一鲜为人知的特性，演示如何在 ZStack 中应用布局优先级。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/exploring-the-secrets-of-layoutpriority-in-zstack/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>WWDC 2025 初印象：意料之中，预想之外</title><link>https://fatbobman.com/zh/posts/wwdc-2025-first-impressions/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/wwdc-2025-first-impressions/</guid><description>WWDC 2025 如期而至。苹果一次性发布了所有的 Session 视频，让开发者得以在第一时间了解自己感兴趣的新特性和新 API。经过两天的快速浏览，我对本届 WWDC 2025 的初步印象为：意料之中，预想之外。</description><pubDate>Wed, 11 Jun 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;WWDC 2025 如期而至。苹果一次性发布了所有的 Session 视频，让开发者得以在第一时间了解自己感兴趣的新特性和新 API。经过两天的快速浏览，我对本届 WWDC 2025 的初步印象为：意料之中，预想之外。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/wwdc-2025-first-impressions/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>apple event</category><author>Fatbobman</author></item><item><title>【小贴士】使用 Swift-Syntax 的预构建版本，加快编译速度</title><link>https://fatbobman.com/zh/snippet/speed-up-compilation-with-prebuilt-swift-syntax/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/speed-up-compilation-with-prebuilt-swift-syntax/</guid><description>在 Swift 6.1.1+ 中启用预构建 Swift-Syntax，可显著加快宏项目的编译速度，提升开发效率，仅需简单配置 Xcode 或命令行参数</description><pubDate>Fri, 06 Jun 2025 00:20:00 GMT</pubDate><content:encoded>&lt;p&gt;在 Swift 6.1.1+ 中启用预构建 Swift-Syntax，可显著加快宏项目的编译速度，提升开发效率，仅需简单配置 Xcode 或命令行参数&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/speed-up-compilation-with-prebuilt-swift-syntax/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>【小贴士】将访问权限控制在 Swift Package 内</title><link>https://fatbobman.com/zh/snippet/controlling-access-within-a-swift-package/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/controlling-access-within-a-swift-package/</guid><description>Swift 5.9 推出 package 访问修饰符，帮助开发者限制 API 在多个 Target 间共享但不对外暴露，提升模块化项目的封装性与安全性</description><pubDate>Thu, 08 May 2025 14:21:01 GMT</pubDate><content:encoded>&lt;p&gt;Swift 5.9 推出 package 访问修饰符，帮助开发者限制 API 在多个 Target 间共享但不对外暴露，提升模块化项目的封装性与安全性&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/controlling-access-within-a-swift-package/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>【小贴士】解决在 Monorepo 项目中 SwiftLint 配置文件无效</title><link>https://fatbobman.com/zh/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/</guid><description>在 Swift Monorepo 中确保 SwiftLint 正常工作，需在 VSCode 设置中明确配置文件路径，并指定需要 lint 的源码目录</description><pubDate>Thu, 24 Apr 2025 14:20:00 GMT</pubDate><content:encoded>&lt;p&gt;在 Swift Monorepo 中确保 SwiftLint 正常工作，需在 VSCode 设置中明确配置文件路径，并指定需要 lint 的源码目录&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>【小贴士】如何在 VSCode/Cursor 中测试 Core Data 代码</title><link>https://fatbobman.com/zh/snippet/how-to-test-core-data-code-in-vscode-cursor/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/how-to-test-core-data-code-in-vscode-cursor/</guid><description>在 VSCode 或 Cursor 中测试 Core Data 时，需使用 Xcode 工具链并手动将 xcdatamodeld 转换为 momd，以确保单元测试正常运行。</description><pubDate>Tue, 15 Apr 2025 14:21:01 GMT</pubDate><content:encoded>&lt;p&gt;在 VSCode 或 Cursor 中测试 Core Data 时，需使用 Xcode 工具链并手动将 xcdatamodeld 转换为 momd，以确保单元测试正常运行。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/how-to-test-core-data-code-in-vscode-cursor/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>core data</category><category>dev tools</category><author>Fatbobman</author></item></channel></rss>