<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss/styles.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>肘子的 Swift 记事本 ｜ Fatbobman&apos;s Blog</title><description>中文首页｜肘子的 Swift 记事本｜Fatbobman&apos;s Blog，分享与 Swift、SwiftUI、Core Data、Swift Data 有关的内容，也会涉及开发工具、AI 等其他内容。全部文章均为原创，转载需联系本人</description><link>https://fatbobman.com/</link><language>zh</language><follow_challenge><feedId>61995827536643088</feedId><userId>60878761419746304</userId></follow_challenge><item><title>Swift 的多平台策略，需要我们大家一起来建设 - 肘子的 Swift 周报 #91</title><link>https://fatbobman.com/zh/weekly/issue-091/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-091/</guid><description>继 2025 年 2 月 Swift 社区论坛发布关于启动 Android Community Workgroup 的消息数月后，Swift.org 于上周正式宣布成立官方 Android 工作组。这标志着由官方主导的 Swift 安卓平台支持正式启动，未来 Swift 开发者有望获得更完善的安卓适配工具链与开发体验。</description><pubDate>Mon, 30 Jun 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;继 2025 年 2 月 Swift 社区论坛发布关于启动 Android Community Workgroup 的消息数月后，Swift.org 于上周正式宣布成立官方 Android 工作组。这标志着由官方主导的 Swift 安卓平台支持正式启动，未来 Swift 开发者有望获得更完善的安卓适配工具链与开发体验。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-091/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>NotificationCenter.Message：Swift 6.2 并发安全通知的全新体验</title><link>https://fatbobman.com/zh/posts/notificationcentermessage-a-new-concurrency-safe-notification-experience-in-swift-62/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/notificationcentermessage-a-new-concurrency-safe-notification-experience-in-swift-62/</guid><description>NotificationCenter 作为 iOS 开发中的经典组件，为开发者提供了灵活的广播——订阅机制。然而，随着 Swift 并发模型的不断演进，传统基于字符串标识和 userInfo 字典的通知方式暴露出了诸多问题。为了彻底解决这些痛点，Swift 6.2 在 Foundation 中引入了全新的并发安全通知协议。它充分利用 Swift 的类型系统和并发隔离特性，让消息的发布与订阅在编译期就能得到验证，从根本上杜绝了“线程冲突”和“数据类型错误”等常见问题。</description><pubDate>Wed, 25 Jun 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;NotificationCenter 作为 iOS 开发中的经典组件，为开发者提供了灵活的广播——订阅机制。然而，随着 Swift 并发模型的不断演进，传统基于字符串标识和 userInfo 字典的通知方式暴露出了诸多问题。为了彻底解决这些痛点，Swift 6.2 在 Foundation 中引入了全新的并发安全通知协议。它充分利用 Swift 的类型系统和并发隔离特性，让消息的发布与订阅在编译期就能得到验证，从根本上杜绝了“线程冲突”和“数据类型错误”等常见问题。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/notificationcentermessage-a-new-concurrency-safe-notification-experience-in-swift-62/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>失去时才会觉得可贵 - 肘子的 Swift 周报 #90</title><link>https://fatbobman.com/zh/weekly/issue-090/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-090/</guid><description>在 WWDC25 的 Bring your SceneKit project to RealityKit Session 中，Apple 正式宣布 SceneKit 将“只修复关键 bug，不再增加新特性”，官方文档也将其标注为弃用状态，建议开发者迁移至 RealityKit。尽管这一天的到来早在许多开发者的预料之中，但当官方正式宣布时，仍免不了让人唏嘘感慨。</description><pubDate>Mon, 23 Jun 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在 WWDC25 的 Bring your SceneKit project to RealityKit Session 中，Apple 正式宣布 SceneKit 将“只修复关键 bug，不再增加新特性”，官方文档也将其标注为弃用状态，建议开发者迁移至 RealityKit。尽管这一天的到来早在许多开发者的预料之中，但当官方正式宣布时，仍免不了让人唏嘘感慨。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-090/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>探索 SwiftUI ZStack 中的 layoutPriority 奥秘</title><link>https://fatbobman.com/zh/posts/exploring-the-secrets-of-layoutpriority-in-zstack/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/exploring-the-secrets-of-layoutpriority-in-zstack/</guid><description>在 SwiftUI 的布局体系中，layoutPriority() 这一修饰器看似并不起眼，却在关键时刻能左右视图的尺寸分配。大多数开发者都了解它在 VStack 和 HStack 中为子视图争取更多空间的“魔法”能力——优先级越高，越能从拥挤的布局中脱颖而出。但你是否注意过，layoutPriority 在 ZStack 中也能大显身手？但它的运作机制与 VStack/HStack 完全不同。本篇文章将带你深入剖析这一鲜为人知的特性，演示如何在 ZStack 中应用布局优先级。</description><pubDate>Wed, 18 Jun 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;在 SwiftUI 的布局体系中，layoutPriority() 这一修饰器看似并不起眼，却在关键时刻能左右视图的尺寸分配。大多数开发者都了解它在 VStack 和 HStack 中为子视图争取更多空间的“魔法”能力——优先级越高，越能从拥挤的布局中脱颖而出。但你是否注意过，layoutPriority 在 ZStack 中也能大显身手？但它的运作机制与 VStack/HStack 完全不同。本篇文章将带你深入剖析这一鲜为人知的特性，演示如何在 ZStack 中应用布局优先级。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/exploring-the-secrets-of-layoutpriority-in-zstack/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>WWDC 2025：回归务实的一年 - 肘子的 Swift 周报 #89</title><link>https://fatbobman.com/zh/weekly/issue-089/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-089/</guid><description>WWDC 2025 已经落下帷幕。在过去一周中，苹果推出了众多全新框架和 API，并展示了在未来几年将产生深远影响的 Liquid Glass 视觉风格。相信不少开发者在看到一些期盼已久的功能或 API 只能在最新系统版本中使用时，难免萌生出将项目最低支持版本直接提升至 26 的冲动。但冷静下来后，大多数开发者仍将不得不接受“数年内无法使用这些新特性”的现实。</description><pubDate>Mon, 16 Jun 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;WWDC 2025 已经落下帷幕。在过去一周中，苹果推出了众多全新框架和 API，并展示了在未来几年将产生深远影响的 Liquid Glass 视觉风格。相信不少开发者在看到一些期盼已久的功能或 API 只能在最新系统版本中使用时，难免萌生出将项目最低支持版本直接提升至 26 的冲动。但冷静下来后，大多数开发者仍将不得不接受“数年内无法使用这些新特性”的现实。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-089/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>WWDC 2025 开发者特辑 - 肘子的 Swift 周报 #88</title><link>https://fatbobman.com/zh/weekly/issue-088/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-088/</guid><description>WWDC 2025 带来了众多令人瞩目的新功能和 API。作为特刊，本期周报精选了开发者社区颇具价值的解读文章、实用工具和关键注意事项，帮助大家快速掌握新特性的核心要点。内容将持续更新至本周末。</description><pubDate>Thu, 12 Jun 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;WWDC 2025 带来了众多令人瞩目的新功能和 API。作为特刊，本期周报精选了开发者社区颇具价值的解读文章、实用工具和关键注意事项，帮助大家快速掌握新特性的核心要点。内容将持续更新至本周末。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-088/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>WWDC 2025 初印象：意料之中，预想之外</title><link>https://fatbobman.com/zh/posts/wwdc-2025-first-impressions/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/wwdc-2025-first-impressions/</guid><description>WWDC 2025 如期而至。苹果一次性发布了所有的 Session 视频，让开发者得以在第一时间了解自己感兴趣的新特性和新 API。经过两天的快速浏览，我对本届 WWDC 2025 的初步印象为：意料之中，预想之外。</description><pubDate>Wed, 11 Jun 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;WWDC 2025 如期而至。苹果一次性发布了所有的 Session 视频，让开发者得以在第一时间了解自己感兴趣的新特性和新 API。经过两天的快速浏览，我对本届 WWDC 2025 的初步印象为：意料之中，预想之外。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/wwdc-2025-first-impressions/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>apple event</category><author>Fatbobman</author></item><item><title>Swift 新设计、新案例、新体验 - 肘子的 Swift 周报 #87</title><link>https://fatbobman.com/zh/weekly/issue-087/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-087/</guid><description>在 WWDC 2025 开幕前夕，Swift 官网迎来了全新改版。新设计致力于提升亲和力，突出 Swift 的技术优势，让初学者更容易上手。作为一门与苹果生态紧密关联的编程语言，新网站的视觉风格也自然融入了浓郁的苹果元素。</description><pubDate>Sat, 07 Jun 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在 WWDC 2025 开幕前夕，Swift 官网迎来了全新改版。新设计致力于提升亲和力，突出 Swift 的技术优势，让初学者更容易上手。作为一门与苹果生态紧密关联的编程语言，新网站的视觉风格也自然融入了浓郁的苹果元素。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-087/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>【小贴士】使用 Swift-Syntax 的预构建版本，加快编译速度</title><link>https://fatbobman.com/zh/snippet/speed-up-compilation-with-prebuilt-swift-syntax/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/speed-up-compilation-with-prebuilt-swift-syntax/</guid><description>在 Swift 6.1.1+ 中启用预构建 Swift-Syntax，可显著加快宏项目的编译速度，提升开发效率，仅需简单配置 Xcode 或命令行参数</description><pubDate>Fri, 06 Jun 2025 00:20:00 GMT</pubDate><content:encoded>&lt;p&gt;在 Swift 6.1.1+ 中启用预构建 Swift-Syntax，可显著加快宏项目的编译速度，提升开发效率，仅需简单配置 Xcode 或命令行参数&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/speed-up-compilation-with-prebuilt-swift-syntax/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>Notepad.exe：轻巧的 Swift 代码编辑器</title><link>https://fatbobman.com/zh/posts/notepad-exe-a-lightweight-swift-code-editor/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/notepad-exe-a-lightweight-swift-code-editor/</guid><description>如今，Xcode Playground 似乎已经偏离了最初的设计初衷，而 VSCode 的配置对初学者来说又显得颇为复杂。在这样的背景下，如何轻松地搭建一个适合学习和测试 Swift 语言的开发环境？也许本文介绍的 Notepad.exe 能为你提供满意的答案。</description><pubDate>Wed, 04 Jun 2025 14:30:00 GMT</pubDate><content:encoded>&lt;p&gt;如今，Xcode Playground 似乎已经偏离了最初的设计初衷，而 VSCode 的配置对初学者来说又显得颇为复杂。在这样的背景下，如何轻松地搭建一个适合学习和测试 Swift 语言的开发环境？也许本文介绍的 Notepad.exe 能为你提供满意的答案。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/notepad-exe-a-lightweight-swift-code-editor/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>相机类 App Swift 6 重构实战 - SLIT_STUDIO 开发日志</title><link>https://fatbobman.com/zh/posts/swift6-refactoring-in-a-camera-app/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/swift6-refactoring-in-a-camera-app/</guid><description>尽管 Swift 6 已发布一段时间，不少苹果第一方框架仍未完成适配，导致部分依赖这些框架的开发者在迁移过程中遇到阻碍。Megabits 在开发 SLIT_STUDIO 相机 App 时也面临类似挑战，但他选择迎难而上。本文将介绍他如何通过引入 actor、GlobalActor 以及职责清晰的组件（如 Recorder 和 CaptureManageObject），应对 Swift 6 的线程安全变更，解决 AVFoundation 与 Swift Concurrency 的兼容性问题，同时提升代码结构与安全性，避免依赖 @preconcurrency 和 nonisolated 等临时方案。</description><pubDate>Wed, 28 May 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;尽管 Swift 6 已发布一段时间，不少苹果第一方框架仍未完成适配，导致部分依赖这些框架的开发者在迁移过程中遇到阻碍。Megabits 在开发 SLIT_STUDIO 相机 App 时也面临类似挑战，但他选择迎难而上。本文将介绍他如何通过引入 actor、GlobalActor 以及职责清晰的组件（如 Recorder 和 CaptureManageObject），应对 Swift 6 的线程安全变更，解决 AVFoundation 与 Swift Concurrency 的兼容性问题，同时提升代码结构与安全性，避免依赖 @preconcurrency 和 nonisolated 等临时方案。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/swift6-refactoring-in-a-camera-app/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>感受 Swift 的魅力：一键导出 DataFrame</title><link>https://fatbobman.com/zh/posts/experience-the-charm-of-swift-one-click-export-dataframe/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/experience-the-charm-of-swift-one-click-export-dataframe/</guid><description>随着对 Swift 理解的不断深入，它的魅力在我眼中愈发耀眼。Swift 让我能以清晰、准确、安全、现代且优雅的方式表达编程思想。本文展示如何使用 Swift 构建一个通用的 DataFrame 导出工具，借助泛型、KeyPath、协议扩展、条件映射与 ResultBuilder，实现类型安全、可配置的数据导出功能，充分体现 Swift 的现代化表达力与灵活性。</description><pubDate>Wed, 21 May 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;随着对 Swift 理解的不断深入，它的魅力在我眼中愈发耀眼。Swift 让我能以清晰、准确、安全、现代且优雅的方式表达编程思想。本文展示如何使用 Swift 构建一个通用的 DataFrame 导出工具，借助泛型、KeyPath、协议扩展、条件映射与 ResultBuilder，实现类型安全、可配置的数据导出功能，充分体现 Swift 的现代化表达力与灵活性。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/experience-the-charm-of-swift-one-click-export-dataframe/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>揭秘 .ignoredByLayout()：让视觉变换“隐形”于布局之外</title><link>https://fatbobman.com/zh/posts/demystifying-swiftuis-ignoredbylayout/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/demystifying-swiftuis-ignoredbylayout/</guid><description>在 SwiftUI 的众多 API 中，.ignoredByLayout() 算是一位“低调的成员”。相关资料稀少，应用场景也不常见，其名称本身就容易引发困惑。它似乎暗示着某种对布局的“忽略”，但这与我们熟知的 offset 或 scaleEffect 等修饰符默认不影响父布局的行为有何不同？ ignoredByLayout 究竟在什么时机工作？它到底“忽略”或“隐瞒”了什么？本文将为你揭开这个 SwiftUI 布局机制中微妙 API 的面纱。</description><pubDate>Wed, 14 May 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;在 SwiftUI 的众多 API 中，.ignoredByLayout() 算是一位“低调的成员”。相关资料稀少，应用场景也不常见，其名称本身就容易引发困惑。它似乎暗示着某种对布局的“忽略”，但这与我们熟知的 offset 或 scaleEffect 等修饰符默认不影响父布局的行为有何不同？ ignoredByLayout 究竟在什么时机工作？它到底“忽略”或“隐瞒”了什么？本文将为你揭开这个 SwiftUI 布局机制中微妙 API 的面纱。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/demystifying-swiftuis-ignoredbylayout/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>【小贴士】将访问权限控制在 Swift Package 内</title><link>https://fatbobman.com/zh/snippet/controlling-access-within-a-swift-package/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/controlling-access-within-a-swift-package/</guid><description>Swift 5.9 推出 package 访问修饰符，帮助开发者限制 API 在多个 Target 间共享但不对外暴露，提升模块化项目的封装性与安全性</description><pubDate>Thu, 08 May 2025 14:21:01 GMT</pubDate><content:encoded>&lt;p&gt;Swift 5.9 推出 package 访问修饰符，帮助开发者限制 API 在多个 Target 间共享但不对外暴露，提升模块化项目的封装性与安全性&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/controlling-access-within-a-swift-package/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>从 180 cm 到 5′ 11″：Swift Measurement 全解析</title><link>https://fatbobman.com/zh/posts/a-complete-guide-to-swift-measurement/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/a-complete-guide-to-swift-measurement/</guid><description>在日常生活里，人们经常需要在各种度量衡单位之间转换。对开发者而言，实现这类功能看似简单：写几行公式、做几次 switch，似乎就能完成任务。但当你希望同时支持数十种单位、无缝国际化，并且还要考虑格式化、精度、舍入等细节时，工作量立刻飙升，且枯燥到足以让人怀疑人生。好消息是——从 iOS 10 起，苹果在 Foundation 中加入了完善的 Measurement API，帮我们把这一切“苦力活”都完成了。本文将带你系统地了解它的用法与实践。</description><pubDate>Wed, 07 May 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在日常生活里，人们经常需要在各种度量衡单位之间转换。对开发者而言，实现这类功能看似简单：写几行公式、做几次 switch，似乎就能完成任务。但当你希望同时支持数十种单位、无缝国际化，并且还要考虑格式化、精度、舍入等细节时，工作量立刻飙升，且枯燥到足以让人怀疑人生。好消息是——从 iOS 10 起，苹果在 Foundation 中加入了完善的 Measurement API，帮我们把这一切“苦力活”都完成了。本文将带你系统地了解它的用法与实践。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/a-complete-guide-to-swift-measurement/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>使用 equatable() 避免 NavigationLink 预构建陷阱</title><link>https://fatbobman.com/zh/posts/using-equatable-to-avoid-the-navigationlink-pre-build-pitfall/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/using-equatable-to-avoid-the-navigationlink-pre-build-pitfall/</guid><description>NavigationLink 是 SwiftUI 开发者非常喜欢使用的一个组件，它巧妙地结合了 Button 和导航跳转逻辑，大大简化了代码实现。但在某些场景下不恰当地使用它可能会导致严重的性能问题，使应用响应变得迟缓。本文将尝试分析这个问题的成因，并提供一个实用但略显神秘（无奈）的解决方案——使用 equatable() 修饰器来优化性能。</description><pubDate>Tue, 29 Apr 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;NavigationLink 是 SwiftUI 开发者非常喜欢使用的一个组件，它巧妙地结合了 Button 和导航跳转逻辑，大大简化了代码实现。但在某些场景下不恰当地使用它可能会导致严重的性能问题，使应用响应变得迟缓。本文将尝试分析这个问题的成因，并提供一个实用但略显神秘（无奈）的解决方案——使用 equatable() 修饰器来优化性能。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/using-equatable-to-avoid-the-navigationlink-pre-build-pitfall/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>【小贴士】解决在 Monorepo 项目中 SwiftLint 配置文件无效</title><link>https://fatbobman.com/zh/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/</guid><description>在 Swift Monorepo 中确保 SwiftLint 正常工作，需在 VSCode 设置中明确配置文件路径，并指定需要 lint 的源码目录</description><pubDate>Thu, 24 Apr 2025 14:20:00 GMT</pubDate><content:encoded>&lt;p&gt;在 Swift Monorepo 中确保 SwiftLint 正常工作，需在 VSCode 设置中明确配置文件路径，并指定需要 lint 的源码目录&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>构建类型安全、高效的 SwiftData/Core Data 模型</title><link>https://fatbobman.com/zh/posts/building-typesafe-highperformance-swiftdata-core-data-models/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/building-typesafe-highperformance-swiftdata-core-data-models/</guid><description>Swift 强大的类型系统使我们能够创建语义明确且安全的数据模型。然而，当面对 SwiftData 或 Core Data 时，我们常因底层存储机制的限制，而不得不在类型表达上做出妥协。这种妥协不仅模糊了领域模型的本意，也为应用的稳定性埋下隐患。本文将探索如何在数据持久化的约束下，通过巧妙的类型封装和转换，构建兼具类型安全、语义明确与高效性能的数据模型。</description><pubDate>Wed, 23 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Swift 强大的类型系统使我们能够创建语义明确且安全的数据模型。然而，当面对 SwiftData 或 Core Data 时，我们常因底层存储机制的限制，而不得不在类型表达上做出妥协。这种妥协不仅模糊了领域模型的本意，也为应用的稳定性埋下隐患。本文将探索如何在数据持久化的约束下，通过巧妙的类型封装和转换，构建兼具类型安全、语义明确与高效性能的数据模型。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/building-typesafe-highperformance-swiftdata-core-data-models/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><category>core data</category><author>Fatbobman</author></item><item><title>【小贴士】如何在 VSCode/Cursor 中测试 Core Data 代码</title><link>https://fatbobman.com/zh/snippet/how-to-test-core-data-code-in-vscode-cursor/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/how-to-test-core-data-code-in-vscode-cursor/</guid><description>在 VSCode 或 Cursor 中测试 Core Data 时，需使用 Xcode 工具链并手动将 xcdatamodeld 转换为 momd，以确保单元测试正常运行。</description><pubDate>Tue, 15 Apr 2025 14:21:01 GMT</pubDate><content:encoded>&lt;p&gt;在 VSCode 或 Cursor 中测试 Core Data 时，需使用 Xcode 工具链并手动将 xcdatamodeld 转换为 momd，以确保单元测试正常运行。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/how-to-test-core-data-code-in-vscode-cursor/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>core data</category><category>dev tools</category><author>Fatbobman</author></item></channel></rss>