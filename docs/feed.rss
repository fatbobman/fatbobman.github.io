<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss/styles.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>肘子的 Swift 记事本 ｜ Fatbobman&apos;s Blog</title><description>中文首页｜肘子的 Swift 记事本｜Fatbobman&apos;s Blog，分享与 Swift、SwiftUI、Core Data、Swift Data 有关的内容，也会涉及开发工具、AI 等其他内容。全部文章均为原创，转载需联系本人</description><link>https://fatbobman.com/</link><language>zh</language><follow_challenge><feedId>61995827536643088</feedId><userId>60878761419746304</userId></follow_challenge><item><title>【小贴士】解决在 Monorepo 项目中 SwiftLint 配置文件无效</title><link>https://fatbobman.com/zh/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/</guid><description>在 Swift Monorepo 中确保 SwiftLint 正常工作，需在 VSCode 设置中明确配置文件路径，并指定需要 lint 的源码目录</description><pubDate>Thu, 24 Apr 2025 14:20:00 GMT</pubDate><content:encoded>&lt;p&gt;在 Swift Monorepo 中确保 SwiftLint 正常工作，需在 VSCode 设置中明确配置文件路径，并指定需要 lint 的源码目录&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>构建类型安全、高效的 SwiftData/Core Data 模型</title><link>https://fatbobman.com/zh/posts/building-typesafe-highperformance-swiftdata-core-data-models/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/building-typesafe-highperformance-swiftdata-core-data-models/</guid><description>Swift 强大的类型系统使我们能够创建语义明确且安全的数据模型。然而，当面对 SwiftData 或 Core Data 时，我们常因底层存储机制的限制，而不得不在类型表达上做出妥协。这种妥协不仅模糊了领域模型的本意，也为应用的稳定性埋下隐患。本文将探索如何在数据持久化的约束下，通过巧妙的类型封装和转换，构建兼具类型安全、语义明确与高效性能的数据模型。</description><pubDate>Wed, 23 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Swift 强大的类型系统使我们能够创建语义明确且安全的数据模型。然而，当面对 SwiftData 或 Core Data 时，我们常因底层存储机制的限制，而不得不在类型表达上做出妥协。这种妥协不仅模糊了领域模型的本意，也为应用的稳定性埋下隐患。本文将探索如何在数据持久化的约束下，通过巧妙的类型封装和转换，构建兼具类型安全、语义明确与高效性能的数据模型。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/building-typesafe-highperformance-swiftdata-core-data-models/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><category>core data</category><author>Fatbobman</author></item><item><title>更短的有效期和更长的保质期 - 肘子的 Swift 周报 #80</title><link>https://fatbobman.com/zh/weekly/issue-080/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-080/</guid><description>在上周一，我的博客的 HTTPS 证书出现了短暂的失效。好在失效后五分钟，就有热心网友提醒了我。联系云服务商后发现，是对方处理 SSL 证书自动续签的代码出现了故障。经过两个小时的排查，问题得以解除，网站恢复了正常。</description><pubDate>Mon, 21 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在上周一，我的博客的 HTTPS 证书出现了短暂的失效。好在失效后五分钟，就有热心网友提醒了我。联系云服务商后发现，是对方处理 SSL 证书自动续签的代码出现了故障。经过两个小时的排查，问题得以解除，网站恢复了正常。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-080/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>我所希望的 Xcode</title><link>https://fatbobman.com/zh/posts/my-hopes-for-xcode/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/my-hopes-for-xcode/</guid><description>随着 AI 能力的快速提高，低代码甚至无代码的时代似乎即将到来。然而，过去一年间，针对专业开发者的各类编程工具并未减少，反而层出不穷。无论是 AI 辅助编程的突破，还是协作、跨平台能力的持续提升，都在证明着专业开发者仍是不可或缺的重要群体。反观苹果生态，作为最重要的开发工具，Xcode 近年来却未能带来真正令人振奋的改变。在这篇文章中，我将分享自己对未来 Xcode 的几点期望。</description><pubDate>Wed, 16 Apr 2025 14:30:00 GMT</pubDate><content:encoded>&lt;p&gt;随着 AI 能力的快速提高，低代码甚至无代码的时代似乎即将到来。然而，过去一年间，针对专业开发者的各类编程工具并未减少，反而层出不穷。无论是 AI 辅助编程的突破，还是协作、跨平台能力的持续提升，都在证明着专业开发者仍是不可或缺的重要群体。反观苹果生态，作为最重要的开发工具，Xcode 近年来却未能带来真正令人振奋的改变。在这篇文章中，我将分享自己对未来 Xcode 的几点期望。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/my-hopes-for-xcode/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>【小贴士】如何在 VSCode/Cursor 中测试 Core Data 代码</title><link>https://fatbobman.com/zh/snippet/how-to-test-core-data-code-in-vscode-cursor/</link><guid isPermaLink="true">https://fatbobman.com/zh/snippet/how-to-test-core-data-code-in-vscode-cursor/</guid><description>在 VSCode 或 Cursor 中测试 Core Data 时，需使用 Xcode 工具链并手动将 xcdatamodeld 转换为 momd，以确保单元测试正常运行。</description><pubDate>Tue, 15 Apr 2025 14:21:01 GMT</pubDate><content:encoded>&lt;p&gt;在 VSCode 或 Cursor 中测试 Core Data 时，需使用 Xcode 工具链并手动将 xcdatamodeld 转换为 momd，以确保单元测试正常运行。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/zh/snippet/how-to-test-core-data-code-in-vscode-cursor/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>core data</category><category>dev tools</category><author>Fatbobman</author></item><item><title>微软收紧插件、谷歌发力云端，Xcode 何去何从？ - 肘子的 Swift 周报 #79</title><link>https://fatbobman.com/zh/weekly/issue-079/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-079/</guid><description>不久前，微软对 Github Copilot 进行了相当程度的功能增强，除了添加了对 MCP 的支持外，在 AI 交互模式上也提供了与 Cursor 对齐的 Agent 模式，至此，Github Copilot 大大缩小了与其他 AI 代码工具领先者之间的差距。考虑到其更低的定价策略（ $10/月 ），明显微软已做好了全力进入商业 AI 辅助市场/服务的准备。</description><pubDate>Mon, 14 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;不久前，微软对 Github Copilot 进行了相当程度的功能增强，除了添加了对 MCP 的支持外，在 AI 交互模式上也提供了与 Cursor 对齐的 Agent 模式，至此，Github Copilot 大大缩小了与其他 AI 代码工具领先者之间的差距。考虑到其更低的定价策略（ $10/月 ），明显微软已做好了全力进入商业 AI 辅助市场/服务的准备。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-079/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>用 Swift 构建 WASM 应用</title><link>https://fatbobman.com/zh/posts/building-wasm-applications-with-swift/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/building-wasm-applications-with-swift/</guid><description>随着 Swift 6.1 版本的正式发布，SwiftWasm 也迎来了重大升级。这一里程碑式的更新标志着 SwiftWasm 首次实现了完全基于官方 Swift 开源工具链的构建——告别了自定义补丁的时代，不仅显著简化了开发者的安装流程，大幅节省了系统存储空间，更为重要的是，这种纯正构建方式极大降低了平台的维护成本，为 Swift 生态系统注入了新的活力。在本文中，我们将探索如何利用 Swift 构建 WebAssembly 应用，带你领略 Swift 跨平台开发的无限可能。</description><pubDate>Wed, 09 Apr 2025 14:30:00 GMT</pubDate><content:encoded>&lt;p&gt;随着 Swift 6.1 版本的正式发布，SwiftWasm 也迎来了重大升级。这一里程碑式的更新标志着 SwiftWasm 首次实现了完全基于官方 Swift 开源工具链的构建——告别了自定义补丁的时代，不仅显著简化了开发者的安装流程，大幅节省了系统存储空间，更为重要的是，这种纯正构建方式极大降低了平台的维护成本，为 Swift 生态系统注入了新的活力。在本文中，我们将探索如何利用 Swift 构建 WebAssembly 应用，带你领略 Swift 跨平台开发的无限可能。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/building-wasm-applications-with-swift/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>切勿将辅助驾驶宣传成智能驾驶 - 肘子的 Swift 周报 #78</title><link>https://fatbobman.com/zh/weekly/issue-078/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-078/</guid><description>不久前，某个造成三人死亡的交通事故因为涉及某新锐电动汽车品牌再度引发了人们对“智能驾驶”功能的质疑。在目前披露的有限资料中，至少可以确认的是，“智能驾驶”系统未能在相当长的一段行驶距离中判断出当前的路段正在施工（沿途有施工警示标志），只在撞击前2-3秒前给予了警示。这意味着，在系统报警后，驾驶者只有极短的反应时间。</description><pubDate>Mon, 07 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;不久前，某个造成三人死亡的交通事故因为涉及某新锐电动汽车品牌再度引发了人们对“智能驾驶”功能的质疑。在目前披露的有限资料中，至少可以确认的是，“智能驾驶”系统未能在相当长的一段行驶距离中判断出当前的路段正在施工（沿途有施工警示标志），只在撞击前2-3秒前给予了警示。这意味着，在系统报警后，驾驶者只有极短的反应时间。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-078/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>远离 dismiss，拥抱状态驱动</title><link>https://fatbobman.com/zh/posts/say-goodbye-to-dismiss/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/say-goodbye-to-dismiss/</guid><description>在 SwiftUI 开发中，环境值 dismiss 因其灵活、自适应的特性备受开发者青睐。它能够根据当前视图的上下文智能执行关闭操作：在模态视图中关闭窗口、在导航堆栈中弹出视图，甚至在多列导航容器中自动关闭边栏。正是这种看似“万能”的便捷性，让许多开发者将它作为首选工具。然而，便捷的背后往往隐藏着风险。频繁使用 dismiss 可能在应用程序中埋下隐患，引发测试难题乃至难以追踪的稳定性问题。本文将分析我们为何应谨慎对待 dismiss，并介绍更加健壮可靠的状态管理方案。通过重新审视视图呈现与消失的逻辑，我们能够打造出更稳定、易维护且可预测的 SwiftUI 应用。</description><pubDate>Wed, 02 Apr 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;在 SwiftUI 开发中，环境值 dismiss 因其灵活、自适应的特性备受开发者青睐。它能够根据当前视图的上下文智能执行关闭操作：在模态视图中关闭窗口、在导航堆栈中弹出视图，甚至在多列导航容器中自动关闭边栏。正是这种看似“万能”的便捷性，让许多开发者将它作为首选工具。然而，便捷的背后往往隐藏着风险。频繁使用 dismiss 可能在应用程序中埋下隐患，引发测试难题乃至难以追踪的稳定性问题。本文将分析我们为何应谨慎对待 dismiss，并介绍更加健壮可靠的状态管理方案。通过重新审视视图呈现与消失的逻辑，我们能够打造出更稳定、易维护且可预测的 SwiftUI 应用。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/say-goodbye-to-dismiss/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>MCP 崛起与苹果的 AI 框架设想 - 肘子的 Swift 周报 #77</title><link>https://fatbobman.com/zh/weekly/issue-077/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-077/</guid><description>在最近一段时间，在社交网络上，越来越多的 Model Context Protocol（MCP）使用者展示了各种丰富多彩的应用场景，从操控 Blender 创建精美场景，到利用最新的 GPT-4o 图片构建完整的漫画故事。MCP 巧妙地打开了以文本为主要互动手段的大模型，与现实世界之间的大门。</description><pubDate>Mon, 31 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在最近一段时间，在社交网络上，越来越多的 Model Context Protocol（MCP）使用者展示了各种丰富多彩的应用场景，从操控 Blender 创建精美场景，到利用最新的 GPT-4o 图片构建完整的漫画故事。MCP 巧妙地打开了以文本为主要互动手段的大模型，与现实世界之间的大门。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-077/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>SwiftUI Environment：理念与实践</title><link>https://fatbobman.com/zh/posts/swiftui-environment-concepts-and-practice/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/swiftui-environment-concepts-and-practice/</guid><description>SwiftUI 的 Environment 是一个优雅且功能强大的依赖注入机制，几乎每个 SwiftUI 开发者都会在日常开发中接触和应用。这一机制不仅简化了视图间的数据传递，也为应用架构设计提供了更多的可能性。本文将暂且搁置具体的实现细节，转而聚焦于 Environment 在架构中的角色与边界，探讨那些常被忽视却至关重要的设计理念与实践经验。</description><pubDate>Wed, 26 Mar 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;SwiftUI 的 Environment 是一个优雅且功能强大的依赖注入机制，几乎每个 SwiftUI 开发者都会在日常开发中接触和应用。这一机制不仅简化了视图间的数据传递，也为应用架构设计提供了更多的可能性。本文将暂且搁置具体的实现细节，转而聚焦于 Environment 在架构中的角色与边界，探讨那些常被忽视却至关重要的设计理念与实践经验。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/swiftui-environment-concepts-and-practice/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>给毛孩子照相 - 肘子的 Swift 周报 #76</title><link>https://fatbobman.com/zh/weekly/issue-076/</link><guid isPermaLink="true">https://fatbobman.com/zh/weekly/issue-076/</guid><description>我有一只 13 岁的狗狗和一只六岁多的猫咪。这些年来，我几乎每年都会带狗狗去宠物照相馆拍照，但由于猫咪过于社恐，一直不敢带他出门拍照。近一年来，我们发现猫咪的状态似乎有了些许改善。虽然他仍然抗拒出门，但在洗澡或去医院回家后，不再需要几个小时才能平复情绪，现在只消几分钟就能恢复正常。看到这样的进展，我和太太决定今年冒险一试，带这兄弟俩一起去拍照，最好还能拍下一张精彩的合影。</description><pubDate>Mon, 24 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;我有一只 13 岁的狗狗和一只六岁多的猫咪。这些年来，我几乎每年都会带狗狗去宠物照相馆拍照，但由于猫咪过于社恐，一直不敢带他出门拍照。近一年来，我们发现猫咪的状态似乎有了些许改善。虽然他仍然抗拒出门，但在洗澡或去医院回家后，不再需要几个小时才能平复情绪，现在只消几分钟就能恢复正常。看到这样的进展，我和太太决定今年冒险一试，带这兄弟俩一起去拍照，最好还能拍下一张精彩的合影。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/weekly/issue-076/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>使用 Proxyman 拦截和模拟 iPhone 应用的网络请求</title><link>https://fatbobman.com/zh/posts/using-proxyman-to-intercept-and-simulate-iphone-app-network-requests/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/using-proxyman-to-intercept-and-simulate-iphone-app-network-requests/</guid><description>在互联网时代，开发者日益频繁地与网络数据打交道。正如我们依赖 IDE 的调试功能来优化代码一样，网络调试工具已成为我们快速、高效地学习、研究和分析网络数据不可或缺的助手。本文将介绍如何利用 Proxyman 来捕获 iPhone 应用的网络请求信息，并通过提供 Mock 数据来模拟服务器响应，帮助开发者在不依赖真实服务器的情况下进行应用测试与开发。</description><pubDate>Wed, 19 Mar 2025 14:30:00 GMT</pubDate><content:encoded>&lt;p&gt;在互联网时代，开发者日益频繁地与网络数据打交道。正如我们依赖 IDE 的调试功能来优化代码一样，网络调试工具已成为我们快速、高效地学习、研究和分析网络数据不可或缺的助手。本文将介绍如何利用 Proxyman 来捕获 iPhone 应用的网络请求信息，并通过提供 Mock 数据来模拟服务器响应，帮助开发者在不依赖真实服务器的情况下进行应用测试与开发。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/using-proxyman-to-intercept-and-simulate-iphone-app-network-requests/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>SwiftData 使用前必须了解的关键问题</title><link>https://fatbobman.com/zh/posts/key-considerations-before-using-swiftdata/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/key-considerations-before-using-swiftdata/</guid><description>本文旨在为对 SwiftData 感兴趣的开发者提供一份指南，帮助你了解 SwiftData 的优势与局限，并根据项目需求做出明智的技术选择。无论你是考虑在新项目中引入 SwiftData，还是计划从其他持久化方案迁移，以下内容都将为你的决策提供有价值的参考。</description><pubDate>Wed, 12 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;本文旨在为对 SwiftData 感兴趣的开发者提供一份指南，帮助你了解 SwiftData 的优势与局限，并根据项目需求做出明智的技术选择。无论你是考虑在新项目中引入 SwiftData，还是计划从其他持久化方案迁移，以下内容都将为你的决策提供有价值的参考。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/key-considerations-before-using-swiftdata/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><author>Fatbobman</author></item><item><title>让 @State 实现懒加载</title><link>https://fatbobman.com/zh/posts/lazy-initialization-state-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/lazy-initialization-state-in-swiftui/</guid><description>Observation 框架为 Swift 带来了原生的属性级观察能力，有效避免了 SwiftUI 中因无关属性变化而引发的多余视图更新，从而提升了应用性能。但由于 @State 并未提供类似 @StateObject 的懒加载构造方式，在某些场景下会因实例过早构建而引起性能损失甚至逻辑问题。本文将探讨如何为 Observable 实例定制一个支持懒加载的 @State 解决方案。</description><pubDate>Wed, 05 Mar 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;Observation 框架为 Swift 带来了原生的属性级观察能力，有效避免了 SwiftUI 中因无关属性变化而引发的多余视图更新，从而提升了应用性能。但由于 @State 并未提供类似 @StateObject 的懒加载构造方式，在某些场景下会因实例过早构建而引起性能损失甚至逻辑问题。本文将探讨如何为 Observable 实例定制一个支持懒加载的 @State 解决方案。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/lazy-initialization-state-in-swiftui/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Animatable 协议：让 SwiftUI 动画不再“失控”</title><link>https://fatbobman.com/zh/posts/animatable-protocol-taming-unruly-swiftui-animation/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/animatable-protocol-taming-unruly-swiftui-animation/</guid><description>在 SwiftUI 开发中，你是否遇到过看似正确的动画代码却无法按预期工作的情况？或者在某些 iOS 版本上完美运行的动画，却在其他版本上表现异常？这些令人困扰的动画问题往往可以通过一个强大而低调的工具来解决 —— Animatable 协议。</description><pubDate>Wed, 26 Feb 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;在 SwiftUI 开发中，你是否遇到过看似正确的动画代码却无法按预期工作的情况？或者在某些 iOS 版本上完美运行的动画，却在其他版本上表现异常？这些令人困扰的动画问题往往可以通过一个强大而低调的工具来解决 —— Animatable 协议。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/animatable-protocol-taming-unruly-swiftui-animation/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>从 Host 到 Serverless: 博客架构升级实践</title><link>https://fatbobman.com/zh/posts/from-host-to-serverless/</link><guid isPermaLink="true">https://fatbobman.com/zh/posts/from-host-to-serverless/</guid><description>在过去的一个半月里，我对博客进行了一系列的调整，涉及发布机制、代码架构和版式设计等多个方面。这些调整不仅提升了博客的性能和用户体验，也让内容维护和更新变得更加高效。本文将简单记录一下本次调整的主要内容。</description><pubDate>Wed, 19 Feb 2025 14:20:00 GMT</pubDate><content:encoded>&lt;p&gt;在过去的一个半月里，我对博客进行了一系列的调整，涉及发布机制、代码架构和版式设计等多个方面。这些调整不仅提升了博客的性能和用户体验，也让内容维护和更新变得更加高效。本文将简单记录一下本次调整的主要内容。&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/rss.xml&quot;&gt;&lt;b&gt;Subscribe English RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/zh/posts/from-host-to-serverless/&quot;&gt;&lt;b&gt;阅读全文&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>web</category><author>Fatbobman</author></item></channel></rss>