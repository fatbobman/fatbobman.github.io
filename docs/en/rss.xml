<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss/styles.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Fatbobman&apos;s Blog</title><description>English Home | Fatbobman&apos;s Blog ｜肘子的 Swift 记事本 – Sharing content related to Swift, SwiftUI, Core Data, and Swift Data, as well as covering development tools, AI, and other topics. All articles are original creations; for reproduction, please contact the author.</description><link>https://fatbobman.com/</link><language>en</language><follow_challenge><feedId>69192030853292039</feedId><userId>60878761419746304</userId></follow_challenge><item><title>The Cycle of Expectation and Disappointment: Apple&apos;s AI Dilemma and Resilience - Fatbobman&apos;s Swift Weekly #74</title><link>https://fatbobman.com/en/weekly/issue-074/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-074/</guid><description>A few days ago, Apple announced that its &quot;More Personalized Siri&quot; feature would be delayed until next year. Combined with the continued absence of Swift Assist, it&apos;s clear Apple has not fulfilled the AI vision it presented at WWDC 2024. At least in the realm of large language models, Apple has not exhibited its characteristic agility in keeping pace with industry trends.</description><pubDate>Mon, 10 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A few days ago, Apple announced that its &quot;More Personalized Siri&quot; feature would be delayed until next year. Combined with the continued absence of Swift Assist, it&apos;s clear Apple has not fulfilled the AI vision it presented at WWDC 2024. At least in the realm of large language models, Apple has not exhibited its characteristic agility in keeping pace with industry trends.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-074/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Lazy Initialization @State in SwiftUI: Overcoming Premature Object Creation</title><link>https://fatbobman.com/en/posts/lazy-initialization-state-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/lazy-initialization-state-in-swiftui/</guid><description>The Observation framework has brought native property-level observation to Swift, effectively preventing unnecessary view updates in SwiftUI triggered by unrelated property changes, thereby enhancing application performance. However, since @State does not offer a lazy initialization constructor like @StateObject, it may lead to performance degradation or even logical issues due to the premature construction of instances in certain scenarios. This article explores how to implement a lazy initialization solution for Observable instances using @State.</description><pubDate>Wed, 05 Mar 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;The Observation framework has brought native property-level observation to Swift, effectively preventing unnecessary view updates in SwiftUI triggered by unrelated property changes, thereby enhancing application performance. However, since @State does not offer a lazy initialization constructor like @StateObject, it may lead to performance degradation or even logical issues due to the premature construction of instances in certain scenarios. This article explores how to implement a lazy initialization solution for Observable instances using @State.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/lazy-initialization-state-in-swiftui/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Experiencing the Passion of Apple Developers at the Carnival - Fatbobman&apos;s Swift Weekly #73</title><link>https://fatbobman.com/en/weekly/issue-073/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-073/</guid><description>The two-day Let&apos;s Vision 2025 concluded successfully in a joyful atmosphere, marking my second participation as a speaker in this grand event. Compared to last year, this year&apos;s event not only comprehensively covered the Apple development ecosystem but also integrated the hottest AI-related content.</description><pubDate>Tue, 04 Mar 2025 01:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The two-day Let&apos;s Vision 2025 concluded successfully in a joyful atmosphere, marking my second participation as a speaker in this grand event. Compared to last year, this year&apos;s event not only comprehensively covered the Apple development ecosystem but also integrated the hottest AI-related content.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-073/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Animatable Protocol: Taming Unruly SwiftUI Animations</title><link>https://fatbobman.com/en/posts/animatable-protocol-taming-unruly-swiftui-animation/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/animatable-protocol-taming-unruly-swiftui-animation/</guid><description>In SwiftUI development, have you ever encountered situations where seemingly correct animation code fails to work as expected? Or animations that run perfectly on certain iOS versions but behave abnormally on others? These frustrating animation issues can often be resolved with a powerful yet understated tool — the Animatable protocol.</description><pubDate>Wed, 26 Feb 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;In SwiftUI development, have you ever encountered situations where seemingly correct animation code fails to work as expected? Or animations that run perfectly on certain iOS versions but behave abnormally on others? These frustrating animation issues can often be resolved with a powerful yet understated tool — the Animatable protocol.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/animatable-protocol-taming-unruly-swiftui-animation/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Beyond X: The Swift Community Embraces Mastodon and Bluesky - Fatbobman&apos;s Swift Weekly #72</title><link>https://fatbobman.com/en/weekly/issue-072/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-072/</guid><description>On February 21, the Swift community officially launched its official account on Bluesky, while also posting its first message on its Mastodon account, which had been created back in 2022. On the surface, this may seem like just another typical social media update, but in reality, this decision has been under discussion and consideration within the Swift community for some time, and a series of recent events have accelerated this process.</description><pubDate>Mon, 24 Feb 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On February 21, the Swift community officially launched its official account on Bluesky, while also posting its first message on its Mastodon account, which had been created back in 2022. On the surface, this may seem like just another typical social media update, but in reality, this decision has been under discussion and consideration within the Swift community for some time, and a series of recent events have accelerated this process.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-072/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>From Host to Serverless: A Blog Architecture Migration Journey</title><link>https://fatbobman.com/en/posts/from-host-to-serverless/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/from-host-to-serverless/</guid><description>In the past month and a half, I’ve made a series of adjustments to my blog, covering areas such as the publishing mechanism, code architecture, and layout design. These changes have not only enhanced the performance and user experience of the blog but also made content maintenance and updates more efficient. This article provides a brief overview of the key changes.</description><pubDate>Wed, 19 Feb 2025 14:20:00 GMT</pubDate><content:encoded>&lt;p&gt;In the past month and a half, I’ve made a series of adjustments to my blog, covering areas such as the publishing mechanism, code architecture, and layout design. These changes have not only enhanced the performance and user experience of the blog but also made content maintenance and updates more efficient. This article provides a brief overview of the key changes.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/from-host-to-serverless/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>web</category><author>Fatbobman</author></item><item><title>Building Android Apps with Swift - Fatbobman&apos;s Swift Weekly #71</title><link>https://fatbobman.com/en/weekly/issue-071/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-071/</guid><description>Recently, the Swift community established the Swift on Android Community Workgroup, aiming to promote the use of Swift in the Android ecosystem. This initiative follows a similar path to how the Arc browser advanced Swift&apos;s development on the Windows platform. Notably, members of the Skip team, which specializes in cross-platform development, have also joined the working group. Although still in its early stages, this undoubtedly marks an important step for the Swift community in breaking down platform barriers.</description><pubDate>Tue, 18 Feb 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently, the Swift community established the Swift on Android Community Workgroup, aiming to promote the use of Swift in the Android ecosystem. This initiative follows a similar path to how the Arc browser advanced Swift&apos;s development on the Windows platform. Notably, members of the Skip team, which specializes in cross-platform development, have also joined the working group. Although still in its early stages, this undoubtedly marks an important step for the Swift community in breaking down platform barriers.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-071/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Mastering SwiftUI Scrolling: Implementing Custom Paging</title><link>https://fatbobman.com/en/posts/mastering-swiftui-scrolling-implementing-custom-paging/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/mastering-swiftui-scrolling-implementing-custom-paging/</guid><description>Starting with iOS 17, SwiftUI introduced scrollTargetBehavior, enabling developers to control scrolling behavior with greater precision. Whether it&apos;s aligning views at rest or implementing custom paging effects, scrollTargetBehavior offers robust support. More importantly, developers can create custom ScrollTargetBehavior implementations to meet specific needs. This article will walk through a real-world example, step by step, to demonstrate how to use scrollTargetBehavior and ultimately implement a custom scrolling control logic.</description><pubDate>Wed, 12 Feb 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;Starting with iOS 17, SwiftUI introduced scrollTargetBehavior, enabling developers to control scrolling behavior with greater precision. Whether it&apos;s aligning views at rest or implementing custom paging effects, scrollTargetBehavior offers robust support. More importantly, developers can create custom ScrollTargetBehavior implementations to meet specific needs. This article will walk through a real-world example, step by step, to demonstrate how to use scrollTargetBehavior and ultimately implement a custom scrolling control logic.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/mastering-swiftui-scrolling-implementing-custom-paging/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Feedback and Communication - Fatbobman&apos;s Swift Weekly #70</title><link>https://fatbobman.com/en/weekly/issue-070/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-070/</guid><description>Recently, I received an email from Apple informing me that an issue I reported last April has been fixed. What’s even more delightful is that this fix applies not only to the latest system but is also backward compatible with iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, and visionOS 1.3.</description><pubDate>Mon, 10 Feb 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently, I received an email from Apple informing me that an issue I reported last April has been fixed. What’s even more delightful is that this fix applies not only to the latest system but is also backward compatible with iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, and visionOS 1.3.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-070/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Why Certain View Modifiers in Swift 6 Cannot Use the @State Property</title><link>https://fatbobman.com/en/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/</guid><description>In Xcode 16, to improve SwiftUI&apos;s performance under Swift 6 mode, Apple made several adjustments to the SwiftUI framework&apos;s APIs to meet stricter concurrency checks. The most notable change is the comprehensive annotation of the View protocol with @MainActor. While these optimizations generally enhance the developer experience in Swift 6 mode, they also introduce some seemingly anomalous compile-time errors in specific scenarios. This article delves into why certain view modifiers cannot directly use @State properties and provides corresponding solutions.</description><pubDate>Tue, 24 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;In Xcode 16, to improve SwiftUI&apos;s performance under Swift 6 mode, Apple made several adjustments to the SwiftUI framework&apos;s APIs to meet stricter concurrency checks. The most notable change is the comprehensive annotation of the View protocol with @MainActor. While these optimizations generally enhance the developer experience in Swift 6 mode, they also introduce some seemingly anomalous compile-time errors in specific scenarios. This article delves into why certain view modifiers cannot directly use @State properties and provides corresponding solutions.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Traps and Countermeasures for Abnormal onAppear Calls in SwiftUI</title><link>https://fatbobman.com/en/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/</guid><description>onAppear is an extremely crucial lifecycle method in SwiftUI, used to inject key logic when a view is presented. Since view instances may be created and rebuilt frequently, developers often choose to prepare data and perform initialization operations within these methods. In theory, the timing of these lifecycle method calls should be predictable and consistent. However, in certain specific scenarios, onAppear may be called unexpectedly and unnecessarily. This not only can lead to performance overhead but also may cause uncontrollable changes in the application&apos;s state. This article will uncover this easily overlooked SwiftUI behavior trap and provide temporary countermeasures.</description><pubDate>Wed, 18 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;onAppear is an extremely crucial lifecycle method in SwiftUI, used to inject key logic when a view is presented. Since view instances may be created and rebuilt frequently, developers often choose to prepare data and perform initialization operations within these methods. In theory, the timing of these lifecycle method calls should be predictable and consistent. However, in certain specific scenarios, onAppear may be called unexpectedly and unnecessarily. This not only can lead to performance overhead but also may cause uncontrollable changes in the application&apos;s state. This article will uncover this easily overlooked SwiftUI behavior trap and provide temporary countermeasures.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Model Inheritance in Core Data</title><link>https://fatbobman.com/en/posts/model-inheritance-in-core-data/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/model-inheritance-in-core-data/</guid><description>One of Core Data&apos;s outstanding features is its ability to allow developers to declare data models in a manner closer to object-oriented programming without worrying about the underlying storage implementation details. Within this framework, model inheritance is a particularly important mechanism. This article delves into the core concepts of model inheritance, including Parent Entity, Sub Entity, and Abstract Entity. We will analyze their advantages and disadvantages and explore how to achieve similar effects without directly using these features.</description><pubDate>Wed, 11 Dec 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of Core Data&apos;s outstanding features is its ability to allow developers to declare data models in a manner closer to object-oriented programming without worrying about the underlying storage implementation details. Within this framework, model inheritance is a particularly important mechanism. This article delves into the core concepts of model inheritance, including Parent Entity, Sub Entity, and Abstract Entity. We will analyze their advantages and disadvantages and explore how to achieve similar effects without directly using these features.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/model-inheritance-in-core-data/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><category>core data</category><author>Fatbobman</author></item><item><title>Typefully: Say Goodbye to the Hassles of Social Media Posting</title><link>https://fatbobman.com/en/posts/typefully-say-goodbye-to-the-hassles-of-social-media-posting/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/typefully-say-goodbye-to-the-hassles-of-social-media-posting/</guid><description>As social media channels continue to expand, internet users often find themselves managing multiple social accounts without even realizing it. For content creators and corporate account managers, the preparatory work required to post content across various social platforms is becoming increasingly cumbersome. Over the past month, I started using Typefully to centrally manage and publish content on multiple social platforms. Now, I&apos;d like to share my experience.</description><pubDate>Wed, 04 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;As social media channels continue to expand, internet users often find themselves managing multiple social accounts without even realizing it. For content creators and corporate account managers, the preparatory work required to post content across various social platforms is becoming increasingly cumbersome. Over the past month, I started using Typefully to centrally manage and publish content on multiple social platforms. Now, I&apos;d like to share my experience.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/typefully-say-goodbye-to-the-hassles-of-social-media-posting/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>tools</category><category>life</category><author>Fatbobman</author></item><item><title>Intentional Design or Technical Flaw? The Anomaly of onChange in SwiftUI Multi-Layer Navigation</title><link>https://fatbobman.com/en/posts/the-anomaly-of-onchange-in-swiftui-multi-layer-navigation/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/the-anomaly-of-onchange-in-swiftui-multi-layer-navigation/</guid><description>SwiftUI provides the onChange modifier, allowing developers to listen for changes in specific values within a view and execute corresponding actions when those values change. Intuitively, as long as a view is part of the currently visible branch of the view tree (active), the corresponding closure should be triggered when the observed value changes. However, in certain navigation scenarios, the onChange modifier seems to become &quot;selectively deaf,&quot; inexplicably remaining silent even when the observed value changes. Is this a carefully designed feature by Apple, or a long-hidden code defect? This article aims to unveil this phenomenon and provide necessary caution to developers.</description><pubDate>Wed, 27 Nov 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;SwiftUI provides the onChange modifier, allowing developers to listen for changes in specific values within a view and execute corresponding actions when those values change. Intuitively, as long as a view is part of the currently visible branch of the view tree (active), the corresponding closure should be triggered when the observed value changes. However, in certain navigation scenarios, the onChange modifier seems to become &quot;selectively deaf,&quot; inexplicably remaining silent even when the observed value changes. Is this a carefully designed feature by Apple, or a long-hidden code defect? This article aims to unveil this phenomenon and provide necessary caution to developers.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/the-anomaly-of-onchange-in-swiftui-multi-layer-navigation/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Using Transactions Instead of Save in SwiftData and Core Data</title><link>https://fatbobman.com/en/posts/using-transactions-instead-of-save-in-swiftdata-and-core-data/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/using-transactions-instead-of-save-in-swiftdata-and-core-data/</guid><description>Ensuring data consistency and integrity is crucial in data persistence operations. The SwiftData framework introduces the `transaction` method in `ModelContext`, providing developers with a more elegant way to organize and manage data operations. This article explores how to use the concept of transactions to build more reliable and efficient persistence operations.</description><pubDate>Wed, 20 Nov 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Ensuring data consistency and integrity is crucial in data persistence operations. The SwiftData framework introduces the `transaction` method in `ModelContext`, providing developers with a more elegant way to organize and manage data operations. This article explores how to use the concept of transactions to build more reliable and efficient persistence operations.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/using-transactions-instead-of-save-in-swiftdata-and-core-data/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><category>core data</category><author>Fatbobman</author></item></channel></rss>