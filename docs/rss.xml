<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss/styles.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Fatbobman&apos;s Blog</title><description>English Home | Fatbobman&apos;s Blog ｜肘子的 Swift 记事本 – Sharing content related to Swift, SwiftUI, Core Data, and Swift Data, as well as covering development tools, AI, and other topics. All articles are original creations; for reproduction, please contact the author.</description><link>https://fatbobman.com/</link><language>en</language><follow_challenge><feedId>57718511161060352</feedId><userId>60878761419746304</userId></follow_challenge><item><title>From 180 cm to 5′ 11″: A Complete Guide to Swift Measurement</title><link>https://fatbobman.com/en/posts/a-complete-guide-to-swift-measurement/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/a-complete-guide-to-swift-measurement/</guid><description>In everyday life we constantly convert values between different units of measurement. For developers this seems easy—write a few formulas, sprinkle in a couple of switch statements and you’re done. But the moment you try to support dozens of units, seamless internationalisation, formatting, precision and rounding, the workload sky-rockets and the drudgery can make you question your life choices. The good news: starting with iOS 10 Apple added a comprehensive Measurement API to Foundation, taking all that donkey work off our hands. This article walks you through its usage and best practices.</description><pubDate>Wed, 07 May 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In everyday life we constantly convert values between different units of measurement. For developers this seems easy—write a few formulas, sprinkle in a couple of switch statements and you’re done. But the moment you try to support dozens of units, seamless internationalisation, formatting, precision and rounding, the workload sky-rockets and the drudgery can make you question your life choices. The good news: starting with iOS 10 Apple added a comprehensive Measurement API to Foundation, taking all that donkey work off our hands. This article walks you through its usage and best practices.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/a-complete-guide-to-swift-measurement/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item><item><title>Apple Pays the Price for Its Arrogance - Fatbobman&apos;s Swift Weekly #82</title><link>https://fatbobman.com/en/weekly/issue-082/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-082/</guid><description>A few days ago, the Epic Games v. Apple case reached a critical milestone. The court ruled that Apple had willfully violated the permanent antitrust injunction issued in 2021. The court not only approved Epic&apos;s motion to enforce the injunction but also took the rare step of referring Apple&apos;s behavior to the U.S. Attorney&apos;s Office for the Northern District of California, to investigate potential criminal contempt of court charges.</description><pubDate>Mon, 05 May 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A few days ago, the Epic Games v. Apple case reached a critical milestone. The court ruled that Apple had willfully violated the permanent antitrust injunction issued in 2021. The court not only approved Epic&apos;s motion to enforce the injunction but also took the rare step of referring Apple&apos;s behavior to the U.S. Attorney&apos;s Office for the Northern District of California, to investigate potential criminal contempt of court charges.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-082/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Using equatable() to Avoid the NavigationLink Pre-Build Pitfall</title><link>https://fatbobman.com/en/posts/using-equatable-to-avoid-the-navigationlink-pre-build-pitfall/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/using-equatable-to-avoid-the-navigationlink-pre-build-pitfall/</guid><description>NavigationLink is a component SwiftUI developers love. By ingeniously combining the behavior of Button with navigation logic, it dramatically simplifies code. Unfortunately, in certain scenarios, using it the wrong way can create serious performance issues and make your app sluggish. This article analyzes the cause of the problem and offers a practical—albeit slightly mysterious—solution:adding the equatable() modifier to optimize performance.</description><pubDate>Tue, 29 Apr 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;NavigationLink is a component SwiftUI developers love. By ingeniously combining the behavior of Button with navigation logic, it dramatically simplifies code. Unfortunately, in certain scenarios, using it the wrong way can create serious performance issues and make your app sluggish. This article analyzes the cause of the problem and offers a practical—albeit slightly mysterious—solution:adding the equatable() modifier to optimize performance.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/using-equatable-to-avoid-the-navigationlink-pre-build-pitfall/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>The Chrome Paradox: Could DOJ’s Antitrust Remedy Create OpenAI’s Next Monopoly? - Fatbobman&apos;s Swift Weekly #81</title><link>https://fatbobman.com/en/weekly/issue-081/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-081/</guid><description>The U.S. Department of Justice (DOJ) and Google have recently made significant progress in their antitrust litigation. The court found that Google had disadvantaged competitors and harmed publishers and consumers by tying its ad server to its ad exchange platform and manipulating the auction process. As one potential remedy, the DOJ is considering requiring Google to divest its Chrome browser and terminate its default search-engine agreements with device manufacturers. Following rumors of OpenAI’s $3 billion bid for WindSurf, OpenAI immediately expressed interest in acquiring Chrome once the ruling was announced.</description><pubDate>Mon, 28 Apr 2025 01:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The U.S. Department of Justice (DOJ) and Google have recently made significant progress in their antitrust litigation. The court found that Google had disadvantaged competitors and harmed publishers and consumers by tying its ad server to its ad exchange platform and manipulating the auction process. As one potential remedy, the DOJ is considering requiring Google to divest its Chrome browser and terminate its default search-engine agreements with device manufacturers. Following rumors of OpenAI’s $3 billion bid for WindSurf, OpenAI immediately expressed interest in acquiring Chrome once the ruling was announced.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-081/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>【Tips】Fixing SwiftLint Configuration Not Working in Monorepo Projects</title><link>https://fatbobman.com/en/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/</link><guid isPermaLink="true">https://fatbobman.com/en/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/</guid><description>Fix SwiftLint not working in Swift monorepos by setting config search paths in VSCode and specifying included directories in .swiftlint.yml</description><pubDate>Thu, 24 Apr 2025 14:20:00 GMT</pubDate><content:encoded>&lt;p&gt;Fix SwiftLint not working in Swift monorepos by setting config search paths in VSCode and specifying included directories in .swiftlint.yml&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/en/snippet/fixing-swiftlint-configuration-not-working-in-monorepo-projects/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>Building Type‑Safe, High‑Performance SwiftData / Core Data Models</title><link>https://fatbobman.com/en/posts/building-typesafe-highperformance-swiftdata-core-data-models/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/building-typesafe-highperformance-swiftdata-core-data-models/</guid><description>Swift’s powerful type system empowers us to create semantically explicit and safe data models. Yet when we move to SwiftData or Core Data, the constraints of their underlying storage mechanisms often force us to compromise on type expressiveness. This article explores how, within the restrictions of persistence layers, we can leverage ingenious type wrappers and conversions to build data models that are simultaneously Type-safe, semantically clear, and highly efficient.</description><pubDate>Wed, 23 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Swift’s powerful type system empowers us to create semantically explicit and safe data models. Yet when we move to SwiftData or Core Data, the constraints of their underlying storage mechanisms often force us to compromise on type expressiveness. This article explores how, within the restrictions of persistence layers, we can leverage ingenious type wrappers and conversions to build data models that are simultaneously Type-safe, semantically clear, and highly efficient.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/building-typesafe-highperformance-swiftdata-core-data-models/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><category>core data</category><author>Fatbobman</author></item><item><title>Shorter Validity, Longer Shelf Life - Fatbobman&apos;s Swift Weekly #80</title><link>https://fatbobman.com/en/weekly/issue-080/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-080/</guid><description>Last Monday, my blog experienced a brief outage due to an expired HTTPS certificate. Thankfully, within five minutes of the issue, an attentive reader notified me about the problem. After contacting my cloud service provider, we discovered the outage was caused by a bug in their automated SSL certificate renewal system. Following two hours of troubleshooting, the issue was resolved, and my website returned to normal operation.</description><pubDate>Mon, 21 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Last Monday, my blog experienced a brief outage due to an expired HTTPS certificate. Thankfully, within five minutes of the issue, an attentive reader notified me about the problem. After contacting my cloud service provider, we discovered the outage was caused by a bug in their automated SSL certificate renewal system. Following two hours of troubleshooting, the issue was resolved, and my website returned to normal operation.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-080/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>My Hopes for Xcode</title><link>https://fatbobman.com/en/posts/my-hopes-for-xcode/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/my-hopes-for-xcode/</guid><description>With rapid advancements in AI, it appears that the era of low-code or even no-code development is imminent. However, over the past year, rather than diminishing, various tools for professional developers have emerged continually. Can Xcode still capture developers&apos; enthusiasm? What changes does it need to stay competitive and relevant? In this article, I will outline several key improvements I hope to see in Xcode.</description><pubDate>Wed, 16 Apr 2025 14:30:00 GMT</pubDate><content:encoded>&lt;p&gt;With rapid advancements in AI, it appears that the era of low-code or even no-code development is imminent. However, over the past year, rather than diminishing, various tools for professional developers have emerged continually. Can Xcode still capture developers&apos; enthusiasm? What changes does it need to stay competitive and relevant? In this article, I will outline several key improvements I hope to see in Xcode.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/my-hopes-for-xcode/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>【Tips】How to Test Core Data Code in VSCode/Cursor</title><link>https://fatbobman.com/en/snippet/how-to-test-core-data-code-in-vscode-cursor/</link><guid isPermaLink="true">https://fatbobman.com/en/snippet/how-to-test-core-data-code-in-vscode-cursor/</guid><description>Learn how to test Core Data in VSCode or Cursor by configuring the Xcode toolchain and manually converting xcdatamodeld to momd with xcrun momc.</description><pubDate>Tue, 15 Apr 2025 14:21:01 GMT</pubDate><content:encoded>&lt;p&gt;Learn how to test Core Data in VSCode or Cursor by configuring the Xcode toolchain and manually converting xcdatamodeld to momd with xcrun momc.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;/en/snippet/how-to-test-core-data-code-in-vscode-cursor/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>core data</category><category>dev tools</category><author>Fatbobman</author></item><item><title>Microsoft Tightens Plugin Restrictions, Google Pushes for the Cloud and What&apos;s Next for Xcode? - Fatbobman&apos;s Swift Weekly #79</title><link>https://fatbobman.com/en/weekly/issue-079/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-079/</guid><description>Not long ago, Microsoft significantly enhanced GitHub Copilot’s functionality. In addition to adding support for MCP, it also introduced an Agent mode for AI interaction similar to that of Cursor. As a result, GitHub Copilot has significantly closed the gap with the leading AI code tools. Given its lower pricing strategy (only $10 per month), it is clear that Microsoft is poised to fully enter the commercial AI assistance market and services.</description><pubDate>Mon, 14 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Not long ago, Microsoft significantly enhanced GitHub Copilot’s functionality. In addition to adding support for MCP, it also introduced an Agent mode for AI interaction similar to that of Cursor. As a result, GitHub Copilot has significantly closed the gap with the leading AI code tools. Given its lower pricing strategy (only $10 per month), it is clear that Microsoft is poised to fully enter the commercial AI assistance market and services.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-079/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Building WASM Applications with Swift</title><link>https://fatbobman.com/en/posts/building-wasm-applications-with-swift/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/building-wasm-applications-with-swift/</guid><description>With the official release of Swift 6.1, SwiftWasm has also undergone a major upgrade. This milestone update marks the first time SwiftWasm has achieved a build entirely based on the official Swift open-source toolchain—leaving behind the era of custom patches. This change not only significantly simplifies the installation process for developers and greatly reduces the consumption of system storage, but more importantly, the genuine build method drastically lowers platform maintenance costs and injects new vitality into the Swift ecosystem. In this article, we will explore how to build WebAssembly applications using Swift, showcasing the endless possibilities of Swift&apos;s cross-platform development.</description><pubDate>Wed, 09 Apr 2025 14:30:00 GMT</pubDate><content:encoded>&lt;p&gt;With the official release of Swift 6.1, SwiftWasm has also undergone a major upgrade. This milestone update marks the first time SwiftWasm has achieved a build entirely based on the official Swift open-source toolchain—leaving behind the era of custom patches. This change not only significantly simplifies the installation process for developers and greatly reduces the consumption of system storage, but more importantly, the genuine build method drastically lowers platform maintenance costs and injects new vitality into the Swift ecosystem. In this article, we will explore how to build WebAssembly applications using Swift, showcasing the endless possibilities of Swift&apos;s cross-platform development.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/building-wasm-applications-with-swift/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>Do Not Market Driver-Assistance as Autonomous Driving - Fatbobman&apos;s Swift Weekly #78</title><link>https://fatbobman.com/en/weekly/issue-078/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-078/</guid><description>Recently, a fatal accident involving a new electric vehicle brand, resulting in three deaths, has once again sparked concerns about so-called &quot;autonomous driving&quot; capabilities. According to currently available information, the vehicle&apos;s &quot;autonomous driving&quot; system failed to recognize a construction zone despite clear warning signs posted along the route, providing an alert only 2–3 seconds before impact. This left the driver with an extremely short window to react.</description><pubDate>Mon, 07 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently, a fatal accident involving a new electric vehicle brand, resulting in three deaths, has once again sparked concerns about so-called &quot;autonomous driving&quot; capabilities. According to currently available information, the vehicle&apos;s &quot;autonomous driving&quot; system failed to recognize a construction zone despite clear warning signs posted along the route, providing an alert only 2–3 seconds before impact. This left the driver with an extremely short window to react.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-078/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Say Goodbye to dismiss: A State-Driven Path to More Maintainable SwiftUI</title><link>https://fatbobman.com/en/posts/say-goodbye-to-dismiss/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/say-goodbye-to-dismiss/</guid><description>Overusing SwiftUI’s dismiss can harm app stability and maintainability. Instead, manage view dismissal through Binding, functions, or custom environment values to ensure clear, testable, and predictable UI behavior. This state-driven approach helps avoid hidden performance issues and builds a more robust architecture.</description><pubDate>Wed, 02 Apr 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;Overusing SwiftUI’s dismiss can harm app stability and maintainability. Instead, manage view dismissal through Binding, functions, or custom environment values to ensure clear, testable, and predictable UI behavior. This state-driven approach helps avoid hidden performance issues and builds a more robust architecture.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/say-goodbye-to-dismiss/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>SwiftUI Environment: Concepts and Practice</title><link>https://fatbobman.com/en/posts/swiftui-environment-concepts-and-practice/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/swiftui-environment-concepts-and-practice/</guid><description>SwiftUI’s Environment is a powerful and elegant mechanism for dependency injection, and almost every SwiftUI developer encounters and uses it in daily development. Not only does it simplify data transfer between views, it also opens up greater possibilities for application architecture design. In this article, we will set aside specific implementation details and instead focus on the role and boundaries of Environment within an architecture, exploring some often-overlooked yet crucial design ideas and practical experiences.</description><pubDate>Wed, 26 Mar 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;SwiftUI’s Environment is a powerful and elegant mechanism for dependency injection, and almost every SwiftUI developer encounters and uses it in daily development. Not only does it simplify data transfer between views, it also opens up greater possibilities for application architecture design. In this article, we will set aside specific implementation details and instead focus on the role and boundaries of Environment within an architecture, exploring some often-overlooked yet crucial design ideas and practical experiences.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/swiftui-environment-concepts-and-practice/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Using Proxyman to Intercept and Simulate iPhone App Network Requests</title><link>https://fatbobman.com/en/posts/using-proxyman-to-intercept-and-simulate-iphone-app-network-requests/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/using-proxyman-to-intercept-and-simulate-iphone-app-network-requests/</guid><description>In the Internet age, developers increasingly interact with network data. Just as we rely on the debugging features of our IDEs to optimize our code, network debugging tools have become indispensable assistants for quickly, efficiently learning, researching, and analyzing network data. This article explains how to use Proxyman to capture the network request information of an iPhone app and simulate server responses by providing mock data. This allows you to test and develop applications without relying on a real server.</description><pubDate>Wed, 19 Mar 2025 14:30:00 GMT</pubDate><content:encoded>&lt;p&gt;In the Internet age, developers increasingly interact with network data. Just as we rely on the debugging features of our IDEs to optimize our code, network debugging tools have become indispensable assistants for quickly, efficiently learning, researching, and analyzing network data. This article explains how to use Proxyman to capture the network request information of an iPhone app and simulate server responses by providing mock data. This allows you to test and develop applications without relying on a real server.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/using-proxyman-to-intercept-and-simulate-iphone-app-network-requests/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>Key Considerations Before Using SwiftData</title><link>https://fatbobman.com/en/posts/key-considerations-before-using-swiftdata/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/key-considerations-before-using-swiftdata/</guid><description>This article aims to serve as a guide for developers interested in SwiftData, helping you understand its strengths and limitations so you can make informed decisions based on your project needs. Whether you’re considering adopting SwiftData in a new project or planning a migration from another persistence solution, the following content will provide valuable insights to support your decision-making process.</description><pubDate>Wed, 12 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This article aims to serve as a guide for developers interested in SwiftData, helping you understand its strengths and limitations so you can make informed decisions based on your project needs. Whether you’re considering adopting SwiftData in a new project or planning a migration from another persistence solution, the following content will provide valuable insights to support your decision-making process.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/key-considerations-before-using-swiftdata/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><author>Fatbobman</author></item><item><title>Lazy Initialization @State in SwiftUI: Overcoming Premature Object Creation</title><link>https://fatbobman.com/en/posts/lazy-initialization-state-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/lazy-initialization-state-in-swiftui/</guid><description>The Observation framework has brought native property-level observation to Swift, effectively preventing unnecessary view updates in SwiftUI triggered by unrelated property changes, thereby enhancing application performance. However, since @State does not offer a lazy initialization constructor like @StateObject, it may lead to performance degradation or even logical issues due to the premature construction of instances in certain scenarios. This article explores how to implement a lazy initialization solution for Observable instances using @State.</description><pubDate>Wed, 05 Mar 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;The Observation framework has brought native property-level observation to Swift, effectively preventing unnecessary view updates in SwiftUI triggered by unrelated property changes, thereby enhancing application performance. However, since @State does not offer a lazy initialization constructor like @StateObject, it may lead to performance degradation or even logical issues due to the premature construction of instances in certain scenarios. This article explores how to implement a lazy initialization solution for Observable instances using @State.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/lazy-initialization-state-in-swiftui/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item></channel></rss>