<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss/styles.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Fatbobman&apos;s Blog</title><description>English Home | Fatbobman&apos;s Blog ｜肘子的 Swift 记事本 – Sharing content related to Swift, SwiftUI, Core Data, and Swift Data, as well as covering development tools, AI, and other topics. All articles are original creations; for reproduction, please contact the author.</description><link>https://fatbobman.com/</link><language>en</language><follow_challenge><feedId>57718511161060352</feedId><userId>60878761419746304</userId></follow_challenge><item><title>Do Not Market Driver-Assistance as Autonomous Driving - Fatbobman&apos;s Swift Weekly #78</title><link>https://fatbobman.com/en/weekly/issue-078/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-078/</guid><description>Recently, a fatal accident involving a new electric vehicle brand, resulting in three deaths, has once again sparked concerns about so-called &quot;autonomous driving&quot; capabilities. According to currently available information, the vehicle&apos;s &quot;autonomous driving&quot; system failed to recognize a construction zone despite clear warning signs posted along the route, providing an alert only 2–3 seconds before impact. This left the driver with an extremely short window to react.</description><pubDate>Mon, 07 Apr 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently, a fatal accident involving a new electric vehicle brand, resulting in three deaths, has once again sparked concerns about so-called &quot;autonomous driving&quot; capabilities. According to currently available information, the vehicle&apos;s &quot;autonomous driving&quot; system failed to recognize a construction zone despite clear warning signs posted along the route, providing an alert only 2–3 seconds before impact. This left the driver with an extremely short window to react.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-078/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Say Goodbye to dismiss: A State-Driven Path to More Maintainable SwiftUI</title><link>https://fatbobman.com/en/posts/say-goodbye-to-dismiss/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/say-goodbye-to-dismiss/</guid><description>Overusing SwiftUI’s dismiss can harm app stability and maintainability. Instead, manage view dismissal through Binding, functions, or custom environment values to ensure clear, testable, and predictable UI behavior. This state-driven approach helps avoid hidden performance issues and builds a more robust architecture.</description><pubDate>Wed, 02 Apr 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;Overusing SwiftUI’s dismiss can harm app stability and maintainability. Instead, manage view dismissal through Binding, functions, or custom environment values to ensure clear, testable, and predictable UI behavior. This state-driven approach helps avoid hidden performance issues and builds a more robust architecture.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/say-goodbye-to-dismiss/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>The Rise of MCP and Apple&apos;s AI Framework Vision - Fatbobman&apos;s Swift Weekly #77</title><link>https://fatbobman.com/en/weekly/issue-077/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-077/</guid><description>Recently, across social networks, an increasing number of Model Context Protocol (MCP) users have been showcasing a diverse range of applications – from controlling Blender to create beautiful scenes to using the latest GPT-4o images to build complete comic stories. MCP has cleverly opened a gateway between large language models that primarily interact through text and the real world.</description><pubDate>Mon, 31 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently, across social networks, an increasing number of Model Context Protocol (MCP) users have been showcasing a diverse range of applications – from controlling Blender to create beautiful scenes to using the latest GPT-4o images to build complete comic stories. MCP has cleverly opened a gateway between large language models that primarily interact through text and the real world.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-077/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>SwiftUI Environment: Concepts and Practice</title><link>https://fatbobman.com/en/posts/swiftui-environment-concepts-and-practice/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/swiftui-environment-concepts-and-practice/</guid><description>SwiftUI’s Environment is a powerful and elegant mechanism for dependency injection, and almost every SwiftUI developer encounters and uses it in daily development. Not only does it simplify data transfer between views, it also opens up greater possibilities for application architecture design. In this article, we will set aside specific implementation details and instead focus on the role and boundaries of Environment within an architecture, exploring some often-overlooked yet crucial design ideas and practical experiences.</description><pubDate>Wed, 26 Mar 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;SwiftUI’s Environment is a powerful and elegant mechanism for dependency injection, and almost every SwiftUI developer encounters and uses it in daily development. Not only does it simplify data transfer between views, it also opens up greater possibilities for application architecture design. In this article, we will set aside specific implementation details and instead focus on the role and boundaries of Environment within an architecture, exploring some often-overlooked yet crucial design ideas and practical experiences.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/swiftui-environment-concepts-and-practice/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Photographing My Fur Babies - Fatbobman&apos;s Swift Weekly #76</title><link>https://fatbobman.com/en/weekly/issue-076/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-076/</guid><description>I have a 13-year-old dog and a cat who&apos;s just over six. Over the years, I&apos;ve taken my dog to a pet photography studio almost annually, but my cat&apos;s severe social anxiety has kept him from joining these photo sessions. In the past year, though, we&apos;ve noticed some improvement in our cat&apos;s demeanor. While he still resists going outside, he now recovers in just minutes after returning from baths or vet visits, rather than the hours it used to take. Seeing this progress, my wife and I decided to take a chance this year by bringing both furry brothers to the studio, hoping to capture a wonderful photo of them together.</description><pubDate>Mon, 24 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have a 13-year-old dog and a cat who&apos;s just over six. Over the years, I&apos;ve taken my dog to a pet photography studio almost annually, but my cat&apos;s severe social anxiety has kept him from joining these photo sessions. In the past year, though, we&apos;ve noticed some improvement in our cat&apos;s demeanor. While he still resists going outside, he now recovers in just minutes after returning from baths or vet visits, rather than the hours it used to take. Seeing this progress, my wife and I decided to take a chance this year by bringing both furry brothers to the studio, hoping to capture a wonderful photo of them together.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-076/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Using Proxyman to Intercept and Simulate iPhone App Network Requests</title><link>https://fatbobman.com/en/posts/using-proxyman-to-intercept-and-simulate-iphone-app-network-requests/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/using-proxyman-to-intercept-and-simulate-iphone-app-network-requests/</guid><description>In the Internet age, developers increasingly interact with network data. Just as we rely on the debugging features of our IDEs to optimize our code, network debugging tools have become indispensable assistants for quickly, efficiently learning, researching, and analyzing network data. This article explains how to use Proxyman to capture the network request information of an iPhone app and simulate server responses by providing mock data. This allows you to test and develop applications without relying on a real server.</description><pubDate>Wed, 19 Mar 2025 14:30:00 GMT</pubDate><content:encoded>&lt;p&gt;In the Internet age, developers increasingly interact with network data. Just as we rely on the debugging features of our IDEs to optimize our code, network debugging tools have become indispensable assistants for quickly, efficiently learning, researching, and analyzing network data. This article explains how to use Proxyman to capture the network request information of an iPhone app and simulate server responses by providing mock data. This allows you to test and develop applications without relying on a real server.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/using-proxyman-to-intercept-and-simulate-iphone-app-network-requests/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>dev tools</category><author>Fatbobman</author></item><item><title>OpenAI Appeals to the US Government: Competitive Concerns Over DeepSeek - Fatbobman&apos;s Swift Weekly #75</title><link>https://fatbobman.com/en/weekly/issue-075/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-075/</guid><description>A few days ago, OpenAI submitted a fifteen-page memorandum to the U.S. government, elevating competitive threats from DeepSeek to the level of national security concerns and attempting to frame it as ideological competition. Frankly speaking, upon reading this news, I couldn&apos;t help but chuckle.</description><pubDate>Mon, 17 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A few days ago, OpenAI submitted a fifteen-page memorandum to the U.S. government, elevating competitive threats from DeepSeek to the level of national security concerns and attempting to frame it as ideological competition. Frankly speaking, upon reading this news, I couldn&apos;t help but chuckle.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-075/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Key Considerations Before Using SwiftData</title><link>https://fatbobman.com/en/posts/key-considerations-before-using-swiftdata/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/key-considerations-before-using-swiftdata/</guid><description>This article aims to serve as a guide for developers interested in SwiftData, helping you understand its strengths and limitations so you can make informed decisions based on your project needs. Whether you’re considering adopting SwiftData in a new project or planning a migration from another persistence solution, the following content will provide valuable insights to support your decision-making process.</description><pubDate>Wed, 12 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This article aims to serve as a guide for developers interested in SwiftData, helping you understand its strengths and limitations so you can make informed decisions based on your project needs. Whether you’re considering adopting SwiftData in a new project or planning a migration from another persistence solution, the following content will provide valuable insights to support your decision-making process.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/key-considerations-before-using-swiftdata/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><author>Fatbobman</author></item><item><title>The Cycle of Expectation and Disappointment: Apple&apos;s AI Dilemma and Resilience - Fatbobman&apos;s Swift Weekly #74</title><link>https://fatbobman.com/en/weekly/issue-074/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-074/</guid><description>A few days ago, Apple announced that its &quot;More Personalized Siri&quot; feature would be delayed until next year. Combined with the continued absence of Swift Assist, it&apos;s clear Apple has not fulfilled the AI vision it presented at WWDC 2024. At least in the realm of large language models, Apple has not exhibited its characteristic agility in keeping pace with industry trends.</description><pubDate>Mon, 10 Mar 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A few days ago, Apple announced that its &quot;More Personalized Siri&quot; feature would be delayed until next year. Combined with the continued absence of Swift Assist, it&apos;s clear Apple has not fulfilled the AI vision it presented at WWDC 2024. At least in the realm of large language models, Apple has not exhibited its characteristic agility in keeping pace with industry trends.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-074/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Lazy Initialization @State in SwiftUI: Overcoming Premature Object Creation</title><link>https://fatbobman.com/en/posts/lazy-initialization-state-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/lazy-initialization-state-in-swiftui/</guid><description>The Observation framework has brought native property-level observation to Swift, effectively preventing unnecessary view updates in SwiftUI triggered by unrelated property changes, thereby enhancing application performance. However, since @State does not offer a lazy initialization constructor like @StateObject, it may lead to performance degradation or even logical issues due to the premature construction of instances in certain scenarios. This article explores how to implement a lazy initialization solution for Observable instances using @State.</description><pubDate>Wed, 05 Mar 2025 14:12:00 GMT</pubDate><content:encoded>&lt;p&gt;The Observation framework has brought native property-level observation to Swift, effectively preventing unnecessary view updates in SwiftUI triggered by unrelated property changes, thereby enhancing application performance. However, since @State does not offer a lazy initialization constructor like @StateObject, it may lead to performance degradation or even logical issues due to the premature construction of instances in certain scenarios. This article explores how to implement a lazy initialization solution for Observable instances using @State.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/lazy-initialization-state-in-swiftui/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Animatable Protocol: Taming Unruly SwiftUI Animations</title><link>https://fatbobman.com/en/posts/animatable-protocol-taming-unruly-swiftui-animation/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/animatable-protocol-taming-unruly-swiftui-animation/</guid><description>In SwiftUI development, have you ever encountered situations where seemingly correct animation code fails to work as expected? Or animations that run perfectly on certain iOS versions but behave abnormally on others? These frustrating animation issues can often be resolved with a powerful yet understated tool — the Animatable protocol.</description><pubDate>Wed, 26 Feb 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;In SwiftUI development, have you ever encountered situations where seemingly correct animation code fails to work as expected? Or animations that run perfectly on certain iOS versions but behave abnormally on others? These frustrating animation issues can often be resolved with a powerful yet understated tool — the Animatable protocol.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/animatable-protocol-taming-unruly-swiftui-animation/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>From Host to Serverless: A Blog Architecture Migration Journey</title><link>https://fatbobman.com/en/posts/from-host-to-serverless/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/from-host-to-serverless/</guid><description>In the past month and a half, I’ve made a series of adjustments to my blog, covering areas such as the publishing mechanism, code architecture, and layout design. These changes have not only enhanced the performance and user experience of the blog but also made content maintenance and updates more efficient. This article provides a brief overview of the key changes.</description><pubDate>Wed, 19 Feb 2025 14:20:00 GMT</pubDate><content:encoded>&lt;p&gt;In the past month and a half, I’ve made a series of adjustments to my blog, covering areas such as the publishing mechanism, code architecture, and layout design. These changes have not only enhanced the performance and user experience of the blog but also made content maintenance and updates more efficient. This article provides a brief overview of the key changes.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/from-host-to-serverless/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>web</category><author>Fatbobman</author></item><item><title>Mastering SwiftUI Scrolling: Implementing Custom Paging</title><link>https://fatbobman.com/en/posts/mastering-swiftui-scrolling-implementing-custom-paging/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/mastering-swiftui-scrolling-implementing-custom-paging/</guid><description>Starting with iOS 17, SwiftUI introduced scrollTargetBehavior, enabling developers to control scrolling behavior with greater precision. Whether it&apos;s aligning views at rest or implementing custom paging effects, scrollTargetBehavior offers robust support. More importantly, developers can create custom ScrollTargetBehavior implementations to meet specific needs. This article will walk through a real-world example, step by step, to demonstrate how to use scrollTargetBehavior and ultimately implement a custom scrolling control logic.</description><pubDate>Wed, 12 Feb 2025 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;Starting with iOS 17, SwiftUI introduced scrollTargetBehavior, enabling developers to control scrolling behavior with greater precision. Whether it&apos;s aligning views at rest or implementing custom paging effects, scrollTargetBehavior offers robust support. More importantly, developers can create custom ScrollTargetBehavior implementations to meet specific needs. This article will walk through a real-world example, step by step, to demonstrate how to use scrollTargetBehavior and ultimately implement a custom scrolling control logic.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/mastering-swiftui-scrolling-implementing-custom-paging/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Why Certain View Modifiers in Swift 6 Cannot Use the @State Property</title><link>https://fatbobman.com/en/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/</guid><description>In Xcode 16, to improve SwiftUI&apos;s performance under Swift 6 mode, Apple made several adjustments to the SwiftUI framework&apos;s APIs to meet stricter concurrency checks. The most notable change is the comprehensive annotation of the View protocol with @MainActor. While these optimizations generally enhance the developer experience in Swift 6 mode, they also introduce some seemingly anomalous compile-time errors in specific scenarios. This article delves into why certain view modifiers cannot directly use @State properties and provides corresponding solutions.</description><pubDate>Tue, 24 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;In Xcode 16, to improve SwiftUI&apos;s performance under Swift 6 mode, Apple made several adjustments to the SwiftUI framework&apos;s APIs to meet stricter concurrency checks. The most notable change is the comprehensive annotation of the View protocol with @MainActor. While these optimizations generally enhance the developer experience in Swift 6 mode, they also introduce some seemingly anomalous compile-time errors in specific scenarios. This article delves into why certain view modifiers cannot directly use @State properties and provides corresponding solutions.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Traps and Countermeasures for Abnormal onAppear Calls in SwiftUI</title><link>https://fatbobman.com/en/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/</guid><description>onAppear is an extremely crucial lifecycle method in SwiftUI, used to inject key logic when a view is presented. Since view instances may be created and rebuilt frequently, developers often choose to prepare data and perform initialization operations within these methods. In theory, the timing of these lifecycle method calls should be predictable and consistent. However, in certain specific scenarios, onAppear may be called unexpectedly and unnecessarily. This not only can lead to performance overhead but also may cause uncontrollable changes in the application&apos;s state. This article will uncover this easily overlooked SwiftUI behavior trap and provide temporary countermeasures.</description><pubDate>Wed, 18 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;onAppear is an extremely crucial lifecycle method in SwiftUI, used to inject key logic when a view is presented. Since view instances may be created and rebuilt frequently, developers often choose to prepare data and perform initialization operations within these methods. In theory, the timing of these lifecycle method calls should be predictable and consistent. However, in certain specific scenarios, onAppear may be called unexpectedly and unnecessarily. This not only can lead to performance overhead but also may cause uncontrollable changes in the application&apos;s state. This article will uncover this easily overlooked SwiftUI behavior trap and provide temporary countermeasures.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item></channel></rss>