<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss/styles.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Fatbobman&apos;s Blog</title><description>Fatbobman&apos;s Blog ｜肘子的 Swift 记事本 – Sharing content related to Swift, SwiftUI, Core Data, and Swift Data, as well as covering development tools, AI, and other topics. All articles are original creations; for reproduction, please contact the author.</description><link>https://fatbobman.com/</link><language>en</language><follow_challenge><feedId>57718511161060352</feedId><userId>60878761419746304</userId></follow_challenge><item><title>Fatbobman&apos;s Swift Weekly #66 : Integrating AI into the Daily Workflow</title><link>https://fatbobman.com/en/weekly/issue-066/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-066/</guid><description>Large language models have become indispensable assistants in my day-to-day work and personal life. Currently, my primary means of interacting with them is conversational. While this style of communication has grown increasingly smooth and intuitive with the improvement of model capabilities, when various needs are interwoven into a single conversation, the resulting efficiency often falls short of what I’d like. To address this, I’ve recently begun exploring how to tailor prompts for dedicated sessions focused on specific tasks.</description><pubDate>Mon, 13 Jan 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Large language models have become indispensable assistants in my day-to-day work and personal life. Currently, my primary means of interacting with them is conversational. While this style of communication has grown increasingly smooth and intuitive with the improvement of model capabilities, when various needs are interwoven into a single conversation, the resulting efficiency often falls short of what I’d like. To address this, I’ve recently begun exploring how to tailor prompts for dedicated sessions focused on specific tasks.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-066/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Fatbobman&apos;s Swift Weekly #65 : Perspective Shift: Viewing the Developer&apos;s Dual Identity Through the Airport Debate</title><link>https://fatbobman.com/en/weekly/issue-065/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-065/</guid><description>My city has a unique setup—the existing airport sits in the heart of the urban area, no more than 10 kilometers from any of the main districts. This ideal location has long made travel remarkably convenient for residents. However, this very location has become a constraint on the airport&apos;s growth: for the past decade, the airport has been running at full capacity, with little room to open new routes. Meanwhile, dense residential zones surrounding the airport limit its runway classification and potential expansions.</description><pubDate>Mon, 06 Jan 2025 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My city has a unique setup—the existing airport sits in the heart of the urban area, no more than 10 kilometers from any of the main districts. This ideal location has long made travel remarkably convenient for residents. However, this very location has become a constraint on the airport&apos;s growth: for the past decade, the airport has been running at full capacity, with little room to open new routes. Meanwhile, dense residential zones surrounding the airport limit its runway classification and potential expansions.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-065/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Fatbobman&apos;s Swift Weekly #64 : Happy New Year 2025</title><link>https://fatbobman.com/en/weekly/issue-064/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-064/</guid><description>Despite the unrest in the world, 2024 has been a fulfilling and wonderful year for me. Throughout the year, I wrote 47 articles and published 51 weekly newsletters, and I can feel my understanding of Swift and SwiftUI continuously deepening. What brings me the most joy is that my entire family has stayed healthy and well.</description><pubDate>Mon, 30 Dec 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Despite the unrest in the world, 2024 has been a fulfilling and wonderful year for me. Throughout the year, I wrote 47 articles and published 51 weekly newsletters, and I can feel my understanding of Swift and SwiftUI continuously deepening. What brings me the most joy is that my entire family has stayed healthy and well.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-064/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Why Certain View Modifiers in Swift 6 Cannot Use the @State Property</title><link>https://fatbobman.com/en/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/</guid><description>In Xcode 16, to improve SwiftUI&apos;s performance under Swift 6 mode, Apple made several adjustments to the SwiftUI framework&apos;s APIs to meet stricter concurrency checks. The most notable change is the comprehensive annotation of the View protocol with @MainActor. While these optimizations generally enhance the developer experience in Swift 6 mode, they also introduce some seemingly anomalous compile-time errors in specific scenarios. This article delves into why certain view modifiers cannot directly use @State properties and provides corresponding solutions.</description><pubDate>Tue, 24 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;In Xcode 16, to improve SwiftUI&apos;s performance under Swift 6 mode, Apple made several adjustments to the SwiftUI framework&apos;s APIs to meet stricter concurrency checks. The most notable change is the comprehensive annotation of the View protocol with @MainActor. While these optimizations generally enhance the developer experience in Swift 6 mode, they also introduce some seemingly anomalous compile-time errors in specific scenarios. This article delves into why certain view modifiers cannot directly use @State properties and provides corresponding solutions.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/why-certain-view-modifiers-in-swift-6-cannot-usethe-state-property/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Fatbobman&apos;s Swift Weekly #63 : Breakthroughs in Xenotransplantation of Kidneys</title><link>https://fatbobman.com/en/weekly/issue-063/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-063/</guid><description>2024 marks the sixth year since I received a kidney transplant. Reflecting on this year, my personal health has been stable and smooth. As the year drew to a close, I received two exciting pieces of news—two groundbreaking advancements in xenotransplantation of kidneys, which fill me with hope for the future</description><pubDate>Mon, 23 Dec 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2024 marks the sixth year since I received a kidney transplant. Reflecting on this year, my personal health has been stable and smooth. As the year drew to a close, I received two exciting pieces of news—two groundbreaking advancements in xenotransplantation of kidneys, which fill me with hope for the future&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-063/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Traps and Countermeasures for Abnormal onAppear Calls in SwiftUI</title><link>https://fatbobman.com/en/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/</guid><description>onAppear is an extremely crucial lifecycle method in SwiftUI, used to inject key logic when a view is presented. Since view instances may be created and rebuilt frequently, developers often choose to prepare data and perform initialization operations within these methods. In theory, the timing of these lifecycle method calls should be predictable and consistent. However, in certain specific scenarios, onAppear may be called unexpectedly and unnecessarily. This not only can lead to performance overhead but also may cause uncontrollable changes in the application&apos;s state. This article will uncover this easily overlooked SwiftUI behavior trap and provide temporary countermeasures.</description><pubDate>Wed, 18 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;onAppear is an extremely crucial lifecycle method in SwiftUI, used to inject key logic when a view is presented. Since view instances may be created and rebuilt frequently, developers often choose to prepare data and perform initialization operations within these methods. In theory, the timing of these lifecycle method calls should be predictable and consistent. However, in certain specific scenarios, onAppear may be called unexpectedly and unnecessarily. This not only can lead to performance overhead but also may cause uncontrollable changes in the application&apos;s state. This article will uncover this easily overlooked SwiftUI behavior trap and provide temporary countermeasures.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/traps-and-countermeasures-for-abnormal-onappear-calls-in-swiftui/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Fatbobman&apos;s Swift Weekly #62 : Making Swift Stronger, Keeping It Simple</title><link>https://fatbobman.com/en/weekly/issue-062/</link><guid isPermaLink="true">https://fatbobman.com/en/weekly/issue-062/</guid><description>Two years ago, a friend asked me for a programming language recommendation for his six-year-old who was showing interest in coding. Considering he already had an iPad and MacBook, I didn&apos;t hesitate to recommend Swift Playgrounds. A few days ago, another friend asked me a similar question, and while I still recommended Playgrounds, I wasn’t as certain as I was two years ago. I’m just not so sure about whether Swift is still suitable for beginners these days.</description><pubDate>Mon, 16 Dec 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Two years ago, a friend asked me for a programming language recommendation for his six-year-old who was showing interest in coding. Considering he already had an iPad and MacBook, I didn&apos;t hesitate to recommend Swift Playgrounds. A few days ago, another friend asked me a similar question, and while I still recommended Playgrounds, I wasn’t as certain as I was two years ago. I’m just not so sure about whether Swift is still suitable for beginners these days.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/weekly/issue-062/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>weekly</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Model Inheritance in Core Data</title><link>https://fatbobman.com/en/posts/model-inheritance-in-core-data/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/model-inheritance-in-core-data/</guid><description>One of Core Data&apos;s outstanding features is its ability to allow developers to declare data models in a manner closer to object-oriented programming without worrying about the underlying storage implementation details. Within this framework, model inheritance is a particularly important mechanism. This article delves into the core concepts of model inheritance, including Parent Entity, Sub Entity, and Abstract Entity. We will analyze their advantages and disadvantages and explore how to achieve similar effects without directly using these features.</description><pubDate>Wed, 11 Dec 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of Core Data&apos;s outstanding features is its ability to allow developers to declare data models in a manner closer to object-oriented programming without worrying about the underlying storage implementation details. Within this framework, model inheritance is a particularly important mechanism. This article delves into the core concepts of model inheritance, including Parent Entity, Sub Entity, and Abstract Entity. We will analyze their advantages and disadvantages and explore how to achieve similar effects without directly using these features.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/model-inheritance-in-core-data/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><category>core data</category><author>Fatbobman</author></item><item><title>Typefully: Say Goodbye to the Hassles of Social Media Posting</title><link>https://fatbobman.com/en/posts/typefully-say-goodbye-to-the-hassles-of-social-media-posting/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/typefully-say-goodbye-to-the-hassles-of-social-media-posting/</guid><description>As social media channels continue to expand, internet users often find themselves managing multiple social accounts without even realizing it. For content creators and corporate account managers, the preparatory work required to post content across various social platforms is becoming increasingly cumbersome. Over the past month, I started using Typefully to centrally manage and publish content on multiple social platforms. Now, I&apos;d like to share my experience.</description><pubDate>Wed, 04 Dec 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;As social media channels continue to expand, internet users often find themselves managing multiple social accounts without even realizing it. For content creators and corporate account managers, the preparatory work required to post content across various social platforms is becoming increasingly cumbersome. Over the past month, I started using Typefully to centrally manage and publish content on multiple social platforms. Now, I&apos;d like to share my experience.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/typefully-say-goodbye-to-the-hassles-of-social-media-posting/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>tools</category><category>life</category><author>Fatbobman</author></item><item><title>Intentional Design or Technical Flaw? The Anomaly of onChange in SwiftUI Multi-Layer Navigation</title><link>https://fatbobman.com/en/posts/the-anomaly-of-onchange-in-swiftui-multi-layer-navigation/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/the-anomaly-of-onchange-in-swiftui-multi-layer-navigation/</guid><description>SwiftUI provides the onChange modifier, allowing developers to listen for changes in specific values within a view and execute corresponding actions when those values change. Intuitively, as long as a view is part of the currently visible branch of the view tree (active), the corresponding closure should be triggered when the observed value changes. However, in certain navigation scenarios, the onChange modifier seems to become &quot;selectively deaf,&quot; inexplicably remaining silent even when the observed value changes. Is this a carefully designed feature by Apple, or a long-hidden code defect? This article aims to unveil this phenomenon and provide necessary caution to developers.</description><pubDate>Wed, 27 Nov 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;SwiftUI provides the onChange modifier, allowing developers to listen for changes in specific values within a view and execute corresponding actions when those values change. Intuitively, as long as a view is part of the currently visible branch of the view tree (active), the corresponding closure should be triggered when the observed value changes. However, in certain navigation scenarios, the onChange modifier seems to become &quot;selectively deaf,&quot; inexplicably remaining silent even when the observed value changes. Is this a carefully designed feature by Apple, or a long-hidden code defect? This article aims to unveil this phenomenon and provide necessary caution to developers.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/the-anomaly-of-onchange-in-swiftui-multi-layer-navigation/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Using Transactions Instead of Save in SwiftData and Core Data</title><link>https://fatbobman.com/en/posts/using-transactions-instead-of-save-in-swiftdata-and-core-data/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/using-transactions-instead-of-save-in-swiftdata-and-core-data/</guid><description>Ensuring data consistency and integrity is crucial in data persistence operations. The SwiftData framework introduces the `transaction` method in `ModelContext`, providing developers with a more elegant way to organize and manage data operations. This article explores how to use the concept of transactions to build more reliable and efficient persistence operations.</description><pubDate>Wed, 20 Nov 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Ensuring data consistency and integrity is crucial in data persistence operations. The SwiftData framework introduces the `transaction` method in `ModelContext`, providing developers with a more elegant way to organize and manage data operations. This article explores how to use the concept of transactions to build more reliable and efficient persistence operations.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/using-transactions-instead-of-save-in-swiftdata-and-core-data/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><category>core data</category><author>Fatbobman</author></item><item><title>Understanding SwiftUI&apos;s View Update Mechanism: Starting from a TimelineView Update Issue</title><link>https://fatbobman.com/en/posts/understanding-swiftui-view-update-mechanism/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/understanding-swiftui-view-update-mechanism/</guid><description>In SwiftUI, the automatic view update mechanism allows us to easily build responsive user interfaces. However, sometimes views may not update as we expect. This article explores SwiftUI&apos;s view update mechanism through a seemingly simple but representative TimelineView update issue.</description><pubDate>Wed, 13 Nov 2024 00:12:00 GMT</pubDate><content:encoded>&lt;p&gt;In SwiftUI, the automatic view update mechanism allows us to easily build responsive user interfaces. However, sometimes views may not update as we expect. This article explores SwiftUI&apos;s view update mechanism through a seemingly simple but representative TimelineView update issue.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/understanding-swiftui-view-update-mechanism/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftui</category><author>Fatbobman</author></item><item><title>Mastering Data Tracking and Notifications in Core Data and SwiftData</title><link>https://fatbobman.com/en/posts/mastering-data-tracking-and-notifications-in-core-data-and-swiftdata/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/mastering-data-tracking-and-notifications-in-core-data-and-swiftdata/</guid><description>Core Data and SwiftData, as powerful persistence frameworks in the Apple ecosystem, not only provide declarative data listening tools like @FetchRequest and @Query, but also have a complete set of data tracking and notification mechanisms built-in. Understanding and mastering these mechanisms is crucial for building robust data-driven applications. This article will take you through multi-layered solutions—from simple custom notifications to the powerful Persistent History Tracking and SwiftData History—to help you handle various complex data synchronization scenarios.</description><pubDate>Wed, 06 Nov 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Core Data and SwiftData, as powerful persistence frameworks in the Apple ecosystem, not only provide declarative data listening tools like @FetchRequest and @Query, but also have a complete set of data tracking and notification mechanisms built-in. Understanding and mastering these mechanisms is crucial for building robust data-driven applications. This article will take you through multi-layered solutions—from simple custom notifications to the powerful Persistent History Tracking and SwiftData History—to help you handle various complex data synchronization scenarios.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/mastering-data-tracking-and-notifications-in-core-data-and-swiftdata/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>swiftdata</category><category>core data</category><author>Fatbobman</author></item><item><title>Starting with Project Refactoring: Sharing Five Swift Modules</title><link>https://fatbobman.com/en/posts/starting-with-project-refactoring-sharing-five-swift-modules/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/starting-with-project-refactoring-sharing-five-swift-modules/</guid><description>Recently, I embarked on the reconstruction of an app that had not received significant updates for four years. During the process, I extracted some functional modules and shared them as open-source projects. This article provides a brief introduction to the libraries I have open-sourced over the past two months.</description><pubDate>Wed, 30 Oct 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently, I embarked on the reconstruction of an app that had not received significant updates for four years. During the process, I extracted some functional modules and shared them as open-source projects. This article provides a brief introduction to the libraries I have open-sourced over the past two months.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/starting-with-project-refactoring-sharing-five-swift-modules/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><category>frameworks</category><category>core data</category><category>swiftdata</category><author>Fatbobman</author></item><item><title>Comprehensive Guide to Mastering KeyPath in Swift</title><link>https://fatbobman.com/en/posts/comprehensive-guide-to-mastering-keypath-in-swift/</link><guid isPermaLink="true">https://fatbobman.com/en/posts/comprehensive-guide-to-mastering-keypath-in-swift/</guid><description>In the world of Swift, KeyPath is a powerful yet often underestimated feature. Many developers use it inadvertently in their daily programming without fully realizing its potential and importance. This article aims to delve deeply into the functional characteristics of KeyPath, revealing its unique charm in Swift programming, and helping you transform it into a powerful assistant in your development process.</description><pubDate>Wed, 23 Oct 2024 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In the world of Swift, KeyPath is a powerful yet often underestimated feature. Many developers use it inadvertently in their daily programming without fully realizing its potential and importance. This article aims to delve deeply into the functional characteristics of KeyPath, revealing its unique charm in Swift programming, and helping you transform it into a powerful assistant in your development process.&lt;/p&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&gt;&lt;a href=&quot;https://fatbobman.com/zh/rss.xml&quot;&gt;&lt;b&gt;订阅中文版 RSS&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   &lt;div style=&quot;margin-top: 20px;&quot;&gt;
                   &lt;p&quot;&gt;&lt;a href=&quot;https://fatbobman.com/en/posts/comprehensive-guide-to-mastering-keypath-in-swift/&quot;&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
                   &lt;/div&gt;
                   </content:encoded><category>computing</category><category>swift</category><category>learning</category><category>programming</category><category>swift-programming</category><category>ios-development</category><author>Fatbobman</author></item></channel></rss>